{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/services/Api/api.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/services/Api/api.vue","mtime":1616989248000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n/**\n * Admin-panel API routes\n */\nimport axios from \"axios\";\nimport store from '../../../State/state';\n\nconst signIn = ({ apiHost, user, password }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/user/authentication`,\n    headers: { \"Girder-Authorization\": `Basic ${btoa(`${user}:${password}`)}` },\n    params: {\n      lang: store.state.currentLanguage.substr(0, 2),\n    },\n  });\n\nconst signUp = ({ apiHost, body }) =>\n  axios({\n    method: \"post\",\n    url: `${apiHost}/user`,\n    params: {\n      ...body,\n      admin: true,\n    },\n  });\n\nconst resetPassword = ({ apiHost, body }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/user/password/temporary`,\n    params: {\n      ...body,\n    },\n  });\n\nconst setSchedule = ({ apiHost, token, id, data }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/applet/${id}/setSchedule`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data,\n  });\nconst getUserDetails = ({ apiHost, token }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/user/me`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\nconst getSchedule = ({ apiHost, token, id }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/applet/${id}/getSchedule?getAllEvents=true`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      localEvents: null,\n    },\n  });\n\nconst getAccounts = ({ apiHost, token }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/user/accounts`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst switchAccount = ({ apiHost, token, accountId }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/user/switchAccount`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      accountId,\n    },\n  });\n\nconst transferOwnership = ({ apiHost, token, appletId, email }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/applet/${appletId}/transferOwnerShip`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      email,\n    },\n  });\n\nconst setAccountName = ({ apiHost, token, accountName }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/user/accountName`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      accountName,\n    },\n  });\n\nconst getApplet = ({ apiHost, token, allEvent, id }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/applet/${id}?retrieveSchedule=true&retrieveAllEvents=${allEvent}&retrieveItems=true`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getActivityByUrl = ({ apiHost, token, url }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/activity`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      url,\n    },\n  });\n\nconst getUserResponses = ({ apiHost, token, appletId, users, fromDate, toDate }) => axios({\n  method: 'get',\n  url: `${apiHost}/response/${appletId}`,\n  headers: {\n    'Girder-Token': token,\n  },\n  params: { users: JSON.stringify(users), fromDate, toDate },\n});\n\nconst addNewApplet = ({ apiHost, token, protocolUrl, email, data }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      protocolUrl,\n      email,\n      lang: store.state.currentLanguage,\n    },\n    data,\n  });\n\nconst refreshApplet = ({ apiHost, token, appletId }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/applet/${appletId}/refresh`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      lang: store.state.currentLanguage,\n    }\n  });\n\nconst revokeAppletUser = ({\n  apiHost,\n  token,\n  appletId,\n  profileId,\n  deleteResponse,\n}) =>\n  axios({\n    method: \"DELETE\",\n    url: `${apiHost}/applet/${appletId}/deleteUser`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      profileId,\n      deleteResponse,\n    },\n  });\n\nconst getGroupMemberships = ({ apiHost, token, appletId }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/applet/${appletId}/roles`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getAppletUsers = ({ apiHost, token, appletId }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/applet/${appletId}/users?retrieveRoles=true`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getUserList = ({ apiHost, token, appletId, reviewerId }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/applet/${appletId}/reviewer/userList`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      reviewerId,\n    },\n  });\n\nconst updateUserRoles = ({ apiHost, token, appletId, userId, roleInfo }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/applet/${appletId}/updateRoles`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      userId,\n      roleInfo,\n    },\n  });\n\nconst deleteUserFromRole = ({ apiHost, token, groupId, userId }) => {\n  const f = new FormData();\n  f.append(\"userId\", userId);\n  return axios({\n    method: \"DELETE\",\n    url: `${apiHost}/group/${groupId}/member`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data: f,\n  });\n};\n\nconst postAppletInvitation = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/${appletId}/invite`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: options,\n  });\n\nconst deleteApplet = ({ apiHost, token, appletId }) =>\n  axios({\n    method: \"DELETE\",\n    url: `${apiHost}/applet/${appletId}`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst createApplet = ({ apiHost, token, email, data }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/fromJSON`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      email,\n      lang: store.state.currentLanguage,\n    },\n    data,\n  });\n\nconst updateApplet = ({ apiHost, token, data, appletId }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/applet/${appletId}/fromJSON`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data,\n  })\n\nconst prepareApplet = ({ apiHost, token, data, appletId }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/applet/${appletId}/prepare`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data,\n  })\n\nconst updateRegistration = ({ apiHost, token, groupId, open }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/group/${groupId}?openRegistration=${open}`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getAppletsForUser = ({ apiHost, token, user, role = null }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/user/applets?role=${role}`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getAppletInvitation = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/${appletId}/inviteUser`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: { ...options, users: JSON.stringify(options.users) },\n  });\n\nconst updateItemTemplates = ({ apiHost, token, data }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/item/templates`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data\n  });\n\nconst getItemTemplates = ({ apiHost, token }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/item/templates`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getUsersData = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/applet/${appletId}/data`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: options,\n  });\n\nconst duplicateApplet = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/${appletId}/duplicate`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      ...options,\n      lang: store.state.currentLanguage,\n    },\n  });\n\n\nconst replaceResponseData = ({ apiHost, token, appletId, user, data }) => axios({\n  method: 'put',\n  url: `${apiHost}/response/${appletId}`,\n  headers: {\n    'Girder-Token': token,\n  },\n  data,\n  params: {\n    user\n  }\n});\n\nconst setAppletEncryption = ({ apiHost, token, appletId, data }) => axios({\n  method: 'put',\n  url: `${apiHost}/applet/${appletId}/encryption`,\n  headers: {\n    'Girder-Token': token,\n  },\n  data\n});\n\nconst getAppletVersions = ({ apiHost, token, appletId }) => axios({\n  method: 'get',\n  url: `${apiHost}/applet/${appletId}/versions`,\n  headers: {\n    'Girder-Token': token\n  }\n});\n\nconst getProtocolData = ({ apiHost, token, appletId, versions }) => axios({\n  method: 'get',\n  url: `${apiHost}/applet/${appletId}/protocolData`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: { versions: JSON.stringify(versions) },\n})\n\n\nconst validateAppletName = ({ apiHost, token, name }) => axios({\n  method: 'get',\n  url: `${apiHost}/applet/validateName`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: { name }\n});\n\nconst updateRetainingSettings = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/${appletId}/setRetention`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: options,\n  });\n\nconst getAccountUserList = ({ apiHost, token, appletId, role, MRN, pagination, sort }) => axios({\n  method: 'get',\n  url: `${apiHost}/account/users`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: {\n    appletId, role, MRN, pagination, sort\n  },\n});\n\nconst getInvitations = ({ apiHost, token, appletId }) => axios({\n  method: 'get',\n  url: `${apiHost}/applet/${appletId}/invitations`,\n  headers: {\n    'Girder-Token': token,\n  },\n});\n\n\nconst updatePin = ({ apiHost, token, profileId, newState }) => axios({\n  method: 'put',\n  url: `${apiHost}/account/manage/pin`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: {\n    profileId, newState\n  }\n})\n\nconst getAppletsInFolder = (apiHost, token, folderId) => axios({\n  method: 'get',\n  url: `${apiHost}/folder/${folderId}/applets`,\n  headers: {\n    'Girder-Token': token\n  }\n})\n\nconst deleteFolder = (apiHost, token, folderId) => axios({\n  method: 'delete',\n  url: `${apiHost}/folder/${folderId}`,\n  headers: {\n    'Girder-Token': token\n  }\n})\n\nconst addAppletToFolder = (apiHost, token, folderId, appletId) => axios({\n  method: 'put',\n  url: `${apiHost}/folder/${folderId}/add`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: {\n    id: folderId, \n    appletId\n  }\n})\n\nconst removeApplet = (apiHost, token, folderId, appletId) => axios({\n  method: 'delete',\n  url: `${apiHost}/folder/${folderId}/remove`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: {\n    id: folderId, \n    appletId\n  }\n})\n\n\nconst saveFolder = (apiHost, token, folder) =>  {\n  return axios({\n    method: 'post',\n    url: `${apiHost}/folder`,\n    headers: {\n      'Girder-Token': token\n    },\n    params: {\n    name: folder.name,\n    parentType: 'user',\n    parentId: folder.parentId\n    }\n  })\n}\nconst updateFolder = (apiHost, token, folder,  folderId) =>  {\n  return axios({\n    method: 'put',\n    url: `${apiHost}/folder/${folderId}`,\n    headers: {\n      'Girder-Token': token\n    },\n    params: {\n    name: folder.name,\n    parentType: 'user',\n    parentId: folder.parentId\n    }\n  })\n}\nconst togglePin = (apiHost, token, applet, isPinned) => {\n  const url = isPinned ? `${apiHost}/folder/${applet.parentId}/pin` : `${apiHost}/folder/${applet.parentId}/unpin`\n  return axios({\n        method: 'put',\n        url,\n        headers: {\n          'Girder-Token': token\n        },\n        params: {\n         id: applet.parentId,\n         appletId: applet.id\n        }\n    })\n}\n\nconst updateAlertStatus = (apiHost, token, alertId) => {\n  return axios({\n    method: 'put',\n    url: `${apiHost}/account/updateAlertStatus/${alertId}`,\n    headers: {\n      'Girder-Token': token\n    }\n  })\n}\n\nexport default {\n  signIn,\n  signUp,\n  setSchedule,\n  getSchedule,\n  getAccounts,\n  getUserDetails,\n  switchAccount,\n  setAccountName,\n  addNewApplet,\n  resetPassword,\n  getGroupMemberships,\n  deleteUserFromRole,\n  updateUserRoles,\n  getAppletUsers,\n  transferOwnership,\n  postAppletInvitation,\n  revokeAppletUser,\n  deleteApplet,\n  createApplet,\n  refreshApplet,\n  getApplet,\n  getUserList,\n  updateRegistration,\n  getActivityByUrl,\n  getUserResponses,\n  getAppletInvitation,\n  getItemTemplates,\n  updateItemTemplates,\n  getUsersData,\n  getAppletsForUser,\n  duplicateApplet,\n  replaceResponseData,\n  setAppletEncryption,\n  updateApplet,\n  getAppletVersions,\n  getProtocolData,\n  prepareApplet,\n  validateAppletName,\n  updateRetainingSettings,\n  getAccountUserList,\n  updatePin,\n  getInvitations,\n  getAppletsInFolder,\n  addAppletToFolder,\n  removeApplet,\n  saveFolder,\n  updateFolder,\n  deleteFolder,\n  togglePin,\n  updateAlertStatus,\n}\n",{"version":3,"sources":["api.vue"],"names":[],"mappingsfile":"api.vue","sourceRoot":"src/services/Api","sourcesContent":["<script>\n/**\n * Admin-panel API routes\n */\nimport axios from \"axios\";\nimport store from '../../../State/state';\n\nconst signIn = ({ apiHost, user, password }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/user/authentication`,\n    headers: { \"Girder-Authorization\": `Basic ${btoa(`${user}:${password}`)}` },\n    params: {\n      lang: store.state.currentLanguage.substr(0, 2),\n    },\n  });\n\nconst signUp = ({ apiHost, body }) =>\n  axios({\n    method: \"post\",\n    url: `${apiHost}/user`,\n    params: {\n      ...body,\n      admin: true,\n    },\n  });\n\nconst resetPassword = ({ apiHost, body }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/user/password/temporary`,\n    params: {\n      ...body,\n    },\n  });\n\nconst setSchedule = ({ apiHost, token, id, data }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/applet/${id}/setSchedule`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data,\n  });\nconst getUserDetails = ({ apiHost, token }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/user/me`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\nconst getSchedule = ({ apiHost, token, id }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/applet/${id}/getSchedule?getAllEvents=true`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      localEvents: null,\n    },\n  });\n\nconst getAccounts = ({ apiHost, token }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/user/accounts`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst switchAccount = ({ apiHost, token, accountId }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/user/switchAccount`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      accountId,\n    },\n  });\n\nconst transferOwnership = ({ apiHost, token, appletId, email }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/applet/${appletId}/transferOwnerShip`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      email,\n    },\n  });\n\nconst setAccountName = ({ apiHost, token, accountName }) =>\n  axios({\n    method: \"put\",\n    url: `${apiHost}/user/accountName`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      accountName,\n    },\n  });\n\nconst getApplet = ({ apiHost, token, allEvent, id }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/applet/${id}?retrieveSchedule=true&retrieveAllEvents=${allEvent}&retrieveItems=true`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getActivityByUrl = ({ apiHost, token, url }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/activity`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      url,\n    },\n  });\n\nconst getUserResponses = ({ apiHost, token, appletId, users, fromDate, toDate }) => axios({\n  method: 'get',\n  url: `${apiHost}/response/${appletId}`,\n  headers: {\n    'Girder-Token': token,\n  },\n  params: { users: JSON.stringify(users), fromDate, toDate },\n});\n\nconst addNewApplet = ({ apiHost, token, protocolUrl, email, data }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      protocolUrl,\n      email,\n      lang: store.state.currentLanguage,\n    },\n    data,\n  });\n\nconst refreshApplet = ({ apiHost, token, appletId }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/applet/${appletId}/refresh`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      lang: store.state.currentLanguage,\n    }\n  });\n\nconst revokeAppletUser = ({\n  apiHost,\n  token,\n  appletId,\n  profileId,\n  deleteResponse,\n}) =>\n  axios({\n    method: \"DELETE\",\n    url: `${apiHost}/applet/${appletId}/deleteUser`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      profileId,\n      deleteResponse,\n    },\n  });\n\nconst getGroupMemberships = ({ apiHost, token, appletId }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/applet/${appletId}/roles`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getAppletUsers = ({ apiHost, token, appletId }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/applet/${appletId}/users?retrieveRoles=true`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getUserList = ({ apiHost, token, appletId, reviewerId }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/applet/${appletId}/reviewer/userList`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      reviewerId,\n    },\n  });\n\nconst updateUserRoles = ({ apiHost, token, appletId, userId, roleInfo }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/applet/${appletId}/updateRoles`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      userId,\n      roleInfo,\n    },\n  });\n\nconst deleteUserFromRole = ({ apiHost, token, groupId, userId }) => {\n  const f = new FormData();\n  f.append(\"userId\", userId);\n  return axios({\n    method: \"DELETE\",\n    url: `${apiHost}/group/${groupId}/member`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data: f,\n  });\n};\n\nconst postAppletInvitation = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/${appletId}/invite`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: options,\n  });\n\nconst deleteApplet = ({ apiHost, token, appletId }) =>\n  axios({\n    method: \"DELETE\",\n    url: `${apiHost}/applet/${appletId}`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst createApplet = ({ apiHost, token, email, data }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/fromJSON`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      email,\n      lang: store.state.currentLanguage,\n    },\n    data,\n  });\n\nconst updateApplet = ({ apiHost, token, data, appletId }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/applet/${appletId}/fromJSON`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data,\n  })\n\nconst prepareApplet = ({ apiHost, token, data, appletId }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/applet/${appletId}/prepare`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data,\n  })\n\nconst updateRegistration = ({ apiHost, token, groupId, open }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/group/${groupId}?openRegistration=${open}`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getAppletsForUser = ({ apiHost, token, user, role = null }) =>\n  axios({\n    method: \"get\",\n    url: `${apiHost}/user/applets?role=${role}`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getAppletInvitation = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/${appletId}/inviteUser`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: { ...options, users: JSON.stringify(options.users) },\n  });\n\nconst updateItemTemplates = ({ apiHost, token, data }) =>\n  axios({\n    method: \"PUT\",\n    url: `${apiHost}/item/templates`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    data\n  });\n\nconst getItemTemplates = ({ apiHost, token }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/item/templates`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n  });\n\nconst getUsersData = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"GET\",\n    url: `${apiHost}/applet/${appletId}/data`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: options,\n  });\n\nconst duplicateApplet = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/${appletId}/duplicate`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: {\n      ...options,\n      lang: store.state.currentLanguage,\n    },\n  });\n\n\nconst replaceResponseData = ({ apiHost, token, appletId, user, data }) => axios({\n  method: 'put',\n  url: `${apiHost}/response/${appletId}`,\n  headers: {\n    'Girder-Token': token,\n  },\n  data,\n  params: {\n    user\n  }\n});\n\nconst setAppletEncryption = ({ apiHost, token, appletId, data }) => axios({\n  method: 'put',\n  url: `${apiHost}/applet/${appletId}/encryption`,\n  headers: {\n    'Girder-Token': token,\n  },\n  data\n});\n\nconst getAppletVersions = ({ apiHost, token, appletId }) => axios({\n  method: 'get',\n  url: `${apiHost}/applet/${appletId}/versions`,\n  headers: {\n    'Girder-Token': token\n  }\n});\n\nconst getProtocolData = ({ apiHost, token, appletId, versions }) => axios({\n  method: 'get',\n  url: `${apiHost}/applet/${appletId}/protocolData`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: { versions: JSON.stringify(versions) },\n})\n\n\nconst validateAppletName = ({ apiHost, token, name }) => axios({\n  method: 'get',\n  url: `${apiHost}/applet/validateName`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: { name }\n});\n\nconst updateRetainingSettings = ({ apiHost, token, appletId, options }) =>\n  axios({\n    method: \"POST\",\n    url: `${apiHost}/applet/${appletId}/setRetention`,\n    headers: {\n      \"Girder-Token\": token,\n    },\n    params: options,\n  });\n\nconst getAccountUserList = ({ apiHost, token, appletId, role, MRN, pagination, sort }) => axios({\n  method: 'get',\n  url: `${apiHost}/account/users`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: {\n    appletId, role, MRN, pagination, sort\n  },\n});\n\nconst getInvitations = ({ apiHost, token, appletId }) => axios({\n  method: 'get',\n  url: `${apiHost}/applet/${appletId}/invitations`,\n  headers: {\n    'Girder-Token': token,\n  },\n});\n\n\nconst updatePin = ({ apiHost, token, profileId, newState }) => axios({\n  method: 'put',\n  url: `${apiHost}/account/manage/pin`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: {\n    profileId, newState\n  }\n})\n\nconst getAppletsInFolder = (apiHost, token, folderId) => axios({\n  method: 'get',\n  url: `${apiHost}/folder/${folderId}/applets`,\n  headers: {\n    'Girder-Token': token\n  }\n})\n\nconst deleteFolder = (apiHost, token, folderId) => axios({\n  method: 'delete',\n  url: `${apiHost}/folder/${folderId}`,\n  headers: {\n    'Girder-Token': token\n  }\n})\n\nconst addAppletToFolder = (apiHost, token, folderId, appletId) => axios({\n  method: 'put',\n  url: `${apiHost}/folder/${folderId}/add`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: {\n    id: folderId, \n    appletId\n  }\n})\n\nconst removeApplet = (apiHost, token, folderId, appletId) => axios({\n  method: 'delete',\n  url: `${apiHost}/folder/${folderId}/remove`,\n  headers: {\n    'Girder-Token': token\n  },\n  params: {\n    id: folderId, \n    appletId\n  }\n})\n\n\nconst saveFolder = (apiHost, token, folder) =>  {\n  return axios({\n    method: 'post',\n    url: `${apiHost}/folder`,\n    headers: {\n      'Girder-Token': token\n    },\n    params: {\n    name: folder.name,\n    parentType: 'user',\n    parentId: folder.parentId\n    }\n  })\n}\nconst updateFolder = (apiHost, token, folder,  folderId) =>  {\n  return axios({\n    method: 'put',\n    url: `${apiHost}/folder/${folderId}`,\n    headers: {\n      'Girder-Token': token\n    },\n    params: {\n    name: folder.name,\n    parentType: 'user',\n    parentId: folder.parentId\n    }\n  })\n}\nconst togglePin = (apiHost, token, applet, isPinned) => {\n  const url = isPinned ? `${apiHost}/folder/${applet.parentId}/pin` : `${apiHost}/folder/${applet.parentId}/unpin`\n  return axios({\n        method: 'put',\n        url,\n        headers: {\n          'Girder-Token': token\n        },\n        params: {\n         id: applet.parentId,\n         appletId: applet.id\n        }\n    })\n}\n\nconst updateAlertStatus = (apiHost, token, alertId) => {\n  return axios({\n    method: 'put',\n    url: `${apiHost}/account/updateAlertStatus/${alertId}`,\n    headers: {\n      'Girder-Token': token\n    }\n  })\n}\n\nexport default {\n  signIn,\n  signUp,\n  setSchedule,\n  getSchedule,\n  getAccounts,\n  getUserDetails,\n  switchAccount,\n  setAccountName,\n  addNewApplet,\n  resetPassword,\n  getGroupMemberships,\n  deleteUserFromRole,\n  updateUserRoles,\n  getAppletUsers,\n  transferOwnership,\n  postAppletInvitation,\n  revokeAppletUser,\n  deleteApplet,\n  createApplet,\n  refreshApplet,\n  getApplet,\n  getUserList,\n  updateRegistration,\n  getActivityByUrl,\n  getUserResponses,\n  getAppletInvitation,\n  getItemTemplates,\n  updateItemTemplates,\n  getUsersData,\n  getAppletsForUser,\n  duplicateApplet,\n  replaceResponseData,\n  setAppletEncryption,\n  updateApplet,\n  getAppletVersions,\n  getProtocolData,\n  prepareApplet,\n  validateAppletName,\n  updateRetainingSettings,\n  getAccountUserList,\n  updatePin,\n  getInvitations,\n  getAppletsInFolder,\n  addAppletToFolder,\n  removeApplet,\n  saveFolder,\n  updateFolder,\n  deleteFolder,\n  togglePin,\n  updateAlertStatus,\n}\n</script>\n"]}]}