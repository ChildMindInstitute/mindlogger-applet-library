{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/pages/LibrarySearch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/pages/LibrarySearch.vue","mtime":1617594617000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport api from \"../services/Api/api.vue\";\n\nexport default {\n  name: 'LibrarySearch',\n  components: {\n\n  },\n  data() {\n    return {\n      searchText: \"\",\n      isLoading: true,\n      items: [\n        {\n          id: 1,\n          name: 'Root',\n          children: [\n            { id: 2, name: 'Child #1' },\n            { id: 3, name: 'Child #2' },\n            {\n              id: 4,\n              name: 'Child #3',\n              children: [\n                { id: 5, name: 'Grandchild #1' },\n                { id: 6, name: 'Grandchild #2' },\n              ],\n            },\n          ],\n        },\n      ],\n      selectedApplets: {},\n      appletsTree: [],\n      baskets: [],\n      selection: [],\n      \n    };\n  },\n  async beforeMount() {\n    try {\n      this.isLoading = true;\n      const publishedApplets = (await api.getPublishedApplets({\n        apiHost: this.$store.state.backend,\n      })).data;\n\n      this.appletsTree = await Promise.all(publishedApplets.map(async (applet) => {\n        try {\n          const response = await api.getAppletContent({\n            apiHost: this.$store.state.backend,\n            libraryId: applet.id,\n          });\n\n          return this.buildAppletTree(response.data);\n        } catch (error) {\n          console.log(error)\n        }\n      }));\n\n      this.$store.commit(\"setPublishedApplets\", publishedApplets);\n      this.publishedApplets();\n      this.isLoading = false;\n    } catch(err) {\n      console.log(err);\n    }\n  },\n  methods: {\n    publishedApplets() {\n      if (this.searchText) {\n        return this.$store.state.publishedApplets.forEach(applet => {\n          applet.keywords.forEach(keyword => {\n            if (keyword.startsWith(this.searchText)) {\n              return true;\n            }\n          });\n\n          return false;\n        });\n      } else {\n        return this.$store.state.publishedApplets;\n      }\n    },\n    onAddBasket (appletId) {\n      const form = new FormData();\n\n      form.set(\"basket\", JSON.stringify(this.selectedApplets[appletId]));\n      api.addAppletsToBasket({\n        apiHost: this.$store.state.backend,\n        data: form,\n      }).then(() => {\n        if (!this.baskets.includes(appletId)) {\n          this.baskets.push(appletId);\n        }\n      });\n    },\n    buildAppletTree (appletData) {\n      const { items, activities, applet } = appletData;\n      const treeItem = {\n        id: 1,\n        appletId: applet._id.substring(7),\n        name: appletData.applet[\"@id\"],\n        children: [],\n      };\n\n      let index = 2;\n\n      for (const activityId in activities) {\n        const activityItem = {\n          id: index,\n          activityId,\n          name: activities[activityId][\"@id\"],\n          children: [],\n        };\n\n        index += 1;\n        for (const itemId in items) {\n          const values = itemId.split('/');\n\n          if (activityId === values[0]) {\n            const item = {\n              id: index,\n              itemId: values[1],\n              inputType: items[itemId][\"reprolib:terms/inputType\"][0][\"@value\"],\n              name: items[itemId][\"@id\"]\n            };\n\n            index += 1;\n            activityItem.children.push(item);\n          }\n        }\n\n        treeItem.children.push(activityItem);\n      }\n\n      return treeItem;\n    },\n    /*\n     * Change appletTreeData format to basket data \n     */\n    onAppletSelection() {\n      const selectedApplets = {};\n\n      this.selection.forEach(({ id }) => {\n        this.appletsTree.forEach(applet => {\n          applet.children.forEach(activity => {\n            const selectedItem = activity.children.find(item => item.id === id);\n\n            if (selectedItem) {\n              if (!selectedApplets[applet.appletId]) {\n                selectedApplets[applet.appletId] = [];\n              }\n\n              const actIndex = selectedApplets[applet.appletId].findIndex(({ activityId }) => activity.activityId);\n\n              if (actIndex === -1) {\n                const act = {\n                  activityId: activity.activityId,\n                };\n\n                if (activity.children.length === 1) {\n                  act.items = null;\n                } else {\n                  act.items = [];\n                  act.items.push(selectedItem.itemId);\n                }\n                selectedApplets[applet.appletId].push(act);\n              } else if (selectedApplets[applet.appletId][actIndex].items) {\n                selectedApplets[applet.appletId][actIndex].items.push(selectedItem.itemId);\n\n                if (selectedApplets[applet.appletId][actIndex].items.length === activity.children.length) {\n                  selectedApplets[applet.appletId][actIndex].items = null;\n                }\n              }\n            }\n          });\n        });\n      });\n\n      this.selectedApplets = { ...selectedApplets };\n    },\n    onSearchText () {\n\n    }\n  },\n};\n",{"version":3,"sources":["LibrarySearch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"LibrarySearch.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div v-show=\"!isLoading\">\n    <div class=\"d-flex align-center justify-center align-content-ceneter\">\n      <v-text-field\n        v-model=\"searchText\"\n        @input=\"onSearchText\"\n        light\n        solo\n        prepend-inner-icon=\"search\"\n        placeholder=\"Type keyword...\">\n      </v-text-field>\n\n      <v-badge\n        v-if=\"baskets.length\"\n        color=\"primary\"\n        :content=\"baskets.length\"\n        bottom\n        offset-x=\"35\"\n        offset-y=\"37\"\n      >\n        <v-icon color=\"blue-grey darken-3\" large class=\"mx-4 mb-6\">\n          mdi-basket-outline \n        </v-icon>\n      </v-badge>\n      <v-badge\n        v-else\n        color=\"primary\"\n        content=\"0\"\n        bottom\n        offset-x=\"35\"\n        offset-y=\"37\"\n      >\n        <v-icon color=\"blue-grey darken-3\" large class=\"mx-4 mb-6\">\n          mdi-basket-outline \n        </v-icon>\n      </v-badge>\n    </div>\n\n    <div class=\"mt-0\">\n      <v-card \n        class=\"mx-auto mb-4 d-flex pa-md-2\"\n        v-for=\"applet in publishedApplets()\"\n      >\n        <div class=\"text-center\">\n          <v-img\n            v-if=\"applet.image\"\n            class=\"ma-2 ds-avatar\"\n            src=\"https://cdn.vuetifyjs.com/images/cards/sunshine.jpg\"\n            max-width=\"150px\"\n            height=\"150px\"\n          />\n\n          <v-avatar\n            v-else\n            tile\n            class=\"ma-2 ds-avatar\"\n            color=\"blue\"\n            size=\"150\"\n          >\n            <span class=\"white--text text-h3\">\n              {{ applet.name[0] }}\n            </span>\n          </v-avatar>\n        </div>\n        <div class=\"ds-tree-layout ml-2\">\n          <v-card-title class=\"text-decoration-underline text-h6\">\n            {{ applet.name }}\n          </v-card-title>\n\n          <v-card-subtitle \n            v-if=\"applet.description\"\n            class=\"mx-6 black--text text-body-1 ds-subtitle\"\n          >\n            Description: {{ applet.description }}\n          </v-card-subtitle>\n\n          <v-card-actions class=\"mx-5 px-2 py-0\">\n            <span \n              v-if=\"applet.keywords.length\"\n              class=\"text-body-1\"\n            >\n              Keywords: \n            </span>\n            <v-btn\n              v-for=\"keyword in applet.keywords\"\n              color=\"orange lighten-2\"\n              text\n            >\n              {{ keyword }}\n            </v-btn>\n          </v-card-actions>\n\n          <v-expand-transition>\n            <v-treeview\n              class=\"d-flex justify-start ds-tree-view\"\n              v-model=\"selection\"\n              :items=\"appletsTree\"\n              selection-type=\"leaf\"\n              color=\"primary\"\n              selected-color=\"primary\"\n              on-icon=\"mdi-bookmark\"\n              off-icon=\"mdi-bookmark-outline\"\n              indeterminate-icon=\"mdi-bookmark-minus\"\n              @input=\"onAppletSelection\"\n              open-on-click\n              activatable\n              selectable\n              hoverable\n              return-object\n            >\n            </v-treeview>\n          </v-expand-transition>\n        </div>\n        <div class=\"d-flex align-baseline\">\n          <v-btn\n            class=\"mx-2 mt-2\"\n            fab\n            small\n            @click=\"onAddBasket(applet.appletId)\"\n            :disabled=\"!selectedApplets[applet.appletId]\"\n          >\n            <v-icon color=\"grey darken-3\" >\n              mdi-basket-plus-outline\n            </v-icon>\n          </v-btn>\n\n          <v-btn\n            class=\"ml-2 mt-2 mr-6\"\n            fab\n            small\n          >\n            <v-icon color=\"grey darken-3\">\n              mdi-information-outline\n            </v-icon>\n          </v-btn>\n        </div>\n      </v-card>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\">\n.ds-avatar {\n  border-radius: 4px !important;\n}\n\n.ds-subtitle {\n  padding: 4px !important;\n  margin-top: 0 !important;\n}\n\n.v-treeview-node__content {\n  flex-direction: column;\n}\n\n.ds-tree-view, .ds-tree-layout {\n  width: 100%\n}\n\n.v-treeview-node {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n</style>\n\n<script>\nimport api from \"../services/Api/api.vue\";\n\nexport default {\n  name: 'LibrarySearch',\n  components: {\n\n  },\n  data() {\n    return {\n      searchText: \"\",\n      isLoading: true,\n      items: [\n        {\n          id: 1,\n          name: 'Root',\n          children: [\n            { id: 2, name: 'Child #1' },\n            { id: 3, name: 'Child #2' },\n            {\n              id: 4,\n              name: 'Child #3',\n              children: [\n                { id: 5, name: 'Grandchild #1' },\n                { id: 6, name: 'Grandchild #2' },\n              ],\n            },\n          ],\n        },\n      ],\n      selectedApplets: {},\n      appletsTree: [],\n      baskets: [],\n      selection: [],\n      \n    };\n  },\n  async beforeMount() {\n    try {\n      this.isLoading = true;\n      const publishedApplets = (await api.getPublishedApplets({\n        apiHost: this.$store.state.backend,\n      })).data;\n\n      this.appletsTree = await Promise.all(publishedApplets.map(async (applet) => {\n        try {\n          const response = await api.getAppletContent({\n            apiHost: this.$store.state.backend,\n            libraryId: applet.id,\n          });\n\n          return this.buildAppletTree(response.data);\n        } catch (error) {\n          console.log(error)\n        }\n      }));\n\n      this.$store.commit(\"setPublishedApplets\", publishedApplets);\n      this.publishedApplets();\n      this.isLoading = false;\n    } catch(err) {\n      console.log(err);\n    }\n  },\n  methods: {\n    publishedApplets() {\n      if (this.searchText) {\n        return this.$store.state.publishedApplets.forEach(applet => {\n          applet.keywords.forEach(keyword => {\n            if (keyword.startsWith(this.searchText)) {\n              return true;\n            }\n          });\n\n          return false;\n        });\n      } else {\n        return this.$store.state.publishedApplets;\n      }\n    },\n    onAddBasket (appletId) {\n      const form = new FormData();\n\n      form.set(\"basket\", JSON.stringify(this.selectedApplets[appletId]));\n      api.addAppletsToBasket({\n        apiHost: this.$store.state.backend,\n        data: form,\n      }).then(() => {\n        if (!this.baskets.includes(appletId)) {\n          this.baskets.push(appletId);\n        }\n      });\n    },\n    buildAppletTree (appletData) {\n      const { items, activities, applet } = appletData;\n      const treeItem = {\n        id: 1,\n        appletId: applet._id.substring(7),\n        name: appletData.applet[\"@id\"],\n        children: [],\n      };\n\n      let index = 2;\n\n      for (const activityId in activities) {\n        const activityItem = {\n          id: index,\n          activityId,\n          name: activities[activityId][\"@id\"],\n          children: [],\n        };\n\n        index += 1;\n        for (const itemId in items) {\n          const values = itemId.split('/');\n\n          if (activityId === values[0]) {\n            const item = {\n              id: index,\n              itemId: values[1],\n              inputType: items[itemId][\"reprolib:terms/inputType\"][0][\"@value\"],\n              name: items[itemId][\"@id\"]\n            };\n\n            index += 1;\n            activityItem.children.push(item);\n          }\n        }\n\n        treeItem.children.push(activityItem);\n      }\n\n      return treeItem;\n    },\n    /*\n     * Change appletTreeData format to basket data \n     */\n    onAppletSelection() {\n      const selectedApplets = {};\n\n      this.selection.forEach(({ id }) => {\n        this.appletsTree.forEach(applet => {\n          applet.children.forEach(activity => {\n            const selectedItem = activity.children.find(item => item.id === id);\n\n            if (selectedItem) {\n              if (!selectedApplets[applet.appletId]) {\n                selectedApplets[applet.appletId] = [];\n              }\n\n              const actIndex = selectedApplets[applet.appletId].findIndex(({ activityId }) => activity.activityId);\n\n              if (actIndex === -1) {\n                const act = {\n                  activityId: activity.activityId,\n                };\n\n                if (activity.children.length === 1) {\n                  act.items = null;\n                } else {\n                  act.items = [];\n                  act.items.push(selectedItem.itemId);\n                }\n                selectedApplets[applet.appletId].push(act);\n              } else if (selectedApplets[applet.appletId][actIndex].items) {\n                selectedApplets[applet.appletId][actIndex].items.push(selectedItem.itemId);\n\n                if (selectedApplets[applet.appletId][actIndex].items.length === activity.children.length) {\n                  selectedApplets[applet.appletId][actIndex].items = null;\n                }\n              }\n            }\n          });\n        });\n      });\n\n      this.selectedApplets = { ...selectedApplets };\n    },\n    onSearchText () {\n\n    }\n  },\n};\n</script>\n"]}]}