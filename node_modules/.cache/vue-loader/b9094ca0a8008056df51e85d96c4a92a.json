{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleTypeCustomDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleTypeCustomDialog.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { Schedule, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleTypeCustomDialog',\r\n\r\n    props:\r\n        {\r\n            dialogProps:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'dialogProps')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().dialogProps\r\n                    }\r\n                },\r\n\r\n            labels:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'labels')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().labels\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: vm => ({\r\n        visible: false,\r\n        original: null,\r\n        copy: null,\r\n        day: null\r\n    }),\r\n\r\n    computed:\r\n        {\r\n            hasData () {\r\n                return !!this.copy\r\n            },\r\n\r\n            aroundDay () {\r\n                return this.day || this.$dayspan.today\r\n            }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            edit (schedule, day) {\r\n                this.original = schedule\r\n                this.copy = schedule.clone()\r\n                this.day = day\r\n                this.visible = true\r\n\r\n                this.$emit('show', this.getEvent('show'))\r\n            },\r\n\r\n            create () {\r\n                this.original = null\r\n                this.copy = new Schedule()\r\n                this.day = null\r\n                this.visible = true\r\n\r\n                this.$emit('show', this.getEvent('show'))\r\n            },\r\n\r\n            save () {\r\n                let ev = this.getEvent('save')\r\n\r\n                this.$emit('save', ev)\r\n\r\n                if (!ev.handled && ev.target && ev.schedule) {\r\n                    ev.target.set(ev.schedule)\r\n                    ev.handled = true\r\n                }\r\n\r\n                this.finish(ev)\r\n            },\r\n\r\n            hide () {\r\n                this.finish(this.getEvent('hide'))\r\n            },\r\n\r\n            cancel () {\r\n                let ev = this.getEvent('cancel')\r\n\r\n                this.$emit('cancel', ev)\r\n                this.finish(ev)\r\n            },\r\n\r\n            finish (ev) {\r\n                if (ev.hide && this.visible) {\r\n                    this.visible = false\r\n                    this.$emit('hide', ev)\r\n                }\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    target: this.original,\r\n                    schedule: this.copy,\r\n                    day: this.day,\r\n                    hide: true,\r\n                    handled: false,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n",{"version":3,"sources":["ScheduleTypeCustomDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ScheduleTypeCustomDialog.vue","sourceRoot":"node_modules/dayspan-vuetify-2/src/components","sourcesContent":["<template>\r\n\r\n    <v-dialog\r\n            v-bind=\"dialogProps\"\r\n            v-model=\"visible\"\r\n            :fullscreen=\"$dayspan.fullscreenDialogs\">\r\n\r\n        <v-card v-if=\"hasData\">\r\n\r\n            <slot name=\"scheduleTypeCustomHeader\" v-bind=\"{original, copy, aroundDay, day}\"></slot>\r\n\r\n            <v-card-text>\r\n\r\n                <slot name=\"scheduleTypeCustomBody\" v-bind=\"{original, copy, aroundDay, day}\">\r\n\r\n                    <ds-schedule-type-custom\r\n                            :schedule=\"copy\"\r\n                            :day=\"aroundDay\"\r\n                    ></ds-schedule-type-custom>\r\n\r\n                </slot>\r\n\r\n            </v-card-text>\r\n\r\n            <v-divider></v-divider>\r\n\r\n            <v-card-actions>\r\n\r\n                <slot name=\"scheduleTypeCustomActions\" v-bind=\"{original, copy, aroundDay, day, cancel, save, labels}\">\r\n\r\n                    <v-spacer></v-spacer>\r\n\r\n                    <v-btn\r\n                            color=\"secondary\"\r\n                            @click.stop=\"cancel\">\r\n                        <span v-html=\"labels.cancel\"></span>\r\n                    </v-btn>\r\n\r\n                    <v-btn\r\n                            color=\"primary\"\r\n                            @click.stop=\"save\">\r\n                        <span v-html=\"labels.save\"></span>\r\n                    </v-btn>\r\n\r\n                </slot>\r\n\r\n            </v-card-actions>\r\n\r\n        </v-card>\r\n\r\n    </v-dialog>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { Schedule, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleTypeCustomDialog',\r\n\r\n    props:\r\n        {\r\n            dialogProps:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'dialogProps')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().dialogProps\r\n                    }\r\n                },\r\n\r\n            labels:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'labels')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().labels\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: vm => ({\r\n        visible: false,\r\n        original: null,\r\n        copy: null,\r\n        day: null\r\n    }),\r\n\r\n    computed:\r\n        {\r\n            hasData () {\r\n                return !!this.copy\r\n            },\r\n\r\n            aroundDay () {\r\n                return this.day || this.$dayspan.today\r\n            }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            edit (schedule, day) {\r\n                this.original = schedule\r\n                this.copy = schedule.clone()\r\n                this.day = day\r\n                this.visible = true\r\n\r\n                this.$emit('show', this.getEvent('show'))\r\n            },\r\n\r\n            create () {\r\n                this.original = null\r\n                this.copy = new Schedule()\r\n                this.day = null\r\n                this.visible = true\r\n\r\n                this.$emit('show', this.getEvent('show'))\r\n            },\r\n\r\n            save () {\r\n                let ev = this.getEvent('save')\r\n\r\n                this.$emit('save', ev)\r\n\r\n                if (!ev.handled && ev.target && ev.schedule) {\r\n                    ev.target.set(ev.schedule)\r\n                    ev.handled = true\r\n                }\r\n\r\n                this.finish(ev)\r\n            },\r\n\r\n            hide () {\r\n                this.finish(this.getEvent('hide'))\r\n            },\r\n\r\n            cancel () {\r\n                let ev = this.getEvent('cancel')\r\n\r\n                this.$emit('cancel', ev)\r\n                this.finish(ev)\r\n            },\r\n\r\n            finish (ev) {\r\n                if (ev.hide && this.visible) {\r\n                    this.visible = false\r\n                    this.$emit('hide', ev)\r\n                }\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    target: this.original,\r\n                    schedule: this.copy,\r\n                    day: this.day,\r\n                    hide: true,\r\n                    handled: false,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>\r\n"]}]}