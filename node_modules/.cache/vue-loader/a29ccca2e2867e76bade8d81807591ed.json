{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleForecast.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleForecast.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { Day, Schedule, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleForecast',\r\n\r\n    props:\r\n        {\r\n            schedule:\r\n                {\r\n                    required: true,\r\n                    type: Schedule\r\n                },\r\n\r\n            day:\r\n                {\r\n                    type: Day\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            canExclude:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().canExclude\r\n                    }\r\n                },\r\n\r\n            hasDescription:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().hasDescription\r\n                    }\r\n                },\r\n\r\n            defaultSize:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().defaultSize\r\n                    }\r\n                },\r\n\r\n            sizeMax:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().sizeMax\r\n                    }\r\n                },\r\n\r\n            labels:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'labels')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().labels\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: vm => ({\r\n        size: vm.defaultSize\r\n    }),\r\n\r\n    computed:\r\n        {\r\n            sizeInput:\r\n                {\r\n                    get () {\r\n                        return this.size\r\n                    },\r\n\r\n                    set (value) {\r\n                        this.size = Math.max(1, Math.min(Math.floor(value), this.sizeMax))\r\n                    }\r\n                },\r\n\r\n            aroundDay () {\r\n                return this.day || this.$dayspan.today\r\n            },\r\n\r\n            forecast () {\r\n                return this.schedule.forecast(this.aroundDay, false, this.size)\r\n                .map(function (spanDayId) {\r\n                    return spanDayId[1]\r\n                })\r\n                .list()\r\n\r\n            },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    watch:\r\n        {\r\n            forecast:\r\n                {\r\n                    handler: 'triggerChange',\r\n                    immediate: true\r\n                }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            triggerChange () {\r\n                this.$emit('change', this.getEvent('change'))\r\n            },\r\n\r\n            exclude (time) {\r\n                var ev = this.getEvent('exclude', {time})\r\n\r\n                if (!ev.handled && ev.schedule) {\r\n                    ev.schedule.setExcluded(ev.time)\r\n                    ev.handled = true\r\n                }\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    schedule: this.schedule,\r\n                    size: this.size,\r\n                    forecast: this.forecast,\r\n                    day: this.day,\r\n                    aroundDay: this.aroundDay,\r\n                    handled: false,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n",{"version":3,"sources":["ScheduleForecast.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"ScheduleForecast.vue","sourceRoot":"node_modules/dayspan-vuetify-2/src/components","sourcesContent":["<template>\r\n    <div>\r\n\r\n        <div class=\"pb-3\" v-if=\"hasDescription\">\r\n\r\n            <span v-html=\"labels.prefix\"></span>\r\n\r\n            <v-text-field\r\n                    type=\"number\"\r\n                    class=\"ds-textfield inline small\"\r\n                    single-line\r\n                    hide-details\r\n                    v-model.number=\"sizeInput\"\r\n            ></v-text-field>\r\n\r\n            <span v-html=\"labels.suffix\"></span>\r\n\r\n        </div>\r\n\r\n        <template v-for=\"time in forecast\">\r\n\r\n            <ds-calendar-event-chip\r\n                    :key=\"time.time\"\r\n                    :day=\"aroundDay\"\r\n                    :time=\"time\"\r\n                    :can-exclude=\"canExclude && !isReadOnly\"\r\n                    @exclude=\"exclude\"\r\n            ></ds-calendar-event-chip>\r\n\r\n        </template>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { Day, Schedule, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleForecast',\r\n\r\n    props:\r\n        {\r\n            schedule:\r\n                {\r\n                    required: true,\r\n                    type: Schedule\r\n                },\r\n\r\n            day:\r\n                {\r\n                    type: Day\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            canExclude:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().canExclude\r\n                    }\r\n                },\r\n\r\n            hasDescription:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().hasDescription\r\n                    }\r\n                },\r\n\r\n            defaultSize:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().defaultSize\r\n                    }\r\n                },\r\n\r\n            sizeMax:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().sizeMax\r\n                    }\r\n                },\r\n\r\n            labels:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'labels')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().labels\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: vm => ({\r\n        size: vm.defaultSize\r\n    }),\r\n\r\n    computed:\r\n        {\r\n            sizeInput:\r\n                {\r\n                    get () {\r\n                        return this.size\r\n                    },\r\n\r\n                    set (value) {\r\n                        this.size = Math.max(1, Math.min(Math.floor(value), this.sizeMax))\r\n                    }\r\n                },\r\n\r\n            aroundDay () {\r\n                return this.day || this.$dayspan.today\r\n            },\r\n\r\n            forecast () {\r\n                return this.schedule.forecast(this.aroundDay, false, this.size)\r\n                .map(function (spanDayId) {\r\n                    return spanDayId[1]\r\n                })\r\n                .list()\r\n\r\n            },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    watch:\r\n        {\r\n            forecast:\r\n                {\r\n                    handler: 'triggerChange',\r\n                    immediate: true\r\n                }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            triggerChange () {\r\n                this.$emit('change', this.getEvent('change'))\r\n            },\r\n\r\n            exclude (time) {\r\n                var ev = this.getEvent('exclude', {time})\r\n\r\n                if (!ev.handled && ev.schedule) {\r\n                    ev.schedule.setExcluded(ev.time)\r\n                    ev.handled = true\r\n                }\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    schedule: this.schedule,\r\n                    size: this.size,\r\n                    forecast: this.forecast,\r\n                    day: this.day,\r\n                    aroundDay: this.aroundDay,\r\n                    handled: false,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>\r\n"]}]}