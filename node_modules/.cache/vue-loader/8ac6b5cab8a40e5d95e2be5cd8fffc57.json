{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/EventDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/EventDialog.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { Calendar, Schedule, Identifier, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsEventDialog',\r\n\r\n    props:\r\n        {\r\n            calendar:\r\n                {\r\n                    type: Calendar\r\n                },\r\n\r\n            dialogProps:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'dialogProps')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().dialogProps\r\n                    }\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                }\r\n        },\r\n\r\n    data: vm => ({\r\n        open: false,\r\n        calendarEvent: null,\r\n        details: null,\r\n        schedule: null,\r\n        day: null\r\n    }),\r\n\r\n    computed:\r\n        {},\r\n\r\n    methods:\r\n        {\r\n            addToday () {\r\n                this.add(this.$dayspan.today)\r\n            },\r\n\r\n            add (day, days) {\r\n                this.addSchedule(day, Schedule.forDay(day, days))\r\n            },\r\n\r\n            addAt (day, hour) {\r\n                this.addSchedule(day, Schedule.forTime(day, hour))\r\n            },\r\n\r\n            addSpan (span) {\r\n                this.addSchedule(span.start, Schedule.forSpan(span))\r\n            },\r\n\r\n            addPlaceholder (placeholder, details) {\r\n                this.addSchedule(placeholder.start, placeholder.schedule, details || placeholder.event.data)\r\n            },\r\n\r\n            addSchedule (day, schedule, details) {\r\n                this.day = day\r\n                this.calendarEvent = null\r\n                this.details = details || this.$dayspan.getDefaultEventDetails()\r\n                this.schedule = schedule\r\n\r\n                this.finishOpen()\r\n            },\r\n\r\n            edit (calendarEvent) {\r\n                this.day = calendarEvent.start\r\n                this.calendarEvent = calendarEvent\r\n                this.details = calendarEvent.event.data || this.$dayspan.getDefaultEventDetails()\r\n                this.schedule = calendarEvent.schedule\r\n\r\n                this.finishOpen()\r\n            },\r\n\r\n            finishOpen () {\r\n                var ev = this.getEvent('open')\r\n\r\n                this.$emit('open', ev)\r\n\r\n                if (ev.open) {\r\n                    this.open = true\r\n                }\r\n            },\r\n\r\n            eventCreate (ev) {\r\n                this.$emit('event-create', ev)\r\n            },\r\n\r\n            eventUpdate (ev) {\r\n                this.$emit('event-update', ev)\r\n            },\r\n\r\n            eventRemove (ev) {\r\n                this.$emit('event-remove', ev)\r\n            },\r\n\r\n            actioned (ev) {\r\n                ev.hide = true\r\n                this.$emit('actioned', ev)\r\n                this.finishClose(ev)\r\n            },\r\n\r\n            cancel (ev) {\r\n                ev.hide = true\r\n                this.$emit('cancel', ev)\r\n                this.finishClose(ev)\r\n            },\r\n\r\n            saved (ev) {\r\n                ev.hide = true\r\n                this.$emit('saved', ev)\r\n                this.finishClose(ev)\r\n            },\r\n\r\n            finishClose (ev) {\r\n                if (ev.hide) {\r\n                    this.open = false\r\n                    this.$emit('close', ev)\r\n                }\r\n\r\n                this.schedule = null\r\n                this.details = null\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    day: this.day,\r\n                    schedule: this.schedule,\r\n                    calendar: this.calendar,\r\n                    calendarEvent: this.calendarEvent,\r\n                    handled: false,\r\n                    open: true,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n",{"version":3,"sources":["EventDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"EventDialog.vue","sourceRoot":"node_modules/dayspan-vuetify-2/src/components","sourcesContent":["<template>\r\n\r\n    <v-dialog\r\n            v-bind=\"dialogProps\"\r\n            v-model=\"open\"\r\n            :fullscreen=\"$dayspan.fullscreenDialogs\">\r\n\r\n        <v-card v-if=\"schedule && details\">\r\n\r\n            <v-card-text>\r\n\r\n                <ds-event\r\n                        v-bind=\"{$scopedSlots}\"\r\n                        :target-details=\"details\"\r\n                        :target-schedule=\"schedule\"\r\n                        :calendar=\"calendar\"\r\n                        :calendar-event=\"calendarEvent\"\r\n                        :day=\"day\"\r\n                        :read-only=\"readOnly\"\r\n                        @saved=\"saved\"\r\n                        @cancel=\"cancel\"\r\n                        @actioned=\"actioned\"\r\n                        @event-create=\"eventCreate\"\r\n                        @event-update=\"eventUpdate\"\r\n                        @event-remove=\"eventRemove\"\r\n                ></ds-event>\r\n\r\n            </v-card-text>\r\n\r\n        </v-card>\r\n\r\n    </v-dialog>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { Calendar, Schedule, Identifier, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsEventDialog',\r\n\r\n    props:\r\n        {\r\n            calendar:\r\n                {\r\n                    type: Calendar\r\n                },\r\n\r\n            dialogProps:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'dialogProps')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().dialogProps\r\n                    }\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                }\r\n        },\r\n\r\n    data: vm => ({\r\n        open: false,\r\n        calendarEvent: null,\r\n        details: null,\r\n        schedule: null,\r\n        day: null\r\n    }),\r\n\r\n    computed:\r\n        {},\r\n\r\n    methods:\r\n        {\r\n            addToday () {\r\n                this.add(this.$dayspan.today)\r\n            },\r\n\r\n            add (day, days) {\r\n                this.addSchedule(day, Schedule.forDay(day, days))\r\n            },\r\n\r\n            addAt (day, hour) {\r\n                this.addSchedule(day, Schedule.forTime(day, hour))\r\n            },\r\n\r\n            addSpan (span) {\r\n                this.addSchedule(span.start, Schedule.forSpan(span))\r\n            },\r\n\r\n            addPlaceholder (placeholder, details) {\r\n                this.addSchedule(placeholder.start, placeholder.schedule, details || placeholder.event.data)\r\n            },\r\n\r\n            addSchedule (day, schedule, details) {\r\n                this.day = day\r\n                this.calendarEvent = null\r\n                this.details = details || this.$dayspan.getDefaultEventDetails()\r\n                this.schedule = schedule\r\n\r\n                this.finishOpen()\r\n            },\r\n\r\n            edit (calendarEvent) {\r\n                this.day = calendarEvent.start\r\n                this.calendarEvent = calendarEvent\r\n                this.details = calendarEvent.event.data || this.$dayspan.getDefaultEventDetails()\r\n                this.schedule = calendarEvent.schedule\r\n\r\n                this.finishOpen()\r\n            },\r\n\r\n            finishOpen () {\r\n                var ev = this.getEvent('open')\r\n\r\n                this.$emit('open', ev)\r\n\r\n                if (ev.open) {\r\n                    this.open = true\r\n                }\r\n            },\r\n\r\n            eventCreate (ev) {\r\n                this.$emit('event-create', ev)\r\n            },\r\n\r\n            eventUpdate (ev) {\r\n                this.$emit('event-update', ev)\r\n            },\r\n\r\n            eventRemove (ev) {\r\n                this.$emit('event-remove', ev)\r\n            },\r\n\r\n            actioned (ev) {\r\n                ev.hide = true\r\n                this.$emit('actioned', ev)\r\n                this.finishClose(ev)\r\n            },\r\n\r\n            cancel (ev) {\r\n                ev.hide = true\r\n                this.$emit('cancel', ev)\r\n                this.finishClose(ev)\r\n            },\r\n\r\n            saved (ev) {\r\n                ev.hide = true\r\n                this.$emit('saved', ev)\r\n                this.finishClose(ev)\r\n            },\r\n\r\n            finishClose (ev) {\r\n                if (ev.hide) {\r\n                    this.open = false\r\n                    this.$emit('close', ev)\r\n                }\r\n\r\n                this.schedule = null\r\n                this.details = null\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    day: this.day,\r\n                    schedule: this.schedule,\r\n                    calendar: this.calendar,\r\n                    calendarEvent: this.calendarEvent,\r\n                    handled: false,\r\n                    open: true,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>\r\n"]}]}