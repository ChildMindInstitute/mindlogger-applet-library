{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleType.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { Day, Schedule, Pattern, Patterns } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleType',\r\n\r\n    props:\r\n        {\r\n            day:\r\n                {\r\n                    required: true,\r\n                    type: Day\r\n                },\r\n\r\n            schedule:\r\n                {\r\n                    required: true,\r\n                    type: Schedule\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            formats:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'formats')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().formats\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: () => ({\r\n        type: ''\r\n    }),\r\n\r\n    watch:\r\n        {\r\n            schedule:\r\n                {\r\n                    handler: 'updateType',\r\n                    immediate: true\r\n                },\r\n\r\n            type: 'applyType'\r\n        },\r\n\r\n    computed:\r\n        {\r\n            hideHint () {\r\n                return this.type !== 'none' && this.type !== 'custom'\r\n            },\r\n\r\n            typeHint () {\r\n                if (this.type === 'none') {\r\n                    return this.day.format(this.formats.date)\r\n                }\r\n\r\n                if (this.type === 'custom') {\r\n                    return this.$dayspan.getScheduleDescription(this.schedule)\r\n                }\r\n\r\n                return ''\r\n            },\r\n\r\n            types () {\r\n                if (!this.day) {\r\n                    return []\r\n                }\r\n\r\n                return Patterns\r\n                .filter((pattern) => pattern.listed)\r\n                .map((pattern) => ({\r\n                    label: pattern.describe(this.day),\r\n                    value: pattern.name\r\n                }))\r\n\r\n            },\r\n\r\n            customIcon () {\r\n                return this.type === 'custom' ? 'edit' : ''\r\n            },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            applyType (newType, oldType) {\r\n                if (this.applying) {\r\n                    if (oldType === 'custom') {\r\n                        this.schedule.end = null\r\n                    }\r\n\r\n                    if (newType) {\r\n                        var pattern = Pattern.withName(newType)\r\n\r\n                        if (pattern) {\r\n                            pattern.apply(this.schedule, this.day)\r\n                        }\r\n                    }\r\n\r\n                    if (newType === 'none') {\r\n                        this.schedule.adjustDefinedSpan()\r\n                    }\r\n                }\r\n\r\n                this.$emit('change', newType)\r\n            },\r\n\r\n            custom () {\r\n                this.$emit('custom', this)\r\n            },\r\n\r\n            updateType () {\r\n                this.applying = false\r\n                this.type = this.determineType()\r\n                this.applying = true\r\n            },\r\n\r\n            determineType () {\r\n                var pattern = Pattern.findMatch(this.schedule)\r\n\r\n                return pattern ? pattern.name : 'custom'\r\n            }\r\n        }\r\n}\r\n",{"version":3,"sources":["ScheduleType.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"ScheduleType.vue","sourceRoot":"node_modules/dayspan-vuetify-2/src/components","sourcesContent":["<template>\r\n\r\n    <v-select single-line solo flat persistent-hint\r\n              :items=\"types\"\r\n              :hint=\"typeHint\"\r\n              :hide-details=\"hideHint\"\r\n              :append-outer-icon=\"customIcon\"\r\n              :disabled=\"isReadOnly\"\r\n              v-model=\"type\"\r\n              item-text=\"label\"\r\n              item-value=\"value\"\r\n              @click:append-outer=\"custom\"\r\n    ></v-select>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { Day, Schedule, Pattern, Patterns } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleType',\r\n\r\n    props:\r\n        {\r\n            day:\r\n                {\r\n                    required: true,\r\n                    type: Day\r\n                },\r\n\r\n            schedule:\r\n                {\r\n                    required: true,\r\n                    type: Schedule\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            formats:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'formats')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().formats\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: () => ({\r\n        type: ''\r\n    }),\r\n\r\n    watch:\r\n        {\r\n            schedule:\r\n                {\r\n                    handler: 'updateType',\r\n                    immediate: true\r\n                },\r\n\r\n            type: 'applyType'\r\n        },\r\n\r\n    computed:\r\n        {\r\n            hideHint () {\r\n                return this.type !== 'none' && this.type !== 'custom'\r\n            },\r\n\r\n            typeHint () {\r\n                if (this.type === 'none') {\r\n                    return this.day.format(this.formats.date)\r\n                }\r\n\r\n                if (this.type === 'custom') {\r\n                    return this.$dayspan.getScheduleDescription(this.schedule)\r\n                }\r\n\r\n                return ''\r\n            },\r\n\r\n            types () {\r\n                if (!this.day) {\r\n                    return []\r\n                }\r\n\r\n                return Patterns\r\n                .filter((pattern) => pattern.listed)\r\n                .map((pattern) => ({\r\n                    label: pattern.describe(this.day),\r\n                    value: pattern.name\r\n                }))\r\n\r\n            },\r\n\r\n            customIcon () {\r\n                return this.type === 'custom' ? 'edit' : ''\r\n            },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            applyType (newType, oldType) {\r\n                if (this.applying) {\r\n                    if (oldType === 'custom') {\r\n                        this.schedule.end = null\r\n                    }\r\n\r\n                    if (newType) {\r\n                        var pattern = Pattern.withName(newType)\r\n\r\n                        if (pattern) {\r\n                            pattern.apply(this.schedule, this.day)\r\n                        }\r\n                    }\r\n\r\n                    if (newType === 'none') {\r\n                        this.schedule.adjustDefinedSpan()\r\n                    }\r\n                }\r\n\r\n                this.$emit('change', newType)\r\n            },\r\n\r\n            custom () {\r\n                this.$emit('custom', this)\r\n            },\r\n\r\n            updateType () {\r\n                this.applying = false\r\n                this.type = this.determineType()\r\n                this.applying = true\r\n            },\r\n\r\n            determineType () {\r\n                var pattern = Pattern.findMatch(this.schedule)\r\n\r\n                return pattern ? pattern.name : 'custom'\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n    .v-input__icon--append-outer {\r\n        color: black;\r\n    }\r\n\r\n</style>\r\n"]}]}