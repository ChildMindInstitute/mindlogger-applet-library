{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/CalendarApp.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/CalendarApp.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n  Constants,\r\n  Sorts,\r\n  Calendar,\r\n  Day,\r\n  Units,\r\n  Weekday,\r\n  Month,\r\n  DaySpan,\r\n  PatternMap,\r\n  Time,\r\n  Op\r\n} from \"dayspan\";\r\n\r\nexport default {\r\n  name: \"dsCalendarApp\",\r\n\r\n  props: {\r\n    events: {\r\n      type: Array\r\n    },\r\n    navDrawer: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    calendar: {\r\n      type: Calendar,\r\n      default() {\r\n        return Calendar.months();\r\n      }\r\n    },\r\n    readOnly: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    types: {\r\n      type: Array,\r\n      default() {\r\n        return this.$dsDefaults().types;\r\n      }\r\n    },\r\n    allowsAddToday: {\r\n      type: Boolean,\r\n      default() {\r\n        return this.$dsDefaults().allowsAddToday;\r\n      }\r\n    },\r\n    formats: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"formats\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().formats;\r\n      }\r\n    },\r\n    labels: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"labels\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().labels;\r\n      }\r\n    },\r\n    styles: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"styles\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().styles;\r\n      }\r\n    },\r\n    optionsDialog: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"optionsDialog\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().optionsDialog;\r\n      }\r\n    },\r\n    promptDialog: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"promptDialog\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().promptDialog;\r\n      }\r\n    }\r\n  },\r\n\r\n  data: vm => ({\r\n    drawer: false,\r\n    optionsVisible: false,\r\n    options: [],\r\n    promptVisible: false,\r\n    promptQuestion: \"\",\r\n    promptCallback: null\r\n  }),\r\n\r\n  watch: {\r\n    navDrawer: function(val) {\r\n      this.drawer = val;\r\n    },\r\n    events: \"applyEvents\",\r\n    calendar: \"applyEvents\"\r\n  },\r\n\r\n  computed: {\r\n    currentType: {\r\n      get() {\r\n        return (\r\n          this.types.find(\r\n            type =>\r\n              type.type === this.calendar.type &&\r\n              type.size === this.calendar.size\r\n          ) || this.types[0]\r\n        );\r\n      },\r\n      set(type) {\r\n        this.rebuild(undefined, true, type);\r\n      }\r\n    },\r\n\r\n    summary() {\r\n      let small = this.$vuetify.breakpoint.xs;\r\n\r\n      if (small) {\r\n        return this.calendar.start.format(this.formats.xs);\r\n      }\r\n\r\n      let large = this.$vuetify.breakpoint.mdAndUp;\r\n\r\n      return this.calendar.summary(false, !large, false, !large);\r\n    },\r\n\r\n    todayDate() {\r\n      return this.$dayspan.today.format(this.formats.today);\r\n    },\r\n\r\n    nextLabel() {\r\n      return this.labels.next(this.currentType);\r\n    },\r\n\r\n    prevLabel() {\r\n      return this.labels.prev(this.currentType);\r\n    },\r\n\r\n    toolbarStyle() {\r\n      let large = this.$vuetify.breakpoint.lgAndUp;\r\n\r\n      return large ? this.styles.toolbar.large : this.styles.toolbar.small;\r\n    },\r\n\r\n    hasCreatePopover() {\r\n      return !!this.$scopedSlots.eventCreatePopover;\r\n    },\r\n\r\n    canAddDay() {\r\n      return (\r\n        this.$dayspan.features.addDay &&\r\n        !this.readOnly &&\r\n        !this.$dayspan.readOnly\r\n      );\r\n    },\r\n\r\n    canAddTime() {\r\n      return (\r\n        this.$dayspan.features.addTime &&\r\n        !this.readOnly &&\r\n        !this.$dayspan.readOnly\r\n      );\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    if (!this.$dayspan.promptOpen) {\r\n      this.$dayspan.promptOpen = (question, callback) => {\r\n        this.promptVisible = false;\r\n        this.promptQuestion = question;\r\n        this.promptCallback = callback;\r\n        this.promptVisible = true;\r\n      };\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    setState(state) {\r\n      state.eventSorter = state.listTimes\r\n        ? Sorts.List([Sorts.FullDay, Sorts.Start])\r\n        : Sorts.Start;\r\n\r\n      this.calendar.set(state);\r\n\r\n      this.triggerChange();\r\n    },\r\n\r\n    applyEvents() {\r\n      if (this.events) {\r\n        this.calendar.removeEvents();\r\n        this.calendar.addEvents(this.events);\r\n      }\r\n    },\r\n\r\n    isType(type, aroundDay) {\r\n      let cal = this.calendar;\r\n\r\n      return (\r\n        cal.type === type.type &&\r\n        cal.size === type.size &&\r\n        (!aroundDay || cal.span.matchesDay(aroundDay))\r\n      );\r\n    },\r\n\r\n    rebuild(aroundDay, force, forceType) {\r\n      let type = forceType || this.currentType || this.types[2];\r\n\r\n      if (this.isType(type, aroundDay) && !force) {\r\n        return;\r\n      }\r\n\r\n      let input = {\r\n        type: type.type,\r\n        size: type.size,\r\n        around: aroundDay,\r\n        eventsOutside: true,\r\n        preferToday: false,\r\n        listTimes: type.listTimes,\r\n        updateRows: type.updateRows,\r\n        updateColumns: type.listTimes,\r\n        fill: !type.listTimes,\r\n        otherwiseFocus: type.focus,\r\n        repeatCovers: type.repeat\r\n      };\r\n\r\n      this.setState(input);\r\n    },\r\n\r\n    next() {\r\n      this.calendar.unselect().next();\r\n\r\n      this.triggerChange();\r\n    },\r\n\r\n    prev() {\r\n      this.calendar.unselect().prev();\r\n\r\n      this.triggerChange();\r\n    },\r\n\r\n    setToday() {\r\n      this.rebuild(this.$dayspan.today);\r\n    },\r\n\r\n    viewDay(day) {\r\n      this.rebuild(day, false, this.types[0]);\r\n    },\r\n\r\n    edit(calendarEvent) {\r\n      let eventDialog = this.$refs.eventDialog;\r\n\r\n      eventDialog.edit(calendarEvent);\r\n    },\r\n\r\n    editPlaceholder(createEdit) {\r\n      let placeholder = createEdit.calendarEvent;\r\n      let details = createEdit.details;\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n\r\n      eventDialog.addPlaceholder(placeholder, details);\r\n      eventDialog.$once(\"close\", calendar.clearPlaceholder);\r\n    },\r\n\r\n    add(day) {\r\n      if (!this.canAddDay) {\r\n        return;\r\n      }\r\n\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n      let useDialog = !this.hasCreatePopover;\r\n\r\n      calendar.addPlaceholder(day, true, useDialog);\r\n\r\n      if (useDialog) {\r\n        eventDialog.add(day);\r\n        eventDialog.$once(\"close\", calendar.clearPlaceholder);\r\n      }\r\n    },\r\n\r\n    addAt(dayHour) {\r\n      if (!this.canAddTime) {\r\n        return;\r\n      }\r\n\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n      let useDialog = !this.hasCreatePopover;\r\n      let at = dayHour.day.withHour(dayHour.hour);\r\n\r\n      calendar.addPlaceholder(at, false, useDialog);\r\n\r\n      if (useDialog) {\r\n        eventDialog.addAt(dayHour.day, dayHour.hour);\r\n        eventDialog.$once(\"close\", calendar.clearPlaceholder);\r\n      }\r\n    },\r\n\r\n    addToday() {\r\n      if (!this.canAddDay) {\r\n        return;\r\n      }\r\n\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n      let useDialog = !this.hasCreatePopover || !calendar;\r\n\r\n      let day = this.$dayspan.today;\r\n\r\n      if (!this.calendar.filled.matchesDay(day)) {\r\n        let first = this.calendar.days[0];\r\n        let last = this.calendar.days[this.calendar.days.length - 1];\r\n        let firstDistance = Math.abs(first.currentOffset);\r\n        let lastDistance = Math.abs(last.currentOffset);\r\n\r\n        day = firstDistance < lastDistance ? first : last;\r\n      }\r\n\r\n      calendar && calendar.addPlaceholder(day, true, useDialog);\r\n\r\n      if (useDialog) {\r\n        eventDialog.add(day);\r\n\r\n        calendar && eventDialog.$once(\"close\", calendar.clearPlaceholder);\r\n      }\r\n    },\r\n\r\n    handleAdd(addEvent) {\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n\r\n      addEvent.handled = true;\r\n\r\n      if (!this.hasCreatePopover) {\r\n        if (addEvent.placeholder.fullDay) {\r\n          eventDialog.add(addEvent.span.start, addEvent.span.days(Op.UP));\r\n        } else {\r\n          eventDialog.addSpan(addEvent.span);\r\n        }\r\n\r\n        eventDialog.$once(\"close\", addEvent.clearPlaceholder);\r\n      } else {\r\n        calendar.placeholderForCreate = true;\r\n      }\r\n    },\r\n\r\n    handleMove(moveEvent) {\r\n      let calendarEvent = moveEvent.calendarEvent;\r\n      let target = moveEvent.target;\r\n      let targetStart = target.start;\r\n      let sourceStart = calendarEvent.time.start;\r\n      let schedule = calendarEvent.schedule;\r\n      let options = [];\r\n\r\n      moveEvent.handled = true;\r\n\r\n      let callbacks = {\r\n        cancel: () => {\r\n          moveEvent.clearPlaceholder();\r\n        },\r\n        single: () => {\r\n          calendarEvent.move(targetStart);\r\n          this.eventsRefresh();\r\n          moveEvent.clearPlaceholder();\r\n\r\n          this.$emit(\"event-update\", calendarEvent.event);\r\n        },\r\n        instance: () => {\r\n          calendarEvent.move(targetStart);\r\n          this.eventsRefresh();\r\n          moveEvent.clearPlaceholder();\r\n\r\n          this.$emit(\"event-update\", calendarEvent.event);\r\n        },\r\n        duplicate: () => {\r\n          schedule.setExcluded(targetStart, false);\r\n          this.eventsRefresh();\r\n          moveEvent.clearPlaceholder();\r\n\r\n          this.$emit(\"event-update\", calendarEvent.event);\r\n        },\r\n        all: () => {\r\n          schedule.moveTime(sourceStart.asTime(), targetStart.asTime());\r\n          this.eventsRefresh();\r\n          moveEvent.clearPlaceholder();\r\n\r\n          this.$emit(\"event-update\", calendarEvent.event);\r\n        }\r\n      };\r\n\r\n      options.push({\r\n        text: this.labels.moveCancel,\r\n        callback: callbacks.cancel\r\n      });\r\n\r\n      if (schedule.isSingleEvent()) {\r\n        options.push({\r\n          text: this.labels.moveSingleEvent,\r\n          callback: callbacks.single\r\n        });\r\n\r\n        if (this.$dayspan.features.moveDuplicate) {\r\n          options.push({\r\n            text: this.labels.moveDuplicate,\r\n            callback: callbacks.duplicate\r\n          });\r\n        }\r\n      } else {\r\n        if (this.$dayspan.features.moveInstance) {\r\n          options.push({\r\n            text: this.labels.moveOccurrence,\r\n            callback: callbacks.instance\r\n          });\r\n        }\r\n\r\n        if (this.$dayspan.features.moveDuplicate) {\r\n          options.push({\r\n            text: this.labels.moveDuplicate,\r\n            callback: callbacks.duplicate\r\n          });\r\n        }\r\n\r\n        if (\r\n          this.$dayspan.features.moveAll &&\r\n          !schedule.isFullDay() &&\r\n          targetStart.sameDay(sourceStart)\r\n        ) {\r\n          options.push({\r\n            text: this.labels.moveAll,\r\n            callback: callbacks.all\r\n          });\r\n        }\r\n      }\r\n\r\n      this.options = options;\r\n      this.optionsVisible = true;\r\n    },\r\n\r\n    chooseOption(option) {\r\n      if (option) {\r\n        option.callback();\r\n      }\r\n\r\n      this.optionsVisible = false;\r\n    },\r\n\r\n    choosePrompt(yes) {\r\n      this.promptCallback(yes);\r\n      this.promptVisible = false;\r\n    },\r\n\r\n    eventFinish(ev) {\r\n      this.triggerChange();\r\n    },\r\n\r\n    eventsRefresh() {\r\n      this.calendar.refreshEvents();\r\n\r\n      this.triggerChange();\r\n    },\r\n\r\n    triggerChange() {\r\n      this.$emit(\"change\", {\r\n        calendar: this.calendar\r\n      });\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["CalendarApp.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"CalendarApp.vue","sourceRoot":"node_modules/dayspan-vuetify-2/src/components","sourcesContent":["<template>\r\n  <div class=\"ds-expand ds-calendar-app\">\r\n    <v-navigation-drawer fixed app v-model=\"drawer\" :clipped=\"$vuetify.breakpoint.lgAndUp\">\r\n      <slot name=\"drawerTop\"></slot>\r\n\r\n      <slot name=\"drawerPicker\" :calendar=\"calendar\" :picked=\"rebuild\">\r\n        <div class=\"pa-3\" v-if=\"calendar\">\r\n          <ds-day-picker :span=\"calendar.span\" @picked=\"rebuild\"></ds-day-picker>\r\n        </div>\r\n      </slot>\r\n\r\n      <slot name=\"drawerBottom\"></slot>\r\n    </v-navigation-drawer>\r\n\r\n    <v-app-bar\r\n      app\r\n      flat\r\n      fixed\r\n      class=\"ds-app-calendar-toolbar\"\r\n      color=\"white\"\r\n      :clipped-left=\"$vuetify.breakpoint.lgAndUp\"\r\n    >\r\n      <v-toolbar-title class=\"ml-0\" :style=\"toolbarStyle\">\r\n        <!--      <v-toolbar-side-icon @click.stop=\"drawer = !drawer\"></v-toolbar-side-icon>-->\r\n        <slot name=\"drawerButton\">\r\n          <v-btn fab small icon @click.stop=\"drawer = !drawer\">\r\n            <v-icon>mdi-menu</v-icon>\r\n          </v-btn>\r\n        </slot>\r\n        <span class=\"hidden-sm-and-down\">\r\n          <slot name=\"title\" :calendar=\"calendar\"></slot>\r\n        </span>\r\n      </v-toolbar-title>\r\n\r\n      <slot name=\"today\" v-bind=\"{setToday, todayDate, calendar}\">\r\n        <v-tooltip bottom>\r\n          <template v-slot:activator=\"{ on }\">\r\n            <v-btn\r\n              v-on=\"on\"\r\n              class=\"ds-skinny-button\"\r\n              depressed\r\n              :icon=\"$vuetify.breakpoint.smAndDown\"\r\n              @click=\"setToday\"\r\n            >\r\n              <span v-if=\"$vuetify.breakpoint.mdAndUp\">{{ labels.today }}</span>\r\n              <v-icon v-else>{{ labels.todayIcon }}</v-icon>\r\n            </v-btn>\r\n          </template>\r\n          <span>{{ todayDate }}</span>\r\n        </v-tooltip>\r\n      </slot>\r\n\r\n      <slot name=\"prev\" v-bind=\"{prev, prevLabel, calendar}\">\r\n        <v-tooltip bottom>\r\n          <template v-slot:activator=\"{ on }\">\r\n            <v-btn\r\n              v-on=\"on\"\r\n              icon\r\n              depressed\r\n              class=\"ds-light-forecolor ds-skinny-button\"\r\n              @click=\"prev\"\r\n            >\r\n              <v-icon>keyboard_arrow_left</v-icon>\r\n            </v-btn>\r\n          </template>\r\n          <span>{{ prevLabel }}</span>\r\n        </v-tooltip>\r\n      </slot>\r\n\r\n      <slot name=\"next\" v-bind=\"{next, nextLabel, calendar}\">\r\n        <v-tooltip bottom>\r\n          <template v-slot:activator=\"{ on }\">\r\n            <v-btn\r\n              v-on=\"on\"\r\n              icon\r\n              depressed\r\n              class=\"ds-light-forecolor ds-skinny-button\"\r\n              @click=\"next\"\r\n            >\r\n              <v-icon>keyboard_arrow_right</v-icon>\r\n            </v-btn>\r\n          </template>\r\n          <span>{{ nextLabel }}</span>\r\n        </v-tooltip>\r\n      </slot>\r\n\r\n      <slot name=\"summary\" v-bind=\"{summary, calendar}\">\r\n        <h1 class=\"title ds-light-forecolor\">{{ summary }}</h1>\r\n      </slot>\r\n\r\n      <v-spacer></v-spacer>\r\n\r\n      <slot name=\"view\" v-bind=\"{currentType, types}\">\r\n        <v-menu>\r\n          <template v-slot:activator=\"{ on }\">\r\n            <v-btn text v-on=\"on\">\r\n              {{ currentType.label }}\r\n              <v-icon>arrow_drop_down</v-icon>\r\n            </v-btn>\r\n          </template>\r\n          <v-list>\r\n            <v-list-item v-for=\"type in types\" :key=\"type.id\" @click=\"currentType = type\">\r\n              <v-list-item-content>\r\n                <v-list-item-title>{{ type.label }}</v-list-item-title>\r\n              </v-list-item-content>\r\n              <v-list-item-action>{{ type.shortcut }}</v-list-item-action>\r\n            </v-list-item>\r\n          </v-list>\r\n        </v-menu>\r\n      </slot>\r\n\r\n      <slot name=\"menuRight\"></slot>\r\n    </v-app-bar>\r\n    <v-content class=\"ds-expand\">\r\n      <v-container fluid fill-height class=\"ds-calendar-container\">\r\n        <ds-gestures @swipeleft=\"next\" @swiperight=\"prev\">\r\n          <div v-if=\"currentType.schedule\" class=\"ds-expand\">\r\n            <slot\r\n              name=\"calendarAppAgenda\"\r\n              v-bind=\"{$scopedSlots, $listeners, calendar, add, edit, viewDay}\"\r\n            >\r\n              <ds-agenda\r\n                v-bind=\"{$scopedSlots}\"\r\n                v-on=\"$listeners\"\r\n                :read-only=\"readOnly\"\r\n                :calendar=\"calendar\"\r\n                @add=\"add\"\r\n                @edit=\"edit\"\r\n                @view-day=\"viewDay\"\r\n              ></ds-agenda>\r\n            </slot>\r\n          </div>\r\n\r\n          <div v-else class=\"ds-expand\">\r\n            <slot\r\n              name=\"calendarAppCalendar\"\r\n              v-bind=\"{$scopedSlots, $listeners, calendar, add, addAt, edit, viewDay, handleAdd, handleMove}\"\r\n            >\r\n              <ds-calendar\r\n                ref=\"calendar\"\r\n                v-bind=\"{$scopedSlots}\"\r\n                v-on=\"$listeners\"\r\n                :calendar=\"calendar\"\r\n                :read-only=\"readOnly\"\r\n                @add=\"add\"\r\n                @add-at=\"addAt\"\r\n                @edit=\"edit\"\r\n                @view-day=\"viewDay\"\r\n                @added=\"handleAdd\"\r\n                @moved=\"handleMove\"\r\n              ></ds-calendar>\r\n            </slot>\r\n          </div>\r\n        </ds-gestures>\r\n\r\n        <slot\r\n          name=\"calendarAppEventDialog\"\r\n          v-bind=\"{$scopedSlots, $listeners, calendar, eventFinish}\"\r\n        >\r\n          <ds-event-dialog\r\n            ref=\"eventDialog\"\r\n            v-bind=\"{$scopedSlots}\"\r\n            v-on=\"$listeners\"\r\n            :calendar=\"calendar\"\r\n            :read-only=\"readOnly\"\r\n            @saved=\"eventFinish\"\r\n            @actioned=\"eventFinish\"\r\n          ></ds-event-dialog>\r\n        </slot>\r\n\r\n        <slot\r\n          name=\"calendarAppOptions\"\r\n          v-bind=\"{optionsVisible, optionsDialog, options, chooseOption}\"\r\n        >\r\n          <v-dialog\r\n            ref=\"optionsDialog\"\r\n            v-model=\"optionsVisible\"\r\n            v-bind=\"optionsDialog\"\r\n            :fullscreen=\"$dayspan.fullscreenDialogs\"\r\n          >\r\n            <v-list>\r\n              <template v-for=\"option in options\">\r\n                <v-list-item :key=\"option.text\" @click=\"chooseOption( option )\">{{ option.text }}</v-list-item>\r\n              </template>\r\n            </v-list>\r\n          </v-dialog>\r\n        </slot>\r\n\r\n        <slot\r\n          name=\"calendarAppPrompt\"\r\n          v-bind=\"{promptVisible, promptDialog, promptQuestion, choosePrompt}\"\r\n        >\r\n          <v-dialog ref=\"promptDialog\" v-model=\"promptVisible\" v-bind=\"promptDialog\">\r\n            <v-card>\r\n              <v-card-title>{{ promptQuestion }}</v-card-title>\r\n              <v-card-actions>\r\n                <v-btn color=\"primary\" text @click=\"choosePrompt( true )\">{{ labels.promptConfirm }}</v-btn>\r\n                <v-spacer></v-spacer>\r\n                <v-btn\r\n                  color=\"secondary\"\r\n                  text\r\n                  @click=\"choosePrompt( false )\"\r\n                >{{ labels.promptCancel }}</v-btn>\r\n              </v-card-actions>\r\n            </v-card>\r\n          </v-dialog>\r\n        </slot>\r\n\r\n        <slot name=\"calendarAppAdd\" v-bind=\"{allowsAddToday, addToday}\">\r\n          <v-fab-transition v-if=\"!readOnly\">\r\n            <v-btn\r\n              class=\"ds-add-event-today\"\r\n              color=\"primary\"\r\n              fixed\r\n              bottom\r\n              right\r\n              fab\r\n              v-model=\"allowsAddToday\"\r\n              @click=\"addToday\"\r\n            >\r\n              <v-icon>add</v-icon>\r\n            </v-btn>\r\n          </v-fab-transition>\r\n        </slot>\r\n\r\n        <slot name=\"containerInside\" v-bind=\"{events, calendar}\"></slot>\r\n      </v-container>\r\n    </v-content>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  Constants,\r\n  Sorts,\r\n  Calendar,\r\n  Day,\r\n  Units,\r\n  Weekday,\r\n  Month,\r\n  DaySpan,\r\n  PatternMap,\r\n  Time,\r\n  Op\r\n} from \"dayspan\";\r\n\r\nexport default {\r\n  name: \"dsCalendarApp\",\r\n\r\n  props: {\r\n    events: {\r\n      type: Array\r\n    },\r\n    navDrawer: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    calendar: {\r\n      type: Calendar,\r\n      default() {\r\n        return Calendar.months();\r\n      }\r\n    },\r\n    readOnly: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    types: {\r\n      type: Array,\r\n      default() {\r\n        return this.$dsDefaults().types;\r\n      }\r\n    },\r\n    allowsAddToday: {\r\n      type: Boolean,\r\n      default() {\r\n        return this.$dsDefaults().allowsAddToday;\r\n      }\r\n    },\r\n    formats: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"formats\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().formats;\r\n      }\r\n    },\r\n    labels: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"labels\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().labels;\r\n      }\r\n    },\r\n    styles: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"styles\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().styles;\r\n      }\r\n    },\r\n    optionsDialog: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"optionsDialog\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().optionsDialog;\r\n      }\r\n    },\r\n    promptDialog: {\r\n      validate(x) {\r\n        return this.$dsValidate(x, \"promptDialog\");\r\n      },\r\n      default() {\r\n        return this.$dsDefaults().promptDialog;\r\n      }\r\n    }\r\n  },\r\n\r\n  data: vm => ({\r\n    drawer: false,\r\n    optionsVisible: false,\r\n    options: [],\r\n    promptVisible: false,\r\n    promptQuestion: \"\",\r\n    promptCallback: null\r\n  }),\r\n\r\n  watch: {\r\n    navDrawer: function(val) {\r\n      this.drawer = val;\r\n    },\r\n    events: \"applyEvents\",\r\n    calendar: \"applyEvents\"\r\n  },\r\n\r\n  computed: {\r\n    currentType: {\r\n      get() {\r\n        return (\r\n          this.types.find(\r\n            type =>\r\n              type.type === this.calendar.type &&\r\n              type.size === this.calendar.size\r\n          ) || this.types[0]\r\n        );\r\n      },\r\n      set(type) {\r\n        this.rebuild(undefined, true, type);\r\n      }\r\n    },\r\n\r\n    summary() {\r\n      let small = this.$vuetify.breakpoint.xs;\r\n\r\n      if (small) {\r\n        return this.calendar.start.format(this.formats.xs);\r\n      }\r\n\r\n      let large = this.$vuetify.breakpoint.mdAndUp;\r\n\r\n      return this.calendar.summary(false, !large, false, !large);\r\n    },\r\n\r\n    todayDate() {\r\n      return this.$dayspan.today.format(this.formats.today);\r\n    },\r\n\r\n    nextLabel() {\r\n      return this.labels.next(this.currentType);\r\n    },\r\n\r\n    prevLabel() {\r\n      return this.labels.prev(this.currentType);\r\n    },\r\n\r\n    toolbarStyle() {\r\n      let large = this.$vuetify.breakpoint.lgAndUp;\r\n\r\n      return large ? this.styles.toolbar.large : this.styles.toolbar.small;\r\n    },\r\n\r\n    hasCreatePopover() {\r\n      return !!this.$scopedSlots.eventCreatePopover;\r\n    },\r\n\r\n    canAddDay() {\r\n      return (\r\n        this.$dayspan.features.addDay &&\r\n        !this.readOnly &&\r\n        !this.$dayspan.readOnly\r\n      );\r\n    },\r\n\r\n    canAddTime() {\r\n      return (\r\n        this.$dayspan.features.addTime &&\r\n        !this.readOnly &&\r\n        !this.$dayspan.readOnly\r\n      );\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    if (!this.$dayspan.promptOpen) {\r\n      this.$dayspan.promptOpen = (question, callback) => {\r\n        this.promptVisible = false;\r\n        this.promptQuestion = question;\r\n        this.promptCallback = callback;\r\n        this.promptVisible = true;\r\n      };\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    setState(state) {\r\n      state.eventSorter = state.listTimes\r\n        ? Sorts.List([Sorts.FullDay, Sorts.Start])\r\n        : Sorts.Start;\r\n\r\n      this.calendar.set(state);\r\n\r\n      this.triggerChange();\r\n    },\r\n\r\n    applyEvents() {\r\n      if (this.events) {\r\n        this.calendar.removeEvents();\r\n        this.calendar.addEvents(this.events);\r\n      }\r\n    },\r\n\r\n    isType(type, aroundDay) {\r\n      let cal = this.calendar;\r\n\r\n      return (\r\n        cal.type === type.type &&\r\n        cal.size === type.size &&\r\n        (!aroundDay || cal.span.matchesDay(aroundDay))\r\n      );\r\n    },\r\n\r\n    rebuild(aroundDay, force, forceType) {\r\n      let type = forceType || this.currentType || this.types[2];\r\n\r\n      if (this.isType(type, aroundDay) && !force) {\r\n        return;\r\n      }\r\n\r\n      let input = {\r\n        type: type.type,\r\n        size: type.size,\r\n        around: aroundDay,\r\n        eventsOutside: true,\r\n        preferToday: false,\r\n        listTimes: type.listTimes,\r\n        updateRows: type.updateRows,\r\n        updateColumns: type.listTimes,\r\n        fill: !type.listTimes,\r\n        otherwiseFocus: type.focus,\r\n        repeatCovers: type.repeat\r\n      };\r\n\r\n      this.setState(input);\r\n    },\r\n\r\n    next() {\r\n      this.calendar.unselect().next();\r\n\r\n      this.triggerChange();\r\n    },\r\n\r\n    prev() {\r\n      this.calendar.unselect().prev();\r\n\r\n      this.triggerChange();\r\n    },\r\n\r\n    setToday() {\r\n      this.rebuild(this.$dayspan.today);\r\n    },\r\n\r\n    viewDay(day) {\r\n      this.rebuild(day, false, this.types[0]);\r\n    },\r\n\r\n    edit(calendarEvent) {\r\n      let eventDialog = this.$refs.eventDialog;\r\n\r\n      eventDialog.edit(calendarEvent);\r\n    },\r\n\r\n    editPlaceholder(createEdit) {\r\n      let placeholder = createEdit.calendarEvent;\r\n      let details = createEdit.details;\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n\r\n      eventDialog.addPlaceholder(placeholder, details);\r\n      eventDialog.$once(\"close\", calendar.clearPlaceholder);\r\n    },\r\n\r\n    add(day) {\r\n      if (!this.canAddDay) {\r\n        return;\r\n      }\r\n\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n      let useDialog = !this.hasCreatePopover;\r\n\r\n      calendar.addPlaceholder(day, true, useDialog);\r\n\r\n      if (useDialog) {\r\n        eventDialog.add(day);\r\n        eventDialog.$once(\"close\", calendar.clearPlaceholder);\r\n      }\r\n    },\r\n\r\n    addAt(dayHour) {\r\n      if (!this.canAddTime) {\r\n        return;\r\n      }\r\n\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n      let useDialog = !this.hasCreatePopover;\r\n      let at = dayHour.day.withHour(dayHour.hour);\r\n\r\n      calendar.addPlaceholder(at, false, useDialog);\r\n\r\n      if (useDialog) {\r\n        eventDialog.addAt(dayHour.day, dayHour.hour);\r\n        eventDialog.$once(\"close\", calendar.clearPlaceholder);\r\n      }\r\n    },\r\n\r\n    addToday() {\r\n      if (!this.canAddDay) {\r\n        return;\r\n      }\r\n\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n      let useDialog = !this.hasCreatePopover || !calendar;\r\n\r\n      let day = this.$dayspan.today;\r\n\r\n      if (!this.calendar.filled.matchesDay(day)) {\r\n        let first = this.calendar.days[0];\r\n        let last = this.calendar.days[this.calendar.days.length - 1];\r\n        let firstDistance = Math.abs(first.currentOffset);\r\n        let lastDistance = Math.abs(last.currentOffset);\r\n\r\n        day = firstDistance < lastDistance ? first : last;\r\n      }\r\n\r\n      calendar && calendar.addPlaceholder(day, true, useDialog);\r\n\r\n      if (useDialog) {\r\n        eventDialog.add(day);\r\n\r\n        calendar && eventDialog.$once(\"close\", calendar.clearPlaceholder);\r\n      }\r\n    },\r\n\r\n    handleAdd(addEvent) {\r\n      let eventDialog = this.$refs.eventDialog;\r\n      let calendar = this.$refs.calendar;\r\n\r\n      addEvent.handled = true;\r\n\r\n      if (!this.hasCreatePopover) {\r\n        if (addEvent.placeholder.fullDay) {\r\n          eventDialog.add(addEvent.span.start, addEvent.span.days(Op.UP));\r\n        } else {\r\n          eventDialog.addSpan(addEvent.span);\r\n        }\r\n\r\n        eventDialog.$once(\"close\", addEvent.clearPlaceholder);\r\n      } else {\r\n        calendar.placeholderForCreate = true;\r\n      }\r\n    },\r\n\r\n    handleMove(moveEvent) {\r\n      let calendarEvent = moveEvent.calendarEvent;\r\n      let target = moveEvent.target;\r\n      let targetStart = target.start;\r\n      let sourceStart = calendarEvent.time.start;\r\n      let schedule = calendarEvent.schedule;\r\n      let options = [];\r\n\r\n      moveEvent.handled = true;\r\n\r\n      let callbacks = {\r\n        cancel: () => {\r\n          moveEvent.clearPlaceholder();\r\n        },\r\n        single: () => {\r\n          calendarEvent.move(targetStart);\r\n          this.eventsRefresh();\r\n          moveEvent.clearPlaceholder();\r\n\r\n          this.$emit(\"event-update\", calendarEvent.event);\r\n        },\r\n        instance: () => {\r\n          calendarEvent.move(targetStart);\r\n          this.eventsRefresh();\r\n          moveEvent.clearPlaceholder();\r\n\r\n          this.$emit(\"event-update\", calendarEvent.event);\r\n        },\r\n        duplicate: () => {\r\n          schedule.setExcluded(targetStart, false);\r\n          this.eventsRefresh();\r\n          moveEvent.clearPlaceholder();\r\n\r\n          this.$emit(\"event-update\", calendarEvent.event);\r\n        },\r\n        all: () => {\r\n          schedule.moveTime(sourceStart.asTime(), targetStart.asTime());\r\n          this.eventsRefresh();\r\n          moveEvent.clearPlaceholder();\r\n\r\n          this.$emit(\"event-update\", calendarEvent.event);\r\n        }\r\n      };\r\n\r\n      options.push({\r\n        text: this.labels.moveCancel,\r\n        callback: callbacks.cancel\r\n      });\r\n\r\n      if (schedule.isSingleEvent()) {\r\n        options.push({\r\n          text: this.labels.moveSingleEvent,\r\n          callback: callbacks.single\r\n        });\r\n\r\n        if (this.$dayspan.features.moveDuplicate) {\r\n          options.push({\r\n            text: this.labels.moveDuplicate,\r\n            callback: callbacks.duplicate\r\n          });\r\n        }\r\n      } else {\r\n        if (this.$dayspan.features.moveInstance) {\r\n          options.push({\r\n            text: this.labels.moveOccurrence,\r\n            callback: callbacks.instance\r\n          });\r\n        }\r\n\r\n        if (this.$dayspan.features.moveDuplicate) {\r\n          options.push({\r\n            text: this.labels.moveDuplicate,\r\n            callback: callbacks.duplicate\r\n          });\r\n        }\r\n\r\n        if (\r\n          this.$dayspan.features.moveAll &&\r\n          !schedule.isFullDay() &&\r\n          targetStart.sameDay(sourceStart)\r\n        ) {\r\n          options.push({\r\n            text: this.labels.moveAll,\r\n            callback: callbacks.all\r\n          });\r\n        }\r\n      }\r\n\r\n      this.options = options;\r\n      this.optionsVisible = true;\r\n    },\r\n\r\n    chooseOption(option) {\r\n      if (option) {\r\n        option.callback();\r\n      }\r\n\r\n      this.optionsVisible = false;\r\n    },\r\n\r\n    choosePrompt(yes) {\r\n      this.promptCallback(yes);\r\n      this.promptVisible = false;\r\n    },\r\n\r\n    eventFinish(ev) {\r\n      this.triggerChange();\r\n    },\r\n\r\n    eventsRefresh() {\r\n      this.calendar.refreshEvents();\r\n\r\n      this.triggerChange();\r\n    },\r\n\r\n    triggerChange() {\r\n      this.$emit(\"change\", {\r\n        calendar: this.calendar\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.ds-app-calendar-toolbar {\r\n  .v-toolbar__content {\r\n    border-bottom: 1px solid rgb(224, 224, 224);\r\n  }\r\n}\r\n\r\n.ds-skinny-button {\r\n  margin-left: 2px !important;\r\n  margin-right: 2px !important;\r\n}\r\n\r\n.ds-expand {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.ds-calendar-container {\r\n  padding: 0px !important;\r\n  position: relative;\r\n}\r\n\r\n.v-btn--floating.ds-add-event-today {\r\n  .v-icon {\r\n    width: 24px;\r\n    height: 24px;\r\n  }\r\n}\r\n</style>\r\n"]}]}