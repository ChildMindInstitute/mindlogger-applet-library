{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/services/Encryption/encryption.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/services/Encryption/encryption.vue","mtime":1617355018000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport crypto from 'crypto'\nimport config from '../../config'\n\nconst primeLength = 1024;\nconst base = [2];\n\nconst getPrivateKey = ({ appletPassword, accountId }) => {\n    const key1 = crypto.createHash('sha512').update(appletPassword).digest();\n    const key2 = crypto.createHash('sha512').update(accountId).digest();\n\n    return key1 + key2;\n}\n\nconst getAppletEncryptionInfo = ({ appletPassword, accountId, prime, baseNumber }) => {\n    const key = crypto.createDiffieHellman(\n        Buffer.from(prime ? prime : config.primes[Math.floor(Math.random() * 10)]),\n        Buffer.from(baseNumber ? baseNumber : base)\n    );\n\n    key.setPrivateKey(Buffer.from(getPrivateKey({\n        appletPassword,\n        accountId\n    })));\n    key.generateKeys();\n\n    return key;\n}\n\nconst getAESKey = ( appletPrivateKey, userPublicKey, appletPrime, base ) => {\n    const key = crypto.createDiffieHellman(Buffer.from(appletPrime), Buffer.from(base));\n    key.setPrivateKey(Buffer.from(appletPrivateKey));\n\n    const secretKey = key.computeSecret(Buffer.from(userPublicKey));\n\n    return crypto.createHash('sha256').update(secretKey).digest();\n}\n\n/** decrypt */\nconst decryptData = ({ text, key }) => {\n    let textParts = text.split(':');\n    let iv = Buffer.from(textParts.shift(), 'hex');\n    let encryptedText = Buffer.from(textParts.join(':'), 'hex');\n    let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\n    let decrypted = decipher.update(encryptedText);\n\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    return decrypted.toString();\n}\n\n/** encrypt */\nexport const encryptData = ({ text, key }) => {\n    let iv = crypto.randomBytes(config.IV_LENGTH);\n    let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);\n    let encrypted = cipher.update(text);\n   \n    encrypted = Buffer.concat([encrypted, cipher.final()]);\n\n    return iv.toString('hex') + ':' + encrypted.toString('hex');\n}\n\n\nexport default {\n    getAppletEncryptionInfo,\n    getAESKey,\n    decryptData,\n    encryptData\n}\n",{"version":3,"sources":["encryption.vue"],"names":[],"mappings":";AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA","file":"encryption.vue","sourceRoot":"src/services/Encryption","sourcesContent":["<script>\nimport crypto from 'crypto'\nimport config from '../../config'\n\nconst primeLength = 1024;\nconst base = [2];\n\nconst getPrivateKey = ({ appletPassword, accountId }) => {\n    const key1 = crypto.createHash('sha512').update(appletPassword).digest();\n    const key2 = crypto.createHash('sha512').update(accountId).digest();\n\n    return key1 + key2;\n}\n\nconst getAppletEncryptionInfo = ({ appletPassword, accountId, prime, baseNumber }) => {\n    const key = crypto.createDiffieHellman(\n        Buffer.from(prime ? prime : config.primes[Math.floor(Math.random() * 10)]),\n        Buffer.from(baseNumber ? baseNumber : base)\n    );\n\n    key.setPrivateKey(Buffer.from(getPrivateKey({\n        appletPassword,\n        accountId\n    })));\n    key.generateKeys();\n\n    return key;\n}\n\nconst getAESKey = ( appletPrivateKey, userPublicKey, appletPrime, base ) => {\n    const key = crypto.createDiffieHellman(Buffer.from(appletPrime), Buffer.from(base));\n    key.setPrivateKey(Buffer.from(appletPrivateKey));\n\n    const secretKey = key.computeSecret(Buffer.from(userPublicKey));\n\n    return crypto.createHash('sha256').update(secretKey).digest();\n}\n\n/** decrypt */\nconst decryptData = ({ text, key }) => {\n    let textParts = text.split(':');\n    let iv = Buffer.from(textParts.shift(), 'hex');\n    let encryptedText = Buffer.from(textParts.join(':'), 'hex');\n    let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\n    let decrypted = decipher.update(encryptedText);\n\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    return decrypted.toString();\n}\n\n/** encrypt */\nexport const encryptData = ({ text, key }) => {\n    let iv = crypto.randomBytes(config.IV_LENGTH);\n    let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);\n    let encrypted = cipher.update(text);\n   \n    encrypted = Buffer.concat([encrypted, cipher.final()]);\n\n    return iv.toString('hex') + ':' + encrypted.toString('hex');\n}\n\n\nexport default {\n    getAppletEncryptionInfo,\n    getAESKey,\n    decryptData,\n    encryptData\n}\n</script>\n"]}]}