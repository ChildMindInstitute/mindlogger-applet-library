{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/Gestures.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/Gestures.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n\r\n    name: 'dsGestures',\r\n\r\n    props:\r\n        {\r\n            minDistance:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().minDistance\r\n                    }\r\n                },\r\n            maxDistance:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().maxDistance\r\n                    }\r\n                },\r\n            maxWander:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().maxWander\r\n                    }\r\n                }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            start ($event) {\r\n                this.starting = this.getPoint($event)\r\n            },\r\n\r\n            move ($event) {\r\n                this.checkGesture(this.getPoint($event), this.maxDistance)\r\n            },\r\n\r\n            end ($event) {\r\n                this.checkGesture(this.getPoint($event), this.minDistance)\r\n            },\r\n\r\n            checkGesture (point, threshold) {\r\n                let start = this.starting\r\n\r\n                if (!start) {\r\n                    return false\r\n                }\r\n\r\n                let dx = point.x - start.x\r\n                let dy = point.y - start.y\r\n                let dSq = dx * dx\r\n\r\n                if (dSq > threshold * threshold) {\r\n                    let distance = Math.sqrt(dSq)\r\n                    let adx = dx < 0 ? -dx : dx\r\n                    let ady = dy < 0 ? -dy : dy\r\n\r\n                    // more horizontal than vertical\r\n                    if (adx > ady) {\r\n                        // check wander\r\n                        if (adx * this.maxWander > ady) {\r\n                            // towards left\r\n                            if (dx < 0) {\r\n                                this.$emit('swipeleft', adx)\r\n                            }\r\n                            // towards right\r\n                            else {\r\n                                this.$emit('swiperight', adx)\r\n                            }\r\n\r\n                            this.$emit('swipex', dx)\r\n                        }\r\n                    }\r\n                    // more vertical than horizontal\r\n                    else {\r\n                        // check wander\r\n                        if (ady * this.maxWander > adx) {\r\n                            // towards top\r\n                            if (dy < 0) {\r\n                                this.$emit('swipeup', ady)\r\n                            }\r\n                            // towards bottom\r\n                            else {\r\n                                this.$emit('swipedown', ady)\r\n                            }\r\n\r\n                            this.$emit('swipey', dy)\r\n                        }\r\n                    }\r\n\r\n                    this.starting = null\r\n                }\r\n            },\r\n\r\n            getPoint ($event) {\r\n                var touch = $event.touches[0] || $event.changedTouches[0]\r\n\r\n                return {\r\n                    x: touch.clientX,\r\n                    y: touch.clientY\r\n                }\r\n            }\r\n        }\r\n\r\n}\r\n",{"version":3,"sources":["Gestures.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"Gestures.vue","sourceRoot":"node_modules/dayspan-vuetify-2/src/components","sourcesContent":["<template>\r\n\r\n    <div class=\"ds-gesture-container\"\r\n         @touchstart=\"start\"\r\n         @touchmove=\"move\"\r\n         @touchend=\"end\">\r\n\r\n        <slot></slot>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n    name: 'dsGestures',\r\n\r\n    props:\r\n        {\r\n            minDistance:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().minDistance\r\n                    }\r\n                },\r\n            maxDistance:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().maxDistance\r\n                    }\r\n                },\r\n            maxWander:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().maxWander\r\n                    }\r\n                }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            start ($event) {\r\n                this.starting = this.getPoint($event)\r\n            },\r\n\r\n            move ($event) {\r\n                this.checkGesture(this.getPoint($event), this.maxDistance)\r\n            },\r\n\r\n            end ($event) {\r\n                this.checkGesture(this.getPoint($event), this.minDistance)\r\n            },\r\n\r\n            checkGesture (point, threshold) {\r\n                let start = this.starting\r\n\r\n                if (!start) {\r\n                    return false\r\n                }\r\n\r\n                let dx = point.x - start.x\r\n                let dy = point.y - start.y\r\n                let dSq = dx * dx\r\n\r\n                if (dSq > threshold * threshold) {\r\n                    let distance = Math.sqrt(dSq)\r\n                    let adx = dx < 0 ? -dx : dx\r\n                    let ady = dy < 0 ? -dy : dy\r\n\r\n                    // more horizontal than vertical\r\n                    if (adx > ady) {\r\n                        // check wander\r\n                        if (adx * this.maxWander > ady) {\r\n                            // towards left\r\n                            if (dx < 0) {\r\n                                this.$emit('swipeleft', adx)\r\n                            }\r\n                            // towards right\r\n                            else {\r\n                                this.$emit('swiperight', adx)\r\n                            }\r\n\r\n                            this.$emit('swipex', dx)\r\n                        }\r\n                    }\r\n                    // more vertical than horizontal\r\n                    else {\r\n                        // check wander\r\n                        if (ady * this.maxWander > adx) {\r\n                            // towards top\r\n                            if (dy < 0) {\r\n                                this.$emit('swipeup', ady)\r\n                            }\r\n                            // towards bottom\r\n                            else {\r\n                                this.$emit('swipedown', ady)\r\n                            }\r\n\r\n                            this.$emit('swipey', dy)\r\n                        }\r\n                    }\r\n\r\n                    this.starting = null\r\n                }\r\n            },\r\n\r\n            getPoint ($event) {\r\n                var touch = $event.touches[0] || $event.changedTouches[0]\r\n\r\n                return {\r\n                    x: touch.clientX,\r\n                    y: touch.clientY\r\n                }\r\n            }\r\n        }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n    .ds-gesture-container {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n</style>\r\n"]}]}