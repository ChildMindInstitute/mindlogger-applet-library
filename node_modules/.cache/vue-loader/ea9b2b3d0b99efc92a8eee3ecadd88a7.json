{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleTime.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleTime.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { Time, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleTime',\r\n\r\n    props:\r\n        {\r\n            value:\r\n                {\r\n                    required: true,\r\n                    type: Time\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            index:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().index\r\n                    }\r\n                },\r\n\r\n            mutate:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().mutate\r\n                    }\r\n                },\r\n\r\n            showAdd:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().showAdd\r\n                    }\r\n                },\r\n\r\n            showRemove:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().showRemove\r\n                    }\r\n                },\r\n\r\n            labels:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'labels')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().labels\r\n                    }\r\n                },\r\n\r\n            colors:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'colors')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().colors\r\n                    }\r\n                },\r\n\r\n            icons:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'icons')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().icons\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: vm => ({}),\r\n\r\n    computed:\r\n        {\r\n            time:\r\n                {\r\n                    get () {\r\n                        return this.value.format('HH:mm')\r\n                    },\r\n                    set (time) {\r\n                        this.setTime(time)\r\n                    }\r\n                },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            addTime () {\r\n                this.$emit('add', this.getEvent('add'))\r\n            },\r\n\r\n            removeTime () {\r\n                this.$emit('remove', this.getEvent('remove'))\r\n            },\r\n\r\n            setTime (time) {\r\n                var parsed = Time.parse(time)\r\n\r\n                if (parsed) {\r\n                    var ev = this.getEvent('change', {next: parsed})\r\n\r\n                    this.$emit('change', ev)\r\n\r\n                    if (!ev.handled) {\r\n                        if (ev.mutate) {\r\n                            ev.time.set(ev.next)\r\n\r\n                            parsed = ev.next\r\n                        }\r\n\r\n                        this.$emit('input', parsed)\r\n                    }\r\n                }\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    time: this.value,\r\n                    index: this.index,\r\n                    mutate: this.mutate,\r\n                    handled: false,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n",{"version":3,"sources":["ScheduleTime.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"ScheduleTime.vue","sourceRoot":"node_modules/dayspan-vuetify-2/src/components","sourcesContent":["<template>\r\n\r\n    <div class=\"ds-time-row\">\r\n\r\n        <div class=\"ds-time-cell\">\r\n\r\n            <v-text-field\r\n                    single-line hide-details solo flat\r\n                    type=\"time\"\r\n                    :readonly=\"isReadOnly\"\r\n                    v-model=\"time\"\r\n            ></v-text-field>\r\n\r\n        </div>\r\n\r\n        <div class=\"ds-time-cell\">\r\n\r\n            <v-tooltip bottom v-if=\"showRemove && !isReadOnly\">\r\n\r\n                <template v-slot:activator=\"{ on }\">\r\n                    <v-btn v-on=\"on\" icon\r\n                           class=\"action-remove\"\r\n                           :color=\"colors.remove\"\r\n                           @click=\"removeTime\">\r\n                        <v-icon>{{ icons.remove }}</v-icon>\r\n                    </v-btn>\r\n                </template>\r\n                <span v-html=\"labels.remove\"></span>\r\n\r\n            </v-tooltip>\r\n\r\n            <v-tooltip bottom v-if=\"showAdd && !isReadOnly\">\r\n\r\n                <template v-slot:activator=\"{ on }\">\r\n                    <v-btn v-on=\"on\" icon\r\n                           class=\"action-add\"\r\n                           :color=\"colors.add\"\r\n                           @click=\"addTime\">\r\n                        <v-icon>{{ icons.add }}</v-icon>\r\n                    </v-btn>\r\n                </template>\r\n                <span v-html=\"labels.add\"></span>\r\n\r\n            </v-tooltip>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { Time, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleTime',\r\n\r\n    props:\r\n        {\r\n            value:\r\n                {\r\n                    required: true,\r\n                    type: Time\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            index:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().index\r\n                    }\r\n                },\r\n\r\n            mutate:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().mutate\r\n                    }\r\n                },\r\n\r\n            showAdd:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().showAdd\r\n                    }\r\n                },\r\n\r\n            showRemove:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().showRemove\r\n                    }\r\n                },\r\n\r\n            labels:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'labels')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().labels\r\n                    }\r\n                },\r\n\r\n            colors:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'colors')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().colors\r\n                    }\r\n                },\r\n\r\n            icons:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'icons')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().icons\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: vm => ({}),\r\n\r\n    computed:\r\n        {\r\n            time:\r\n                {\r\n                    get () {\r\n                        return this.value.format('HH:mm')\r\n                    },\r\n                    set (time) {\r\n                        this.setTime(time)\r\n                    }\r\n                },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            addTime () {\r\n                this.$emit('add', this.getEvent('add'))\r\n            },\r\n\r\n            removeTime () {\r\n                this.$emit('remove', this.getEvent('remove'))\r\n            },\r\n\r\n            setTime (time) {\r\n                var parsed = Time.parse(time)\r\n\r\n                if (parsed) {\r\n                    var ev = this.getEvent('change', {next: parsed})\r\n\r\n                    this.$emit('change', ev)\r\n\r\n                    if (!ev.handled) {\r\n                        if (ev.mutate) {\r\n                            ev.time.set(ev.next)\r\n\r\n                            parsed = ev.next\r\n                        }\r\n\r\n                        this.$emit('input', parsed)\r\n                    }\r\n                }\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    time: this.value,\r\n                    index: this.index,\r\n                    mutate: this.mutate,\r\n                    handled: false,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n    .ds-time-row {\r\n        display: flex;\r\n\r\n        .ds-time-cell {\r\n            padding-right: 8px;\r\n            flex: 1 0 0px;\r\n            margin-bottom: 8px;\r\n\r\n            &:last-child {\r\n                margin-right: -8px;\r\n            }\r\n        }\r\n    }\r\n\r\n</style>\r\n"]}]}