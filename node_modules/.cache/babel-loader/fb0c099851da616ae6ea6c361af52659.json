{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/directives/click-outside/index.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/directives/click-outside/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function closeConditional() {\n  return false;\n}\n\nfunction directive(e, el, binding) {\n  // Args may not always be supplied\n  binding.args = binding.args || {}; // If no closeConditional was supplied assign a default\n\n  var isActive = binding.args.closeConditional || closeConditional; // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n\n  if (!e || isActive(e) === false) return; // If click was triggered programmaticaly (domEl.click()) then\n  // it shouldn't be treated as click-outside\n  // Chrome/Firefox support isTrusted property\n  // IE/Edge support pointerType property (empty if not triggered\n  // by pointing device)\n\n  if ('isTrusted' in e && !e.isTrusted || 'pointerType' in e && !e.pointerType) return; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  var elements = (binding.args.include || function () {\n    return [];\n  })(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  !elements.some(function (el) {\n    return el.contains(e.target);\n  }) && setTimeout(function () {\n    isActive(e) && binding.value && binding.value(e);\n  }, 0);\n}\n\nexport var ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted: function inserted(el, binding) {\n    var onClick = function onClick(e) {\n      return directive(e, el, binding);\n    }; // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n\n\n    var app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app.addEventListener('click', onClick, true);\n    el._clickOutside = onClick;\n  },\n  unbind: function unbind(el) {\n    if (!el._clickOutside) return;\n    var app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app && app.removeEventListener('click', el._clickOutside, true);\n    delete el._clickOutside;\n  }\n};\nexport default ClickOutside;",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/directives/click-outside/index.js"],"names":["closeConditional","directive","e","el","binding","args","isActive","isTrusted","pointerType","elements","include","push","some","contains","target","setTimeout","value","ClickOutside","inserted","onClick","app","document","querySelector","body","addEventListener","_clickOutside","unbind","removeEventListener"],"mappings":"AAAA,SAASA,gBAAT,GAA4B;AAC1B,SAAO,KAAP;AACD;;AAED,SAASC,SAAT,CAAmBC,CAAnB,EAAsBC,EAAtB,EAA0BC,OAA1B,EAAmC;AACjC;AACAA,EAAAA,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACC,IAAR,IAAgB,EAA/B,CAFiC,CAEE;;AAEnC,MAAMC,QAAQ,GAAGF,OAAO,CAACC,IAAR,CAAaL,gBAAb,IAAiCA,gBAAlD,CAJiC,CAImC;AACpE;AACA;AACA;;AAEA,MAAI,CAACE,CAAD,IAAMI,QAAQ,CAACJ,CAAD,CAAR,KAAgB,KAA1B,EAAiC,OATA,CASQ;AACzC;AACA;AACA;AACA;;AAEA,MAAI,eAAeA,CAAf,IAAoB,CAACA,CAAC,CAACK,SAAvB,IAAoC,iBAAiBL,CAAjB,IAAsB,CAACA,CAAC,CAACM,WAAjE,EAA8E,OAf7C,CAeqD;AACtF;;AAEA,MAAMC,QAAQ,GAAG,CAACL,OAAO,CAACC,IAAR,CAAaK,OAAb,IAAyB;AAAA,WAAM,EAAN;AAAA,GAA1B,GAAjB,CAlBiC,CAkBwB;;;AAGzDD,EAAAA,QAAQ,CAACE,IAAT,CAAcR,EAAd,EArBiC,CAqBd;AACnB;AACA;AACA;AACA;;AAEA,GAACM,QAAQ,CAACG,IAAT,CAAc,UAAAT,EAAE;AAAA,WAAIA,EAAE,CAACU,QAAH,CAAYX,CAAC,CAACY,MAAd,CAAJ;AAAA,GAAhB,CAAD,IAA+CC,UAAU,CAAC,YAAM;AAC9DT,IAAAA,QAAQ,CAACJ,CAAD,CAAR,IAAeE,OAAO,CAACY,KAAvB,IAAgCZ,OAAO,CAACY,KAAR,CAAcd,CAAd,CAAhC;AACD,GAFwD,EAEtD,CAFsD,CAAzD;AAGD;;AAED,OAAO,IAAMe,YAAY,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACAC,EAAAA,QAN0B,oBAMjBf,EANiB,EAMbC,OANa,EAMJ;AACpB,QAAMe,OAAO,GAAG,SAAVA,OAAU,CAAAjB,CAAC;AAAA,aAAID,SAAS,CAACC,CAAD,EAAIC,EAAJ,EAAQC,OAAR,CAAb;AAAA,KAAjB,CADoB,CAC4B;AAChD;AACA;;;AAGA,QAAMgB,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,YAAvB,KAAwCD,QAAQ,CAACE,IAA7D,CANoB,CAM+C;;AAEnEH,IAAAA,GAAG,CAACI,gBAAJ,CAAqB,OAArB,EAA8BL,OAA9B,EAAuC,IAAvC;AACAhB,IAAAA,EAAE,CAACsB,aAAH,GAAmBN,OAAnB;AACD,GAhByB;AAkB1BO,EAAAA,MAlB0B,kBAkBnBvB,EAlBmB,EAkBf;AACT,QAAI,CAACA,EAAE,CAACsB,aAAR,EAAuB;AACvB,QAAML,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,YAAvB,KAAwCD,QAAQ,CAACE,IAA7D,CAFS,CAE0D;;AAEnEH,IAAAA,GAAG,IAAIA,GAAG,CAACO,mBAAJ,CAAwB,OAAxB,EAAiCxB,EAAE,CAACsB,aAApC,EAAmD,IAAnD,CAAP;AACA,WAAOtB,EAAE,CAACsB,aAAV;AACD;AAxByB,CAArB;AA2BP,eAAeR,YAAf","sourcesContent":["function closeConditional() {\n  return false;\n}\n\nfunction directive(e, el, binding) {\n  // Args may not always be supplied\n  binding.args = binding.args || {}; // If no closeConditional was supplied assign a default\n\n  const isActive = binding.args.closeConditional || closeConditional; // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n\n  if (!e || isActive(e) === false) return; // If click was triggered programmaticaly (domEl.click()) then\n  // it shouldn't be treated as click-outside\n  // Chrome/Firefox support isTrusted property\n  // IE/Edge support pointerType property (empty if not triggered\n  // by pointing device)\n\n  if ('isTrusted' in e && !e.isTrusted || 'pointerType' in e && !e.pointerType) return; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  const elements = (binding.args.include || (() => []))(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  !elements.some(el => el.contains(e.target)) && setTimeout(() => {\n    isActive(e) && binding.value && binding.value(e);\n  }, 0);\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted(el, binding) {\n    const onClick = e => directive(e, el, binding); // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n\n\n    const app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app.addEventListener('click', onClick, true);\n    el._clickOutside = onClick;\n  },\n\n  unbind(el) {\n    if (!el._clickOutside) return;\n    const app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app && app.removeEventListener('click', el._clickOutside, true);\n    delete el._clickOutside;\n  }\n\n};\nexport default ClickOutside;\n//# sourceMappingURL=index.js.map"]}]}