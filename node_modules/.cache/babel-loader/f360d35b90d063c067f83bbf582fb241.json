{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/services/Encryption/encryption.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/services/Encryption/encryption.vue","mtime":1617355018000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport crypto from 'crypto';\nimport config from \"../../config\";\nvar primeLength = 1024;\nvar base = [2];\n\nvar getPrivateKey = function getPrivateKey(_ref) {\n  var appletPassword = _ref.appletPassword,\n      accountId = _ref.accountId;\n  var key1 = crypto.createHash('sha512').update(appletPassword).digest();\n  var key2 = crypto.createHash('sha512').update(accountId).digest();\n  return key1 + key2;\n};\n\nvar getAppletEncryptionInfo = function getAppletEncryptionInfo(_ref2) {\n  var appletPassword = _ref2.appletPassword,\n      accountId = _ref2.accountId,\n      prime = _ref2.prime,\n      baseNumber = _ref2.baseNumber;\n  var key = crypto.createDiffieHellman(Buffer.from(prime ? prime : config.primes[Math.floor(Math.random() * 10)]), Buffer.from(baseNumber ? baseNumber : base));\n  key.setPrivateKey(Buffer.from(getPrivateKey({\n    appletPassword: appletPassword,\n    accountId: accountId\n  })));\n  key.generateKeys();\n  return key;\n};\n\nvar getAESKey = function getAESKey(appletPrivateKey, userPublicKey, appletPrime, base) {\n  var key = crypto.createDiffieHellman(Buffer.from(appletPrime), Buffer.from(base));\n  key.setPrivateKey(Buffer.from(appletPrivateKey));\n  var secretKey = key.computeSecret(Buffer.from(userPublicKey));\n  return crypto.createHash('sha256').update(secretKey).digest();\n};\n/** decrypt */\n\n\nvar decryptData = function decryptData(_ref3) {\n  var text = _ref3.text,\n      key = _ref3.key;\n  var textParts = text.split(':');\n  var iv = Buffer.from(textParts.shift(), 'hex');\n  var encryptedText = Buffer.from(textParts.join(':'), 'hex');\n  var decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\n  var decrypted = decipher.update(encryptedText);\n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted.toString();\n};\n/** encrypt */\n\n\nexport var encryptData = function encryptData(_ref4) {\n  var text = _ref4.text,\n      key = _ref4.key;\n  var iv = crypto.randomBytes(config.IV_LENGTH);\n  var cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);\n  var encrypted = cipher.update(text);\n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n  return iv.toString('hex') + ':' + encrypted.toString('hex');\n};\nexport default {\n  getAppletEncryptionInfo: getAppletEncryptionInfo,\n  getAESKey: getAESKey,\n  decryptData: decryptData,\n  encryptData: encryptData\n};",{"version":3,"sources":["encryption.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\nimport crypto from 'crypto'\nimport config from '../../config'\n\nconst primeLength = 1024;\nconst base = [2];\n\nconst getPrivateKey = ({ appletPassword, accountId }) => {\n    const key1 = crypto.createHash('sha512').update(appletPassword).digest();\n    const key2 = crypto.createHash('sha512').update(accountId).digest();\n\n    return key1 + key2;\n}\n\nconst getAppletEncryptionInfo = ({ appletPassword, accountId, prime, baseNumber }) => {\n    const key = crypto.createDiffieHellman(\n        Buffer.from(prime ? prime : config.primes[Math.floor(Math.random() * 10)]),\n        Buffer.from(baseNumber ? baseNumber : base)\n    );\n\n    key.setPrivateKey(Buffer.from(getPrivateKey({\n        appletPassword,\n        accountId\n    })));\n    key.generateKeys();\n\n    return key;\n}\n\nconst getAESKey = ( appletPrivateKey, userPublicKey, appletPrime, base ) => {\n    const key = crypto.createDiffieHellman(Buffer.from(appletPrime), Buffer.from(base));\n    key.setPrivateKey(Buffer.from(appletPrivateKey));\n\n    const secretKey = key.computeSecret(Buffer.from(userPublicKey));\n\n    return crypto.createHash('sha256').update(secretKey).digest();\n}\n\n/** decrypt */\nconst decryptData = ({ text, key }) => {\n    let textParts = text.split(':');\n    let iv = Buffer.from(textParts.shift(), 'hex');\n    let encryptedText = Buffer.from(textParts.join(':'), 'hex');\n    let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\n    let decrypted = decipher.update(encryptedText);\n\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    return decrypted.toString();\n}\n\n/** encrypt */\nexport const encryptData = ({ text, key }) => {\n    let iv = crypto.randomBytes(config.IV_LENGTH);\n    let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);\n    let encrypted = cipher.update(text);\n   \n    encrypted = Buffer.concat([encrypted, cipher.final()]);\n\n    return iv.toString('hex') + ':' + encrypted.toString('hex');\n}\n\n\nexport default {\n    getAppletEncryptionInfo,\n    getAESKey,\n    decryptData,\n    encryptData\n}\n</script>\n"],"sourceRoot":"src/services/Encryption"}]}