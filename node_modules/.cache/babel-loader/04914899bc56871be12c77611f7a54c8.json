{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/util/color/transformSRGB.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/util/color/transformSRGB.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { clamp } from \"../../util/helpers\"; // For converting XYZ to sRGB\n\nvar srgbForwardMatrix = [[3.2406, -1.5372, -0.4986], [-0.9689, 1.8758, 0.0415], [0.0557, -0.2040, 1.0570]]; // Forward gamma adjust\n\nvar srgbForwardTransform = function srgbForwardTransform(C) {\n  return C <= 0.0031308 ? C * 12.92 : 1.055 * Math.pow(C, 1 / 2.4) - 0.055;\n}; // For converting sRGB to XYZ\n\n\nvar srgbReverseMatrix = [[0.4124, 0.3576, 0.1805], [0.2126, 0.7152, 0.0722], [0.0193, 0.1192, 0.9505]]; // Reverse gamma adjust\n\nvar srgbReverseTransform = function srgbReverseTransform(C) {\n  return C <= 0.04045 ? C / 12.92 : Math.pow((C + 0.055) / 1.055, 2.4);\n};\n\nexport function fromXYZ(xyz) {\n  var rgb = Array(3);\n  var transform = srgbForwardTransform;\n  var matrix = srgbForwardMatrix; // Matrix transform, then gamma adjustment\n\n  for (var i = 0; i < 3; ++i) {\n    rgb[i] = Math.round(clamp(transform(matrix[i][0] * xyz[0] + matrix[i][1] * xyz[1] + matrix[i][2] * xyz[2])) * 255);\n  } // Rescale back to [0, 255]\n\n\n  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0);\n}\nexport function toXYZ(rgb) {\n  var xyz = [0, 0, 0];\n  var transform = srgbReverseTransform;\n  var matrix = srgbReverseMatrix; // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n\n  var r = transform((rgb >> 16 & 0xff) / 255);\n  var g = transform((rgb >> 8 & 0xff) / 255);\n  var b = transform((rgb >> 0 & 0xff) / 255); // Matrix color space transform\n\n  for (var i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b;\n  }\n\n  return xyz;\n}",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/util/color/transformSRGB.js"],"names":["clamp","srgbForwardMatrix","srgbForwardTransform","C","srgbReverseMatrix","srgbReverseTransform","fromXYZ","xyz","rgb","Array","transform","matrix","i","Math","round","toXYZ","r","g","b"],"mappings":"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","sourcesContent":["import { clamp } from '../../util/helpers'; // For converting XYZ to sRGB\n\nconst srgbForwardMatrix = [[3.2406, -1.5372, -0.4986], [-0.9689, 1.8758, 0.0415], [0.0557, -0.2040, 1.0570]]; // Forward gamma adjust\n\nconst srgbForwardTransform = C => C <= 0.0031308 ? C * 12.92 : 1.055 * C ** (1 / 2.4) - 0.055; // For converting sRGB to XYZ\n\n\nconst srgbReverseMatrix = [[0.4124, 0.3576, 0.1805], [0.2126, 0.7152, 0.0722], [0.0193, 0.1192, 0.9505]]; // Reverse gamma adjust\n\nconst srgbReverseTransform = C => C <= 0.04045 ? C / 12.92 : ((C + 0.055) / 1.055) ** 2.4;\n\nexport function fromXYZ(xyz) {\n  const rgb = Array(3);\n  const transform = srgbForwardTransform;\n  const matrix = srgbForwardMatrix; // Matrix transform, then gamma adjustment\n\n  for (let i = 0; i < 3; ++i) {\n    rgb[i] = Math.round(clamp(transform(matrix[i][0] * xyz[0] + matrix[i][1] * xyz[1] + matrix[i][2] * xyz[2])) * 255);\n  } // Rescale back to [0, 255]\n\n\n  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0);\n}\nexport function toXYZ(rgb) {\n  const xyz = [0, 0, 0];\n  const transform = srgbReverseTransform;\n  const matrix = srgbReverseMatrix; // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n\n  const r = transform((rgb >> 16 & 0xff) / 255);\n  const g = transform((rgb >> 8 & 0xff) / 255);\n  const b = transform((rgb >> 0 & 0xff) / 255); // Matrix color space transform\n\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b;\n  }\n\n  return xyz;\n}\n//# sourceMappingURL=transformSRGB.js.map"]}]}