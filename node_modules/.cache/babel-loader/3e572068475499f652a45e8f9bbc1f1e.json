{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/mixins/intersectable/index.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/mixins/intersectable/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Directives\nimport Intersect from \"../../directives/intersect\"; // Utilities\n\nimport { consoleWarn } from \"../../util/console\"; // Types\n\nimport Vue from 'vue';\nexport default function intersectable(options) {\n  if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {\n    // do nothing because intersection observer is not available\n    return Vue.extend({\n      name: 'intersectable'\n    });\n  }\n\n  return Vue.extend({\n    name: 'intersectable',\n    mounted: function mounted() {\n      Intersect.inserted(this.$el, {\n        name: 'intersect',\n        value: {\n          handler: this.onObserve\n        }\n      });\n    },\n    destroyed: function destroyed() {\n      Intersect.unbind(this.$el);\n    },\n    methods: {\n      onObserve: function onObserve(entries, observer, isIntersecting) {\n        if (!isIntersecting) return;\n\n        for (var i = 0, length = options.onVisible.length; i < length; i++) {\n          var callback = this[options.onVisible[i]];\n\n          if (typeof callback === 'function') {\n            callback();\n            continue;\n          }\n\n          consoleWarn(options.onVisible[i] + ' method is not available on the instance but referenced in intersectable mixin options');\n        }\n      }\n    }\n  });\n}",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/mixins/intersectable/index.js"],"names":["Intersect","consoleWarn","Vue","intersectable","options","window","extend","name","mounted","inserted","$el","value","handler","onObserve","destroyed","unbind","methods","entries","observer","isIntersecting","i","length","onVisible","callback"],"mappings":"AAAA;AACA,OAAOA,SAAP,mC,CAAoD;;AAEpD,SAASC,WAAT,6B,CAAkD;;AAElD,OAAOC,GAAP,MAAgB,KAAhB;AACA,eAAe,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC7C,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,EAAE,0BAA0BA,MAA5B,CAArC,EAA0E;AACxE;AACA,WAAOH,GAAG,CAACI,MAAJ,CAAW;AAChBC,MAAAA,IAAI,EAAE;AADU,KAAX,CAAP;AAGD;;AAED,SAAOL,GAAG,CAACI,MAAJ,CAAW;AAChBC,IAAAA,IAAI,EAAE,eADU;AAGhBC,IAAAA,OAHgB,qBAGN;AACRR,MAAAA,SAAS,CAACS,QAAV,CAAmB,KAAKC,GAAxB,EAA6B;AAC3BH,QAAAA,IAAI,EAAE,WADqB;AAE3BI,QAAAA,KAAK,EAAE;AACLC,UAAAA,OAAO,EAAE,KAAKC;AADT;AAFoB,OAA7B;AAMD,KAVe;AAYhBC,IAAAA,SAZgB,uBAYJ;AACVd,MAAAA,SAAS,CAACe,MAAV,CAAiB,KAAKL,GAAtB;AACD,KAde;AAgBhBM,IAAAA,OAAO,EAAE;AACPH,MAAAA,SADO,qBACGI,OADH,EACYC,QADZ,EACsBC,cADtB,EACsC;AAC3C,YAAI,CAACA,cAAL,EAAqB;;AAErB,aAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGjB,OAAO,CAACkB,SAAR,CAAkBD,MAA3C,EAAmDD,CAAC,GAAGC,MAAvD,EAA+DD,CAAC,EAAhE,EAAoE;AAClE,cAAMG,QAAQ,GAAG,KAAKnB,OAAO,CAACkB,SAAR,CAAkBF,CAAlB,CAAL,CAAjB;;AAEA,cAAI,OAAOG,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,YAAAA,QAAQ;AACR;AACD;;AAEDtB,UAAAA,WAAW,CAACG,OAAO,CAACkB,SAAR,CAAkBF,CAAlB,IAAuB,wFAAxB,CAAX;AACD;AACF;AAdM;AAhBO,GAAX,CAAP;AAkCD","sourcesContent":["// Directives\nimport Intersect from '../../directives/intersect'; // Utilities\n\nimport { consoleWarn } from '../../util/console'; // Types\n\nimport Vue from 'vue';\nexport default function intersectable(options) {\n  if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {\n    // do nothing because intersection observer is not available\n    return Vue.extend({\n      name: 'intersectable'\n    });\n  }\n\n  return Vue.extend({\n    name: 'intersectable',\n\n    mounted() {\n      Intersect.inserted(this.$el, {\n        name: 'intersect',\n        value: {\n          handler: this.onObserve\n        }\n      });\n    },\n\n    destroyed() {\n      Intersect.unbind(this.$el);\n    },\n\n    methods: {\n      onObserve(entries, observer, isIntersecting) {\n        if (!isIntersecting) return;\n\n        for (let i = 0, length = options.onVisible.length; i < length; i++) {\n          const callback = this[options.onVisible[i]];\n\n          if (typeof callback === 'function') {\n            callback();\n            continue;\n          }\n\n          consoleWarn(options.onVisible[i] + ' method is not available on the instance but referenced in intersectable mixin options');\n        }\n      }\n\n    }\n  });\n}\n//# sourceMappingURL=index.js.map"]}]}