{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VCalendar/util/props.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VCalendar/util/props.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.number.constructor\";\nimport { validateTimestamp, parseDate, DAYS_IN_WEEK } from \"./timestamp\";\nimport { CalendarEventOverlapModes } from \"../modes\";\nexport default {\n  base: {\n    start: {\n      type: String,\n      validate: validateTimestamp,\n      default: function _default() {\n        return parseDate(new Date()).date;\n      }\n    },\n    end: {\n      type: String,\n      validate: validateTimestamp\n    },\n    weekdays: {\n      type: [Array, String],\n      default: function _default() {\n        return [0, 1, 2, 3, 4, 5, 6];\n      },\n      validate: validateWeekdays\n    },\n    hideHeader: {\n      type: Boolean,\n      default: false\n    },\n    shortWeekdays: {\n      type: Boolean,\n      default: true\n    },\n    weekdayFormat: {\n      type: Function,\n      default: null\n    },\n    dayFormat: {\n      type: Function,\n      default: null\n    }\n  },\n  intervals: {\n    maxDays: {\n      type: Number,\n      default: 7\n    },\n    shortIntervals: {\n      type: Boolean,\n      default: true\n    },\n    intervalHeight: {\n      type: [Number, String],\n      default: 48,\n      validate: validateNumber\n    },\n    intervalWidth: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber\n    },\n    intervalMinutes: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber\n    },\n    firstInterval: {\n      type: [Number, String],\n      default: 0,\n      validate: validateNumber\n    },\n    intervalCount: {\n      type: [Number, String],\n      default: 24,\n      validate: validateNumber\n    },\n    intervalFormat: {\n      type: Function,\n      default: null\n    },\n    intervalStyle: {\n      type: Function,\n      default: null\n    },\n    showIntervalLabel: {\n      type: Function,\n      default: null\n    }\n  },\n  weeks: {\n    minWeeks: {\n      validate: validateNumber,\n      default: 1\n    },\n    shortMonths: {\n      type: Boolean,\n      default: true\n    },\n    showMonthOnFirst: {\n      type: Boolean,\n      default: true\n    },\n    monthFormat: {\n      type: Function,\n      default: null\n    }\n  },\n  calendar: {\n    type: {\n      type: String,\n      default: 'month'\n    },\n    value: {\n      type: String,\n      validate: validateTimestamp\n    }\n  },\n  events: {\n    events: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    eventStart: {\n      type: String,\n      default: 'start'\n    },\n    eventEnd: {\n      type: String,\n      default: 'end'\n    },\n    eventHeight: {\n      type: Number,\n      default: 20\n    },\n    eventColor: {\n      type: [String, Function],\n      default: 'primary'\n    },\n    eventTextColor: {\n      type: [String, Function],\n      default: 'white'\n    },\n    eventName: {\n      type: [String, Function],\n      default: 'name'\n    },\n    eventOverlapThreshold: {\n      type: [String, Number],\n      default: 60\n    },\n    eventOverlapMode: {\n      type: [String, Function],\n      default: 'stack',\n      validate: function validate(mode) {\n        return mode in CalendarEventOverlapModes || typeof mode === 'function';\n      }\n    },\n    eventMore: {\n      type: Boolean,\n      default: true\n    },\n    eventMoreText: {\n      type: String,\n      default: '$vuetify.calendar.moreEvents'\n    },\n    eventRipple: {\n      type: [Boolean, Object],\n      default: null\n    },\n    eventMarginBottom: {\n      type: Number,\n      default: 1\n    }\n  }\n};\nexport function validateNumber(input) {\n  return isFinite(parseInt(input));\n}\nexport function validateWeekdays(input) {\n  if (typeof input === 'string') {\n    input = input.split(',');\n  }\n\n  if (Array.isArray(input)) {\n    var ints = input.map(function (x) {\n      return parseInt(x);\n    });\n\n    if (ints.length > DAYS_IN_WEEK || ints.length === 0) {\n      return false;\n    }\n\n    var visited = {};\n    var wrapped = false;\n\n    for (var i = 0; i < ints.length; i++) {\n      var x = ints[i];\n\n      if (!isFinite(x) || x < 0 || x >= DAYS_IN_WEEK) {\n        return false;\n      }\n\n      if (i > 0) {\n        var d = x - ints[i - 1];\n\n        if (d < 0) {\n          if (wrapped) {\n            return false;\n          }\n\n          wrapped = true;\n        } else if (d === 0) {\n          return false;\n        }\n      }\n\n      if (visited[x]) {\n        return false;\n      }\n\n      visited[x] = true;\n    }\n\n    return true;\n  }\n\n  return false;\n}",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VCalendar/util/props.js"],"names":["validateTimestamp","parseDate","DAYS_IN_WEEK","CalendarEventOverlapModes","base","start","type","String","validate","default","Date","date","end","weekdays","Array","validateWeekdays","hideHeader","Boolean","shortWeekdays","weekdayFormat","Function","dayFormat","intervals","maxDays","Number","shortIntervals","intervalHeight","validateNumber","intervalWidth","intervalMinutes","firstInterval","intervalCount","intervalFormat","intervalStyle","showIntervalLabel","weeks","minWeeks","shortMonths","showMonthOnFirst","monthFormat","calendar","value","events","eventStart","eventEnd","eventHeight","eventColor","eventTextColor","eventName","eventOverlapThreshold","eventOverlapMode","mode","eventMore","eventMoreText","eventRipple","Object","eventMarginBottom","input","isFinite","parseInt","split","isArray","ints","map","x","length","visited","wrapped","i","d"],"mappings":"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","sourcesContent":["import { validateTimestamp, parseDate, DAYS_IN_WEEK } from './timestamp';\nimport { CalendarEventOverlapModes } from '../modes';\nexport default {\n  base: {\n    start: {\n      type: String,\n      validate: validateTimestamp,\n      default: () => parseDate(new Date()).date\n    },\n    end: {\n      type: String,\n      validate: validateTimestamp\n    },\n    weekdays: {\n      type: [Array, String],\n      default: () => [0, 1, 2, 3, 4, 5, 6],\n      validate: validateWeekdays\n    },\n    hideHeader: {\n      type: Boolean,\n      default: false\n    },\n    shortWeekdays: {\n      type: Boolean,\n      default: true\n    },\n    weekdayFormat: {\n      type: Function,\n      default: null\n    },\n    dayFormat: {\n      type: Function,\n      default: null\n    }\n  },\n  intervals: {\n    maxDays: {\n      type: Number,\n      default: 7\n    },\n    shortIntervals: {\n      type: Boolean,\n      default: true\n    },\n    intervalHeight: {\n      type: [Number, String],\n      default: 48,\n      validate: validateNumber\n    },\n    intervalWidth: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber\n    },\n    intervalMinutes: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber\n    },\n    firstInterval: {\n      type: [Number, String],\n      default: 0,\n      validate: validateNumber\n    },\n    intervalCount: {\n      type: [Number, String],\n      default: 24,\n      validate: validateNumber\n    },\n    intervalFormat: {\n      type: Function,\n      default: null\n    },\n    intervalStyle: {\n      type: Function,\n      default: null\n    },\n    showIntervalLabel: {\n      type: Function,\n      default: null\n    }\n  },\n  weeks: {\n    minWeeks: {\n      validate: validateNumber,\n      default: 1\n    },\n    shortMonths: {\n      type: Boolean,\n      default: true\n    },\n    showMonthOnFirst: {\n      type: Boolean,\n      default: true\n    },\n    monthFormat: {\n      type: Function,\n      default: null\n    }\n  },\n  calendar: {\n    type: {\n      type: String,\n      default: 'month'\n    },\n    value: {\n      type: String,\n      validate: validateTimestamp\n    }\n  },\n  events: {\n    events: {\n      type: Array,\n      default: () => []\n    },\n    eventStart: {\n      type: String,\n      default: 'start'\n    },\n    eventEnd: {\n      type: String,\n      default: 'end'\n    },\n    eventHeight: {\n      type: Number,\n      default: 20\n    },\n    eventColor: {\n      type: [String, Function],\n      default: 'primary'\n    },\n    eventTextColor: {\n      type: [String, Function],\n      default: 'white'\n    },\n    eventName: {\n      type: [String, Function],\n      default: 'name'\n    },\n    eventOverlapThreshold: {\n      type: [String, Number],\n      default: 60\n    },\n    eventOverlapMode: {\n      type: [String, Function],\n      default: 'stack',\n      validate: mode => mode in CalendarEventOverlapModes || typeof mode === 'function'\n    },\n    eventMore: {\n      type: Boolean,\n      default: true\n    },\n    eventMoreText: {\n      type: String,\n      default: '$vuetify.calendar.moreEvents'\n    },\n    eventRipple: {\n      type: [Boolean, Object],\n      default: null\n    },\n    eventMarginBottom: {\n      type: Number,\n      default: 1\n    }\n  }\n};\nexport function validateNumber(input) {\n  return isFinite(parseInt(input));\n}\nexport function validateWeekdays(input) {\n  if (typeof input === 'string') {\n    input = input.split(',');\n  }\n\n  if (Array.isArray(input)) {\n    const ints = input.map(x => parseInt(x));\n\n    if (ints.length > DAYS_IN_WEEK || ints.length === 0) {\n      return false;\n    }\n\n    const visited = {};\n    let wrapped = false;\n\n    for (let i = 0; i < ints.length; i++) {\n      const x = ints[i];\n\n      if (!isFinite(x) || x < 0 || x >= DAYS_IN_WEEK) {\n        return false;\n      }\n\n      if (i > 0) {\n        const d = x - ints[i - 1];\n\n        if (d < 0) {\n          if (wrapped) {\n            return false;\n          }\n\n          wrapped = true;\n        } else if (d === 0) {\n          return false;\n        }\n      }\n\n      if (visited[x]) {\n        return false;\n      }\n\n      visited[x] = true;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n//# sourceMappingURL=props.js.map"]}]}