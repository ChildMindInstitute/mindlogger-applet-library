{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/directives/intersect/index.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/directives/intersect/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport _typeof from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n\nfunction inserted(el, binding) {\n  var modifiers = binding.modifiers || {};\n  var value = binding.value;\n\n  var _ref = _typeof(value) === 'object' ? value : {\n    handler: value,\n    options: {}\n  },\n      handler = _ref.handler,\n      options = _ref.options;\n\n  var observer = new IntersectionObserver(function () {\n    var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var observer = arguments.length > 1 ? arguments[1] : undefined;\n\n    /* istanbul ignore if */\n    if (!el._observe) return; // Just in case, should never fire\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n\n    if (handler && (!modifiers.quiet || el._observe.init)) {\n      var isIntersecting = Boolean(entries.find(function (entry) {\n        return entry.isIntersecting;\n      }));\n      handler(entries, observer, isIntersecting);\n    } // If has already been initted and\n    // has the once modifier, unbind\n\n\n    if (el._observe.init && modifiers.once) unbind(el); // Otherwise, mark the observer as initted\n    else el._observe.init = true;\n  }, options);\n  el._observe = {\n    init: false,\n    observer: observer\n  };\n  observer.observe(el);\n}\n\nfunction unbind(el) {\n  /* istanbul ignore if */\n  if (!el._observe) return;\n\n  el._observe.observer.unobserve(el);\n\n  delete el._observe;\n}\n\nexport var Intersect = {\n  inserted: inserted,\n  unbind: unbind\n};\nexport default Intersect;",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/directives/intersect/index.js"],"names":["inserted","el","binding","modifiers","value","handler","options","observer","IntersectionObserver","entries","_observe","quiet","init","isIntersecting","Boolean","find","entry","once","unbind","observe","unobserve","Intersect"],"mappings":";;;AAAA,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,OAAtB,EAA+B;AAC7B,MAAMC,SAAS,GAAGD,OAAO,CAACC,SAAR,IAAqB,EAAvC;AACA,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAtB;;AAF6B,aAMzB,QAAOA,KAAP,MAAiB,QAAjB,GAA4BA,KAA5B,GAAoC;AACtCC,IAAAA,OAAO,EAAED,KAD6B;AAEtCE,IAAAA,OAAO,EAAE;AAF6B,GANX;AAAA,MAI3BD,OAJ2B,QAI3BA,OAJ2B;AAAA,MAK3BC,OAL2B,QAK3BA,OAL2B;;AAU7B,MAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,YAA4B;AAAA,QAA3BC,OAA2B,uEAAjB,EAAiB;AAAA,QAAbF,QAAa;;AACpE;AACA,QAAI,CAACN,EAAE,CAACS,QAAR,EAAkB,OAFkD,CAE1C;AAC1B;AACA;;AAEA,QAAIL,OAAO,KAAK,CAACF,SAAS,CAACQ,KAAX,IAAoBV,EAAE,CAACS,QAAH,CAAYE,IAArC,CAAX,EAAuD;AACrD,UAAMC,cAAc,GAAGC,OAAO,CAACL,OAAO,CAACM,IAAR,CAAa,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACH,cAAV;AAAA,OAAlB,CAAD,CAA9B;AACAR,MAAAA,OAAO,CAACI,OAAD,EAAUF,QAAV,EAAoBM,cAApB,CAAP;AACD,KATmE,CASlE;AACF;;;AAGA,QAAIZ,EAAE,CAACS,QAAH,CAAYE,IAAZ,IAAoBT,SAAS,CAACc,IAAlC,EAAwCC,MAAM,CAACjB,EAAD,CAAN,CAAxC,CAAoD;AAApD,SACKA,EAAE,CAACS,QAAH,CAAYE,IAAZ,GAAmB,IAAnB;AACN,GAfgB,EAedN,OAfc,CAAjB;AAgBAL,EAAAA,EAAE,CAACS,QAAH,GAAc;AACZE,IAAAA,IAAI,EAAE,KADM;AAEZL,IAAAA,QAAQ,EAARA;AAFY,GAAd;AAIAA,EAAAA,QAAQ,CAACY,OAAT,CAAiBlB,EAAjB;AACD;;AAED,SAASiB,MAAT,CAAgBjB,EAAhB,EAAoB;AAClB;AACA,MAAI,CAACA,EAAE,CAACS,QAAR,EAAkB;;AAElBT,EAAAA,EAAE,CAACS,QAAH,CAAYH,QAAZ,CAAqBa,SAArB,CAA+BnB,EAA/B;;AAEA,SAAOA,EAAE,CAACS,QAAV;AACD;;AAED,OAAO,IAAMW,SAAS,GAAG;AACvBrB,EAAAA,QAAQ,EAARA,QADuB;AAEvBkB,EAAAA,MAAM,EAANA;AAFuB,CAAlB;AAIP,eAAeG,SAAf","sourcesContent":["function inserted(el, binding) {\n  const modifiers = binding.modifiers || {};\n  const value = binding.value;\n  const {\n    handler,\n    options\n  } = typeof value === 'object' ? value : {\n    handler: value,\n    options: {}\n  };\n  const observer = new IntersectionObserver((entries = [], observer) => {\n    /* istanbul ignore if */\n    if (!el._observe) return; // Just in case, should never fire\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n\n    if (handler && (!modifiers.quiet || el._observe.init)) {\n      const isIntersecting = Boolean(entries.find(entry => entry.isIntersecting));\n      handler(entries, observer, isIntersecting);\n    } // If has already been initted and\n    // has the once modifier, unbind\n\n\n    if (el._observe.init && modifiers.once) unbind(el); // Otherwise, mark the observer as initted\n    else el._observe.init = true;\n  }, options);\n  el._observe = {\n    init: false,\n    observer\n  };\n  observer.observe(el);\n}\n\nfunction unbind(el) {\n  /* istanbul ignore if */\n  if (!el._observe) return;\n\n  el._observe.observer.unobserve(el);\n\n  delete el._observe;\n}\n\nexport const Intersect = {\n  inserted,\n  unbind\n};\nexport default Intersect;\n//# sourceMappingURL=index.js.map"]}]}