{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanels.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanels.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Styles\nimport \"../../../src/components/VExpansionPanel/VExpansionPanel.sass\"; // Components\n\nimport { BaseItemGroup } from \"../VItemGroup/VItemGroup\"; // Utilities\n\nimport { breaking } from \"../../util/console\";\n/* @vue/component */\n\nexport default BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n  provide: function provide() {\n    return {\n      expansionPanels: this\n    };\n  },\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread({}, BaseItemGroup.options.computed.classes.call(this), {\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile\n      });\n    }\n  },\n  created: function created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      breaking('expand', 'multiple', this);\n    }\n    /* istanbul ignore next */\n\n\n    if (Array.isArray(this.value) && this.value.length > 0 && typeof this.value[0] === 'boolean') {\n      breaking(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this);\n    }\n  },\n  methods: {\n    updateItem: function updateItem(item, index) {\n      var value = this.getValue(item, index);\n      var nextValue = this.getValue(item, index + 1);\n      item.isActive = this.toggleMethod(value);\n      item.nextIsActive = this.toggleMethod(nextValue);\n    }\n  }\n});",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanels.js"],"names":["BaseItemGroup","breaking","extend","name","provide","expansionPanels","props","accordion","Boolean","disabled","flat","hover","focusable","inset","popout","readonly","tile","computed","classes","options","call","created","$attrs","hasOwnProperty","Array","isArray","value","length","methods","updateItem","item","index","getValue","nextValue","isActive","toggleMethod","nextIsActive"],"mappings":";;;;;;;;;AAAA;AACA,sE,CAAuE;;AAEvE,SAASA,aAAT,mC,CAA0D;;AAE1D,SAASC,QAAT;AACA;;AAEA,eAAeD,aAAa,CAACE,MAAd,CAAqB;AAClCC,EAAAA,IAAI,EAAE,oBAD4B;AAGlCC,EAAAA,OAHkC,qBAGxB;AACR,WAAO;AACLC,MAAAA,eAAe,EAAE;AADZ,KAAP;AAGD,GAPiC;AASlCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAEC,OADN;AAELC,IAAAA,QAAQ,EAAED,OAFL;AAGLE,IAAAA,IAAI,EAAEF,OAHD;AAILG,IAAAA,KAAK,EAAEH,OAJF;AAKLI,IAAAA,SAAS,EAAEJ,OALN;AAMLK,IAAAA,KAAK,EAAEL,OANF;AAOLM,IAAAA,MAAM,EAAEN,OAPH;AAQLO,IAAAA,QAAQ,EAAEP,OARL;AASLQ,IAAAA,IAAI,EAAER;AATD,GAT2B;AAoBlCS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OADQ,qBACE;AACR,+BAAYlB,aAAa,CAACmB,OAAd,CAAsBF,QAAtB,CAA+BC,OAA/B,CAAuCE,IAAvC,CAA4C,IAA5C,CAAZ;AACE,8BAAsB,IADxB;AAEE,yCAAiC,KAAKb,SAFxC;AAGE,oCAA4B,KAAKG,IAHnC;AAIE,qCAA6B,KAAKC,KAJpC;AAKE,yCAAiC,KAAKC,SALxC;AAME,qCAA6B,KAAKC,KANpC;AAOE,sCAA8B,KAAKC,MAPrC;AAQE,oCAA4B,KAAKE;AARnC;AAUD;AAZO,GApBwB;AAoClCK,EAAAA,OApCkC,qBAoCxB;AACR;AACA,QAAI,KAAKC,MAAL,CAAYC,cAAZ,CAA2B,QAA3B,CAAJ,EAA0C;AACxCtB,MAAAA,QAAQ,CAAC,QAAD,EAAW,UAAX,EAAuB,IAAvB,CAAR;AACD;AACD;;;AAGA,QAAIuB,KAAK,CAACC,OAAN,CAAc,KAAKC,KAAnB,KAA6B,KAAKA,KAAL,CAAWC,MAAX,GAAoB,CAAjD,IAAsD,OAAO,KAAKD,KAAL,CAAW,CAAX,CAAP,KAAyB,SAAnF,EAA8F;AAC5FzB,MAAAA,QAAQ,CAAC,8BAAD,EAAiC,iBAAjC,EAAoD,IAApD,CAAR;AACD;AACF,GA/CiC;AAiDlC2B,EAAAA,OAAO,EAAE;AACPC,IAAAA,UADO,sBACIC,IADJ,EACUC,KADV,EACiB;AACtB,UAAML,KAAK,GAAG,KAAKM,QAAL,CAAcF,IAAd,EAAoBC,KAApB,CAAd;AACA,UAAME,SAAS,GAAG,KAAKD,QAAL,CAAcF,IAAd,EAAoBC,KAAK,GAAG,CAA5B,CAAlB;AACAD,MAAAA,IAAI,CAACI,QAAL,GAAgB,KAAKC,YAAL,CAAkBT,KAAlB,CAAhB;AACAI,MAAAA,IAAI,CAACM,YAAL,GAAoB,KAAKD,YAAL,CAAkBF,SAAlB,CAApB;AACD;AANM;AAjDyB,CAArB,CAAf","sourcesContent":["// Styles\nimport \"../../../src/components/VExpansionPanel/VExpansionPanel.sass\"; // Components\n\nimport { BaseItemGroup } from '../VItemGroup/VItemGroup'; // Utilities\n\nimport { breaking } from '../../util/console';\n/* @vue/component */\n\nexport default BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n\n  provide() {\n    return {\n      expansionPanels: this\n    };\n  },\n\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean\n  },\n  computed: {\n    classes() {\n      return { ...BaseItemGroup.options.computed.classes.call(this),\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile\n      };\n    }\n\n  },\n\n  created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      breaking('expand', 'multiple', this);\n    }\n    /* istanbul ignore next */\n\n\n    if (Array.isArray(this.value) && this.value.length > 0 && typeof this.value[0] === 'boolean') {\n      breaking(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this);\n    }\n  },\n\n  methods: {\n    updateItem(item, index) {\n      const value = this.getValue(item, index);\n      const nextValue = this.getValue(item, index + 1);\n      item.isActive = this.toggleMethod(value);\n      item.nextIsActive = this.toggleMethod(nextValue);\n    }\n\n  }\n});\n//# sourceMappingURL=VExpansionPanels.js.map"]}]}