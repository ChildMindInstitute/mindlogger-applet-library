{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleTime.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleTime.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Time, Functions as fn } from 'dayspan';\nexport default {\n  name: 'dsScheduleTime',\n  props: {\n    value: {\n      required: true,\n      type: Time\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    },\n    index: {\n      type: Number,\n      default: function _default() {\n        return this.$dsDefaults().index;\n      }\n    },\n    mutate: {\n      type: Boolean,\n      default: function _default() {\n        return this.$dsDefaults().mutate;\n      }\n    },\n    showAdd: {\n      type: Boolean,\n      default: function _default() {\n        return this.$dsDefaults().showAdd;\n      }\n    },\n    showRemove: {\n      type: Boolean,\n      default: function _default() {\n        return this.$dsDefaults().showRemove;\n      }\n    },\n    labels: {\n      validate: function validate(x) {\n        return this.$dsValidate(x, 'labels');\n      },\n      default: function _default() {\n        return this.$dsDefaults().labels;\n      }\n    },\n    colors: {\n      validate: function validate(x) {\n        return this.$dsValidate(x, 'colors');\n      },\n      default: function _default() {\n        return this.$dsDefaults().colors;\n      }\n    },\n    icons: {\n      validate: function validate(x) {\n        return this.$dsValidate(x, 'icons');\n      },\n      default: function _default() {\n        return this.$dsDefaults().icons;\n      }\n    }\n  },\n  data: function data(vm) {\n    return {};\n  },\n  computed: {\n    time: {\n      get: function get() {\n        return this.value.format('HH:mm');\n      },\n      set: function set(time) {\n        this.setTime(time);\n      }\n    },\n    isReadOnly: function isReadOnly() {\n      return this.readOnly || this.$dayspan.readOnly;\n    }\n  },\n  methods: {\n    addTime: function addTime() {\n      this.$emit('add', this.getEvent('add'));\n    },\n    removeTime: function removeTime() {\n      this.$emit('remove', this.getEvent('remove'));\n    },\n    setTime: function setTime(time) {\n      var parsed = Time.parse(time);\n\n      if (parsed) {\n        var ev = this.getEvent('change', {\n          next: parsed\n        });\n        this.$emit('change', ev);\n\n        if (!ev.handled) {\n          if (ev.mutate) {\n            ev.time.set(ev.next);\n            parsed = ev.next;\n          }\n\n          this.$emit('input', parsed);\n        }\n      }\n    },\n    getEvent: function getEvent(type) {\n      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return fn.extend({\n        type: type,\n        time: this.value,\n        index: this.index,\n        mutate: this.mutate,\n        handled: false,\n        $vm: this,\n        $element: this.$el\n      }, extra);\n    }\n  }\n};",{"version":3,"sources":["ScheduleTime.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\r\n    <div class=\"ds-time-row\">\r\n\r\n        <div class=\"ds-time-cell\">\r\n\r\n            <v-text-field\r\n                    single-line hide-details solo flat\r\n                    type=\"time\"\r\n                    :readonly=\"isReadOnly\"\r\n                    v-model=\"time\"\r\n            ></v-text-field>\r\n\r\n        </div>\r\n\r\n        <div class=\"ds-time-cell\">\r\n\r\n            <v-tooltip bottom v-if=\"showRemove && !isReadOnly\">\r\n\r\n                <template v-slot:activator=\"{ on }\">\r\n                    <v-btn v-on=\"on\" icon\r\n                           class=\"action-remove\"\r\n                           :color=\"colors.remove\"\r\n                           @click=\"removeTime\">\r\n                        <v-icon>{{ icons.remove }}</v-icon>\r\n                    </v-btn>\r\n                </template>\r\n                <span v-html=\"labels.remove\"></span>\r\n\r\n            </v-tooltip>\r\n\r\n            <v-tooltip bottom v-if=\"showAdd && !isReadOnly\">\r\n\r\n                <template v-slot:activator=\"{ on }\">\r\n                    <v-btn v-on=\"on\" icon\r\n                           class=\"action-add\"\r\n                           :color=\"colors.add\"\r\n                           @click=\"addTime\">\r\n                        <v-icon>{{ icons.add }}</v-icon>\r\n                    </v-btn>\r\n                </template>\r\n                <span v-html=\"labels.add\"></span>\r\n\r\n            </v-tooltip>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { Time, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleTime',\r\n\r\n    props:\r\n        {\r\n            value:\r\n                {\r\n                    required: true,\r\n                    type: Time\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            index:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().index\r\n                    }\r\n                },\r\n\r\n            mutate:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().mutate\r\n                    }\r\n                },\r\n\r\n            showAdd:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().showAdd\r\n                    }\r\n                },\r\n\r\n            showRemove:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().showRemove\r\n                    }\r\n                },\r\n\r\n            labels:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'labels')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().labels\r\n                    }\r\n                },\r\n\r\n            colors:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'colors')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().colors\r\n                    }\r\n                },\r\n\r\n            icons:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'icons')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().icons\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: vm => ({}),\r\n\r\n    computed:\r\n        {\r\n            time:\r\n                {\r\n                    get () {\r\n                        return this.value.format('HH:mm')\r\n                    },\r\n                    set (time) {\r\n                        this.setTime(time)\r\n                    }\r\n                },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            addTime () {\r\n                this.$emit('add', this.getEvent('add'))\r\n            },\r\n\r\n            removeTime () {\r\n                this.$emit('remove', this.getEvent('remove'))\r\n            },\r\n\r\n            setTime (time) {\r\n                var parsed = Time.parse(time)\r\n\r\n                if (parsed) {\r\n                    var ev = this.getEvent('change', {next: parsed})\r\n\r\n                    this.$emit('change', ev)\r\n\r\n                    if (!ev.handled) {\r\n                        if (ev.mutate) {\r\n                            ev.time.set(ev.next)\r\n\r\n                            parsed = ev.next\r\n                        }\r\n\r\n                        this.$emit('input', parsed)\r\n                    }\r\n                }\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    time: this.value,\r\n                    index: this.index,\r\n                    mutate: this.mutate,\r\n                    handled: false,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n    .ds-time-row {\r\n        display: flex;\r\n\r\n        .ds-time-cell {\r\n            padding-right: 8px;\r\n            flex: 1 0 0px;\r\n            margin-bottom: 8px;\r\n\r\n            &:last-child {\r\n                margin-right: -8px;\r\n            }\r\n        }\r\n    }\r\n\r\n</style>\r\n"],"sourceRoot":"node_modules/dayspan-vuetify-2/src/components"}]}