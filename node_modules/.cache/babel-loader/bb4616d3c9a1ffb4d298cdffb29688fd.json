{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/mixins/binds-attrs/index.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/mixins/binds-attrs/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\n/**\n * This mixin provides `attrs$` and `listeners$` to work around\n * vue bug https://github.com/vuejs/vue/issues/10115\n */\n\nfunction makeWatcher(property) {\n  return function (val, oldVal) {\n    for (var attr in oldVal) {\n      if (!Object.prototype.hasOwnProperty.call(val, attr)) {\n        this.$delete(this.$data[property], attr);\n      }\n    }\n\n    for (var _attr in val) {\n      this.$set(this.$data[property], _attr, val[_attr]);\n    }\n  };\n}\n\nexport default Vue.extend({\n  data: function data() {\n    return {\n      attrs$: {},\n      listeners$: {}\n    };\n  },\n  created: function created() {\n    // Work around unwanted re-renders: https://github.com/vuejs/vue/issues/10115\n    // Make sure to use `attrs$` instead of `$attrs` (confusing right?)\n    this.$watch('$attrs', makeWatcher('attrs$'), {\n      immediate: true\n    });\n    this.$watch('$listeners', makeWatcher('listeners$'), {\n      immediate: true\n    });\n  }\n});",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/mixins/binds-attrs/index.js"],"names":["Vue","makeWatcher","property","val","oldVal","attr","Object","prototype","hasOwnProperty","call","$delete","$data","$set","extend","data","attrs$","listeners$","created","$watch","immediate"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA;;;;;AAKA,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,SAAO,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC5B,SAAK,IAAMC,IAAX,IAAmBD,MAAnB,EAA2B;AACzB,UAAI,CAACE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CE,IAA1C,CAAL,EAAsD;AACpD,aAAKK,OAAL,CAAa,KAAKC,KAAL,CAAWT,QAAX,CAAb,EAAmCG,IAAnC;AACD;AACF;;AAED,SAAK,IAAMA,KAAX,IAAmBF,GAAnB,EAAwB;AACtB,WAAKS,IAAL,CAAU,KAAKD,KAAL,CAAWT,QAAX,CAAV,EAAgCG,KAAhC,EAAsCF,GAAG,CAACE,KAAD,CAAzC;AACD;AACF,GAVD;AAWD;;AAED,eAAeL,GAAG,CAACa,MAAJ,CAAW;AACxBC,EAAAA,IAAI,EAAE;AAAA,WAAO;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,UAAU,EAAE;AAFD,KAAP;AAAA,GADkB;AAMxBC,EAAAA,OANwB,qBAMd;AACR;AACA;AACA,SAAKC,MAAL,CAAY,QAAZ,EAAsBjB,WAAW,CAAC,QAAD,CAAjC,EAA6C;AAC3CkB,MAAAA,SAAS,EAAE;AADgC,KAA7C;AAGA,SAAKD,MAAL,CAAY,YAAZ,EAA0BjB,WAAW,CAAC,YAAD,CAArC,EAAqD;AACnDkB,MAAAA,SAAS,EAAE;AADwC,KAArD;AAGD;AAfuB,CAAX,CAAf","sourcesContent":["import Vue from 'vue';\n/**\n * This mixin provides `attrs$` and `listeners$` to work around\n * vue bug https://github.com/vuejs/vue/issues/10115\n */\n\nfunction makeWatcher(property) {\n  return function (val, oldVal) {\n    for (const attr in oldVal) {\n      if (!Object.prototype.hasOwnProperty.call(val, attr)) {\n        this.$delete(this.$data[property], attr);\n      }\n    }\n\n    for (const attr in val) {\n      this.$set(this.$data[property], attr, val[attr]);\n    }\n  };\n}\n\nexport default Vue.extend({\n  data: () => ({\n    attrs$: {},\n    listeners$: {}\n  }),\n\n  created() {\n    // Work around unwanted re-renders: https://github.com/vuejs/vue/issues/10115\n    // Make sure to use `attrs$` instead of `$attrs` (confusing right?)\n    this.$watch('$attrs', makeWatcher('attrs$'), {\n      immediate: true\n    });\n    this.$watch('$listeners', makeWatcher('listeners$'), {\n      immediate: true\n    });\n  }\n\n});\n//# sourceMappingURL=index.js.map"]}]}