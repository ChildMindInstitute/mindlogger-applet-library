{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-intervals.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-intervals.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Mixins\nimport CalendarBase from \"./calendar-base\"; // Util\n\nimport props from \"../util/props\";\nimport { parseTime, copyTimestamp, updateMinutes, createDayList, createIntervalList, createNativeLocaleFormatter } from \"../util/timestamp\";\n/* @vue/component */\n\nexport default CalendarBase.extend({\n  name: 'calendar-with-intervals',\n  props: props.intervals,\n  computed: {\n    parsedFirstInterval: function parsedFirstInterval() {\n      return parseInt(this.firstInterval);\n    },\n    parsedIntervalMinutes: function parsedIntervalMinutes() {\n      return parseInt(this.intervalMinutes);\n    },\n    parsedIntervalCount: function parsedIntervalCount() {\n      return parseInt(this.intervalCount);\n    },\n    parsedIntervalHeight: function parsedIntervalHeight() {\n      return parseFloat(this.intervalHeight);\n    },\n    firstMinute: function firstMinute() {\n      return this.parsedFirstInterval * this.parsedIntervalMinutes;\n    },\n    bodyHeight: function bodyHeight() {\n      return this.parsedIntervalCount * this.parsedIntervalHeight;\n    },\n    days: function days() {\n      return createDayList(this.parsedStart, this.parsedEnd, this.times.today, this.weekdaySkips, this.maxDays);\n    },\n    intervals: function intervals() {\n      var days = this.days;\n      var first = this.parsedFirstInterval;\n      var minutes = this.parsedIntervalMinutes;\n      var count = this.parsedIntervalCount;\n      var now = this.times.now;\n      return days.map(function (d) {\n        return createIntervalList(d, first, minutes, count, now);\n      });\n    },\n    intervalFormatter: function intervalFormatter() {\n      if (this.intervalFormat) {\n        return this.intervalFormat;\n      }\n\n      var longOptions = {\n        timeZone: 'UTC',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      var shortOptions = {\n        timeZone: 'UTC',\n        hour: 'numeric',\n        minute: '2-digit'\n      };\n      var shortHourOptions = {\n        timeZone: 'UTC',\n        hour: 'numeric'\n      };\n      return createNativeLocaleFormatter(this.currentLocale, function (tms, short) {\n        return short ? tms.minute === 0 ? shortHourOptions : shortOptions : longOptions;\n      });\n    }\n  },\n  methods: {\n    showIntervalLabelDefault: function showIntervalLabelDefault(interval) {\n      var first = this.intervals[0][0];\n      var isFirst = first.hour === interval.hour && first.minute === interval.minute;\n      return !isFirst;\n    },\n    intervalStyleDefault: function intervalStyleDefault(_interval) {\n      return undefined;\n    },\n    getTimestampAtEvent: function getTimestampAtEvent(e, day) {\n      var timestamp = copyTimestamp(day);\n      var bounds = e.currentTarget.getBoundingClientRect();\n      var baseMinutes = this.firstMinute;\n      var touchEvent = e;\n      var mouseEvent = e;\n      var touches = touchEvent.changedTouches || touchEvent.touches;\n      var clientY = touches && touches[0] ? touches[0].clientY : mouseEvent.clientY;\n      var addIntervals = (clientY - bounds.top) / this.parsedIntervalHeight;\n      var addMinutes = Math.floor(addIntervals * this.parsedIntervalMinutes);\n      var minutes = baseMinutes + addMinutes;\n      return updateMinutes(timestamp, minutes, this.times.now);\n    },\n    getSlotScope: function getSlotScope(timestamp) {\n      var scope = copyTimestamp(timestamp);\n      scope.timeToY = this.timeToY;\n      scope.minutesToPixels = this.minutesToPixels;\n      scope.week = this.days;\n      return scope;\n    },\n    scrollToTime: function scrollToTime(time) {\n      var y = this.timeToY(time);\n      var pane = this.$refs.scrollArea;\n\n      if (y === false || !pane) {\n        return false;\n      }\n\n      pane.scrollTop = y;\n      return true;\n    },\n    minutesToPixels: function minutesToPixels(minutes) {\n      return minutes / this.parsedIntervalMinutes * this.parsedIntervalHeight;\n    },\n    timeToY: function timeToY(time) {\n      var clamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var minutes = parseTime(time);\n\n      if (minutes === false) {\n        return false;\n      }\n\n      var min = this.firstMinute;\n      var gap = this.parsedIntervalCount * this.parsedIntervalMinutes;\n      var delta = (minutes - min) / gap;\n      var y = delta * this.bodyHeight;\n\n      if (clamp) {\n        if (y < 0) {\n          y = 0;\n        }\n\n        if (y > this.bodyHeight) {\n          y = this.bodyHeight;\n        }\n      }\n\n      return y;\n    }\n  }\n});",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-intervals.js"],"names":["CalendarBase","props","parseTime","copyTimestamp","updateMinutes","createDayList","createIntervalList","createNativeLocaleFormatter","extend","name","intervals","computed","parsedFirstInterval","parseInt","firstInterval","parsedIntervalMinutes","intervalMinutes","parsedIntervalCount","intervalCount","parsedIntervalHeight","parseFloat","intervalHeight","firstMinute","bodyHeight","days","parsedStart","parsedEnd","times","today","weekdaySkips","maxDays","first","minutes","count","now","map","d","intervalFormatter","intervalFormat","longOptions","timeZone","hour","minute","shortOptions","shortHourOptions","currentLocale","tms","short","methods","showIntervalLabelDefault","interval","isFirst","intervalStyleDefault","_interval","undefined","getTimestampAtEvent","e","day","timestamp","bounds","currentTarget","getBoundingClientRect","baseMinutes","touchEvent","mouseEvent","touches","changedTouches","clientY","addIntervals","top","addMinutes","Math","floor","getSlotScope","scope","timeToY","minutesToPixels","week","scrollToTime","time","y","pane","$refs","scrollArea","scrollTop","clamp","min","gap","delta"],"mappings":"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","sourcesContent":["// Mixins\nimport CalendarBase from './calendar-base'; // Util\n\nimport props from '../util/props';\nimport { parseTime, copyTimestamp, updateMinutes, createDayList, createIntervalList, createNativeLocaleFormatter } from '../util/timestamp';\n/* @vue/component */\n\nexport default CalendarBase.extend({\n  name: 'calendar-with-intervals',\n  props: props.intervals,\n  computed: {\n    parsedFirstInterval() {\n      return parseInt(this.firstInterval);\n    },\n\n    parsedIntervalMinutes() {\n      return parseInt(this.intervalMinutes);\n    },\n\n    parsedIntervalCount() {\n      return parseInt(this.intervalCount);\n    },\n\n    parsedIntervalHeight() {\n      return parseFloat(this.intervalHeight);\n    },\n\n    firstMinute() {\n      return this.parsedFirstInterval * this.parsedIntervalMinutes;\n    },\n\n    bodyHeight() {\n      return this.parsedIntervalCount * this.parsedIntervalHeight;\n    },\n\n    days() {\n      return createDayList(this.parsedStart, this.parsedEnd, this.times.today, this.weekdaySkips, this.maxDays);\n    },\n\n    intervals() {\n      const days = this.days;\n      const first = this.parsedFirstInterval;\n      const minutes = this.parsedIntervalMinutes;\n      const count = this.parsedIntervalCount;\n      const now = this.times.now;\n      return days.map(d => createIntervalList(d, first, minutes, count, now));\n    },\n\n    intervalFormatter() {\n      if (this.intervalFormat) {\n        return this.intervalFormat;\n      }\n\n      const longOptions = {\n        timeZone: 'UTC',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      const shortOptions = {\n        timeZone: 'UTC',\n        hour: 'numeric',\n        minute: '2-digit'\n      };\n      const shortHourOptions = {\n        timeZone: 'UTC',\n        hour: 'numeric'\n      };\n      return createNativeLocaleFormatter(this.currentLocale, (tms, short) => short ? tms.minute === 0 ? shortHourOptions : shortOptions : longOptions);\n    }\n\n  },\n  methods: {\n    showIntervalLabelDefault(interval) {\n      const first = this.intervals[0][0];\n      const isFirst = first.hour === interval.hour && first.minute === interval.minute;\n      return !isFirst;\n    },\n\n    intervalStyleDefault(_interval) {\n      return undefined;\n    },\n\n    getTimestampAtEvent(e, day) {\n      const timestamp = copyTimestamp(day);\n      const bounds = e.currentTarget.getBoundingClientRect();\n      const baseMinutes = this.firstMinute;\n      const touchEvent = e;\n      const mouseEvent = e;\n      const touches = touchEvent.changedTouches || touchEvent.touches;\n      const clientY = touches && touches[0] ? touches[0].clientY : mouseEvent.clientY;\n      const addIntervals = (clientY - bounds.top) / this.parsedIntervalHeight;\n      const addMinutes = Math.floor(addIntervals * this.parsedIntervalMinutes);\n      const minutes = baseMinutes + addMinutes;\n      return updateMinutes(timestamp, minutes, this.times.now);\n    },\n\n    getSlotScope(timestamp) {\n      const scope = copyTimestamp(timestamp);\n      scope.timeToY = this.timeToY;\n      scope.minutesToPixels = this.minutesToPixels;\n      scope.week = this.days;\n      return scope;\n    },\n\n    scrollToTime(time) {\n      const y = this.timeToY(time);\n      const pane = this.$refs.scrollArea;\n\n      if (y === false || !pane) {\n        return false;\n      }\n\n      pane.scrollTop = y;\n      return true;\n    },\n\n    minutesToPixels(minutes) {\n      return minutes / this.parsedIntervalMinutes * this.parsedIntervalHeight;\n    },\n\n    timeToY(time, clamp = true) {\n      const minutes = parseTime(time);\n\n      if (minutes === false) {\n        return false;\n      }\n\n      const min = this.firstMinute;\n      const gap = this.parsedIntervalCount * this.parsedIntervalMinutes;\n      const delta = (minutes - min) / gap;\n      let y = delta * this.bodyHeight;\n\n      if (clamp) {\n        if (y < 0) {\n          y = 0;\n        }\n\n        if (y > this.bodyHeight) {\n          y = this.bodyHeight;\n        }\n      }\n\n      return y;\n    }\n\n  }\n});\n//# sourceMappingURL=calendar-with-intervals.js.map"]}]}