{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleTimes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleTimes.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Time, Schedule, Functions as fn } from 'dayspan';\nexport default {\n  name: 'dsScheduleTimes',\n  props: {\n    schedule: {\n      required: true,\n      type: Schedule\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    },\n    labels: {\n      validate: function validate(x) {\n        return this.$dsValidate(x, 'labels');\n      },\n      default: function _default() {\n        return this.$dsDefaults().labels;\n      }\n    },\n    defaultTime: {\n      type: String,\n      default: function _default() {\n        return this.$dsDefaults().defaultTime;\n      }\n    }\n  },\n  computed: {\n    durationOptions: function durationOptions() {\n      var singular = this.schedule.duration === 1;\n      var duringDay = [{\n        text: singular ? this.labels.minute : this.labels.minutes,\n        value: 'minutes'\n      }, {\n        text: singular ? this.labels.hour : this.labels.hours,\n        value: 'hours'\n      }];\n      var allDay = [{\n        text: singular ? this.labels.day : this.labels.days,\n        value: 'days'\n      }, {\n        text: singular ? this.labels.week : this.labels.weeks,\n        value: 'weeks'\n      }, {\n        text: singular ? this.labels.month : this.labels.months,\n        value: 'months'\n      }];\n      return this.allDay ? allDay : duringDay.concat(allDay);\n    },\n    hasTimes: function hasTimes() {\n      return this.schedule.times.length > 1;\n    },\n    isReadOnly: function isReadOnly() {\n      return this.readOnly || this.$dayspan.readOnly;\n    }\n  },\n  data: function data(vm) {\n    return {\n      allDay: false\n    };\n  },\n  watch: {\n    schedule: {\n      handler: 'updateAllDay',\n      immediate: true\n    },\n    allDay: 'updateScheduleAllDay'\n  },\n  methods: {\n    updateAllDay: function updateAllDay() {\n      this.allDay = this.schedule.isFullDay();\n    },\n    updateScheduleAllDay: function updateScheduleAllDay(allDay) {\n      var _this = this;\n\n      if (this.schedule.isFullDay() !== allDay) {\n        this.$dayspan.getPermission('toggleAllDay', function (prompted) {\n          _this.schedule.setFullDay(allDay);\n\n          _this.triggerChange();\n        }, function () {\n          _this.allDay = !allDay;\n        });\n      }\n    },\n    changeTime: function changeTime(ev) {\n      ev.schedule = this.schedule;\n      ev.updated = false;\n      this.$emit('update', ev);\n\n      if (!ev.handled && ev.schedule) {\n        ev.updated = ev.schedule.moveTime(ev.time, ev.next);\n        ev.handled = true;\n      }\n\n      this.$emit('change', ev);\n    },\n    addTime: function addTime(ev) {\n      ev.time = Time.parse(this.defaultTime);\n      ev.schedule = this.schedule;\n\n      if (ev.time) {\n        this.$emit('add', ev);\n\n        if (!ev.handled && ev.schedule) {\n          ev.schedule.times.push(ev.time);\n          ev.handled = true;\n        }\n\n        this.$emit('change', ev);\n      }\n    },\n    removeTime: function removeTime(ev) {\n      var _this2 = this;\n\n      this.$dayspan.getPermission('removeExistingTime', function () {\n        ev.schedule = _this2.schedule;\n\n        _this2.$emit('remove', ev);\n\n        if (!ev.handled && ev.schedule && ev.time) {\n          ev.handled = ev.schedule.removeTime(ev.time);\n        }\n\n        _this2.$emit('change', ev);\n      });\n    },\n    isLastTime: function isLastTime(index) {\n      return index === this.schedule.times.length - 1;\n    },\n    triggerChange: function triggerChange() {\n      this.$emit('change', this.getEvent('change'));\n    },\n    getEvent: function getEvent(type) {\n      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return fn.extend({\n        type: type,\n        schedule: this.schedule,\n        handled: false,\n        $vm: this,\n        $element: this.$el\n      }, extra);\n    }\n  }\n};",{"version":3,"sources":["ScheduleTimes.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"ds-schedule-times\">\r\n\r\n        <div class=\"ds-time-row\">\r\n\r\n            <div class=\"ds-time-cell\">\r\n\r\n                <v-checkbox\r\n                        ref=\"allDayCheckbox\"\r\n                        hide-details\r\n                        class=\"ma-2\"\r\n                        :label=\"labels.all\"\r\n                        :readonly=\"isReadOnly\"\r\n                        v-model=\"allDay\"\r\n                ></v-checkbox>\r\n\r\n            </div>\r\n\r\n            <div class=\"ds-time-cell\">\r\n\r\n                <v-text-field\r\n                        single-line hide-details solo flat\r\n                        type=\"number\"\r\n                        v-model.number=\"schedule.duration\"\r\n                        :disabled=\"isReadOnly\"\r\n                        @input=\"triggerChange\"\r\n                ></v-text-field>\r\n\r\n            </div>\r\n\r\n            <div class=\"ds-time-cell\">\r\n\r\n                <v-select\r\n                        single-line hide-details solo flat\r\n                        :items=\"durationOptions\"\r\n                        v-model=\"schedule.durationUnit\"\r\n                        :disabled=\"isReadOnly\"\r\n                        @input=\"triggerChange\"\r\n                ></v-select>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div v-if=\"!allDay\">\r\n\r\n            <div class=\"ds-time-row\" v-for=\"(time, index) in schedule.times\">\r\n\r\n                <div class=\"ds-time-cell\"></div>\r\n\r\n                <ds-schedule-time\r\n                        class=\"ds-time-cell double\"\r\n                        :index=\"index\"\r\n                        :show-add=\"isLastTime( index )\"\r\n                        :show-remove=\"hasTimes\"\r\n                        :value=\"schedule.times[ index ]\"\r\n                        :key=\"index\"\r\n                        :read-only=\"readOnly\"\r\n                        @add=\"addTime\"\r\n                        @remove=\"removeTime\"\r\n                        @change=\"changeTime\"\r\n                ></ds-schedule-time>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { Time, Schedule, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleTimes',\r\n\r\n    props:\r\n        {\r\n            schedule:\r\n                {\r\n                    required: true,\r\n                    type: Schedule\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            labels:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'labels')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().labels\r\n                    }\r\n                },\r\n\r\n            defaultTime:\r\n                {\r\n                    type: String,\r\n                    default () {\r\n                        return this.$dsDefaults().defaultTime\r\n                    }\r\n                }\r\n        },\r\n\r\n    computed:\r\n        {\r\n            durationOptions () {\r\n                var singular = this.schedule.duration === 1\r\n\r\n                var duringDay = [\r\n                    {text: singular ? this.labels.minute : this.labels.minutes, value: 'minutes'},\r\n                    {text: singular ? this.labels.hour : this.labels.hours, value: 'hours'}\r\n                ]\r\n                var allDay = [\r\n                    {text: singular ? this.labels.day : this.labels.days, value: 'days'},\r\n                    {text: singular ? this.labels.week : this.labels.weeks, value: 'weeks'},\r\n                    {text: singular ? this.labels.month : this.labels.months, value: 'months'}\r\n                ]\r\n\r\n                return this.allDay ? allDay : duringDay.concat(allDay)\r\n            },\r\n\r\n            hasTimes () {\r\n                return this.schedule.times.length > 1\r\n            },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    data: vm => ({\r\n        allDay: false\r\n    }),\r\n\r\n    watch:\r\n        {\r\n            schedule: {\r\n                handler: 'updateAllDay',\r\n                immediate: true\r\n            },\r\n            allDay: 'updateScheduleAllDay'\r\n        },\r\n\r\n    methods:\r\n        {\r\n            updateAllDay () {\r\n                this.allDay = this.schedule.isFullDay()\r\n            },\r\n\r\n            updateScheduleAllDay (allDay) {\r\n                if (this.schedule.isFullDay() !== allDay) {\r\n                    this.$dayspan.getPermission('toggleAllDay',\r\n                        (prompted) => {\r\n                            this.schedule.setFullDay(allDay)\r\n                            this.triggerChange()\r\n                        },\r\n                        () => {\r\n                            this.allDay = !allDay\r\n                        }\r\n                    )\r\n                }\r\n            },\r\n\r\n            changeTime (ev) {\r\n                ev.schedule = this.schedule\r\n                ev.updated = false\r\n\r\n                this.$emit('update', ev)\r\n\r\n                if (!ev.handled && ev.schedule) {\r\n                    ev.updated = ev.schedule.moveTime(ev.time, ev.next)\r\n                    ev.handled = true\r\n                }\r\n\r\n                this.$emit('change', ev)\r\n            },\r\n\r\n            addTime (ev) {\r\n                ev.time = Time.parse(this.defaultTime)\r\n                ev.schedule = this.schedule\r\n\r\n                if (ev.time) {\r\n                    this.$emit('add', ev)\r\n\r\n                    if (!ev.handled && ev.schedule) {\r\n                        ev.schedule.times.push(ev.time)\r\n                        ev.handled = true\r\n                    }\r\n\r\n                    this.$emit('change', ev)\r\n                }\r\n            },\r\n\r\n            removeTime (ev) {\r\n                this.$dayspan.getPermission('removeExistingTime', () => {\r\n                    ev.schedule = this.schedule\r\n\r\n                    this.$emit('remove', ev)\r\n\r\n                    if (!ev.handled && ev.schedule && ev.time) {\r\n                        ev.handled = ev.schedule.removeTime(ev.time)\r\n                    }\r\n\r\n                    this.$emit('change', ev)\r\n                })\r\n            },\r\n\r\n            isLastTime (index) {\r\n                return index === this.schedule.times.length - 1\r\n            },\r\n\r\n            triggerChange () {\r\n                this.$emit('change', this.getEvent('change'))\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    schedule: this.schedule,\r\n                    handled: false,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n    .ds-schedule-times {\r\n        max-width: 436px;\r\n\r\n        .ds-time-row {\r\n            display: flex;\r\n\r\n            .ds-time-cell {\r\n                padding-right: 8px;\r\n                flex: 1 0 0px;\r\n\r\n                &.double {\r\n                    padding-right: 16px;\r\n                    flex: 2 0 0px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n</style>\r\n"],"sourceRoot":"node_modules/dayspan-vuetify-2/src/components"}]}