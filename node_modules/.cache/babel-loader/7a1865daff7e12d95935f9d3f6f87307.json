{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleType.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Day, Schedule, Pattern, Patterns } from 'dayspan';\nexport default {\n  name: 'dsScheduleType',\n  props: {\n    day: {\n      required: true,\n      type: Day\n    },\n    schedule: {\n      required: true,\n      type: Schedule\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    },\n    formats: {\n      validate: function validate(x) {\n        return this.$dsValidate(x, 'formats');\n      },\n      default: function _default() {\n        return this.$dsDefaults().formats;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      type: ''\n    };\n  },\n  watch: {\n    schedule: {\n      handler: 'updateType',\n      immediate: true\n    },\n    type: 'applyType'\n  },\n  computed: {\n    hideHint: function hideHint() {\n      return this.type !== 'none' && this.type !== 'custom';\n    },\n    typeHint: function typeHint() {\n      if (this.type === 'none') {\n        return this.day.format(this.formats.date);\n      }\n\n      if (this.type === 'custom') {\n        return this.$dayspan.getScheduleDescription(this.schedule);\n      }\n\n      return '';\n    },\n    types: function types() {\n      var _this = this;\n\n      if (!this.day) {\n        return [];\n      }\n\n      return Patterns.filter(function (pattern) {\n        return pattern.listed;\n      }).map(function (pattern) {\n        return {\n          label: pattern.describe(_this.day),\n          value: pattern.name\n        };\n      });\n    },\n    customIcon: function customIcon() {\n      return this.type === 'custom' ? 'edit' : '';\n    },\n    isReadOnly: function isReadOnly() {\n      return this.readOnly || this.$dayspan.readOnly;\n    }\n  },\n  methods: {\n    applyType: function applyType(newType, oldType) {\n      if (this.applying) {\n        if (oldType === 'custom') {\n          this.schedule.end = null;\n        }\n\n        if (newType) {\n          var pattern = Pattern.withName(newType);\n\n          if (pattern) {\n            pattern.apply(this.schedule, this.day);\n          }\n        }\n\n        if (newType === 'none') {\n          this.schedule.adjustDefinedSpan();\n        }\n      }\n\n      this.$emit('change', newType);\n    },\n    custom: function custom() {\n      this.$emit('custom', this);\n    },\n    updateType: function updateType() {\n      this.applying = false;\n      this.type = this.determineType();\n      this.applying = true;\n    },\n    determineType: function determineType() {\n      var pattern = Pattern.findMatch(this.schedule);\n      return pattern ? pattern.name : 'custom';\n    }\n  }\n};",{"version":3,"sources":["ScheduleType.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\r\n    <v-select single-line solo flat persistent-hint\r\n              :items=\"types\"\r\n              :hint=\"typeHint\"\r\n              :hide-details=\"hideHint\"\r\n              :append-outer-icon=\"customIcon\"\r\n              :disabled=\"isReadOnly\"\r\n              v-model=\"type\"\r\n              item-text=\"label\"\r\n              item-value=\"value\"\r\n              @click:append-outer=\"custom\"\r\n    ></v-select>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { Day, Schedule, Pattern, Patterns } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleType',\r\n\r\n    props:\r\n        {\r\n            day:\r\n                {\r\n                    required: true,\r\n                    type: Day\r\n                },\r\n\r\n            schedule:\r\n                {\r\n                    required: true,\r\n                    type: Schedule\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            formats:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'formats')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().formats\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: () => ({\r\n        type: ''\r\n    }),\r\n\r\n    watch:\r\n        {\r\n            schedule:\r\n                {\r\n                    handler: 'updateType',\r\n                    immediate: true\r\n                },\r\n\r\n            type: 'applyType'\r\n        },\r\n\r\n    computed:\r\n        {\r\n            hideHint () {\r\n                return this.type !== 'none' && this.type !== 'custom'\r\n            },\r\n\r\n            typeHint () {\r\n                if (this.type === 'none') {\r\n                    return this.day.format(this.formats.date)\r\n                }\r\n\r\n                if (this.type === 'custom') {\r\n                    return this.$dayspan.getScheduleDescription(this.schedule)\r\n                }\r\n\r\n                return ''\r\n            },\r\n\r\n            types () {\r\n                if (!this.day) {\r\n                    return []\r\n                }\r\n\r\n                return Patterns\r\n                .filter((pattern) => pattern.listed)\r\n                .map((pattern) => ({\r\n                    label: pattern.describe(this.day),\r\n                    value: pattern.name\r\n                }))\r\n\r\n            },\r\n\r\n            customIcon () {\r\n                return this.type === 'custom' ? 'edit' : ''\r\n            },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            applyType (newType, oldType) {\r\n                if (this.applying) {\r\n                    if (oldType === 'custom') {\r\n                        this.schedule.end = null\r\n                    }\r\n\r\n                    if (newType) {\r\n                        var pattern = Pattern.withName(newType)\r\n\r\n                        if (pattern) {\r\n                            pattern.apply(this.schedule, this.day)\r\n                        }\r\n                    }\r\n\r\n                    if (newType === 'none') {\r\n                        this.schedule.adjustDefinedSpan()\r\n                    }\r\n                }\r\n\r\n                this.$emit('change', newType)\r\n            },\r\n\r\n            custom () {\r\n                this.$emit('custom', this)\r\n            },\r\n\r\n            updateType () {\r\n                this.applying = false\r\n                this.type = this.determineType()\r\n                this.applying = true\r\n            },\r\n\r\n            determineType () {\r\n                var pattern = Pattern.findMatch(this.schedule)\r\n\r\n                return pattern ? pattern.name : 'custom'\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n    .v-input__icon--append-outer {\r\n        color: black;\r\n    }\r\n\r\n</style>\r\n"],"sourceRoot":"node_modules/dayspan-vuetify-2/src/components"}]}