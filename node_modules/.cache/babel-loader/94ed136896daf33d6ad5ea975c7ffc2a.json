{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/services/theme/index.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/services/theme/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport _classCallCheck from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\n\n/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from \"../service\"; // Utilities\n\nimport * as ThemeUtils from \"./utils\"; // Types\n\nimport Vue from 'vue';\nexport var Theme =\n/*#__PURE__*/\nfunction (_Service) {\n  _inherits(Theme, _Service);\n\n  function Theme(preset) {\n    var _this;\n\n    _classCallCheck(this, Theme);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Theme).call(this));\n    _this.disabled = false;\n    _this.isDark = null;\n    _this.vueInstance = null;\n    _this.vueMeta = null;\n    var _preset$Theme$propert = preset[Theme.property],\n        dark = _preset$Theme$propert.dark,\n        disable = _preset$Theme$propert.disable,\n        options = _preset$Theme$propert.options,\n        themes = _preset$Theme$propert.themes;\n    _this.dark = Boolean(dark);\n    _this.defaults = _this.themes = themes;\n    _this.options = options;\n\n    if (disable) {\n      _this.disabled = true;\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this.themes = {\n      dark: _this.fillVariant(themes.dark, true),\n      light: _this.fillVariant(themes.light, false)\n    };\n    return _this;\n  } // When setting css, check for element\n  // and apply new values\n\n\n  _createClass(Theme, [{\n    key: \"applyTheme\",\n    // Apply current theme default\n    // only called on client side\n    value: function applyTheme() {\n      if (this.disabled) return this.clearCss();\n      this.css = this.generatedStyles;\n    }\n  }, {\n    key: \"clearCss\",\n    value: function clearCss() {\n      this.css = '';\n    } // Initialize theme for SSR and SPA\n    // Attach to ssrContext head or\n    // apply new theme to document\n\n  }, {\n    key: \"init\",\n    value: function init(root, ssrContext) {\n      if (this.disabled) return;\n      /* istanbul ignore else */\n\n      if (root.$meta) {\n        this.initVueMeta(root);\n      } else if (ssrContext) {\n        this.initSSR(ssrContext);\n      }\n\n      this.initTheme();\n    } // Allows for you to set target theme\n\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(theme, value) {\n      this.themes[theme] = Object.assign(this.themes[theme], value);\n      this.applyTheme();\n    } // Reset theme defaults\n\n  }, {\n    key: \"resetThemes\",\n    value: function resetThemes() {\n      this.themes.light = Object.assign({}, this.defaults.light);\n      this.themes.dark = Object.assign({}, this.defaults.dark);\n      this.applyTheme();\n    } // Check for existence of style element\n\n  }, {\n    key: \"checkOrCreateStyleElement\",\n    value: function checkOrCreateStyleElement() {\n      this.styleEl = document.getElementById('vuetify-theme-stylesheet');\n      /* istanbul ignore next */\n\n      if (this.styleEl) return true;\n      this.genStyleElement(); // If doesn't have it, create it\n\n      return Boolean(this.styleEl);\n    }\n  }, {\n    key: \"fillVariant\",\n    value: function fillVariant() {\n      var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var dark = arguments.length > 1 ? arguments[1] : undefined;\n      var defaultTheme = this.themes[dark ? 'dark' : 'light'];\n      return Object.assign({}, defaultTheme, theme);\n    } // Generate the style element\n    // if applicable\n\n  }, {\n    key: \"genStyleElement\",\n    value: function genStyleElement() {\n      /* istanbul ignore if */\n      if (typeof document === 'undefined') return;\n      /* istanbul ignore next */\n\n      var options = this.options || {};\n      this.styleEl = document.createElement('style');\n      this.styleEl.type = 'text/css';\n      this.styleEl.id = 'vuetify-theme-stylesheet';\n\n      if (options.cspNonce) {\n        this.styleEl.setAttribute('nonce', options.cspNonce);\n      }\n\n      document.head.appendChild(this.styleEl);\n    }\n  }, {\n    key: \"initVueMeta\",\n    value: function initVueMeta(root) {\n      var _this2 = this;\n\n      this.vueMeta = root.$meta();\n\n      if (this.isVueMeta23) {\n        // vue-meta needs to apply after mounted()\n        root.$nextTick(function () {\n          _this2.applyVueMeta23();\n        });\n        return;\n      }\n\n      var metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo';\n      var metaInfo = root.$options[metaKeyName] || {};\n\n      root.$options[metaKeyName] = function () {\n        metaInfo.style = metaInfo.style || [];\n        var vuetifyStylesheet = metaInfo.style.find(function (s) {\n          return s.id === 'vuetify-theme-stylesheet';\n        });\n\n        if (!vuetifyStylesheet) {\n          metaInfo.style.push({\n            cssText: _this2.generatedStyles,\n            type: 'text/css',\n            id: 'vuetify-theme-stylesheet',\n            nonce: (_this2.options || {}).cspNonce\n          });\n        } else {\n          vuetifyStylesheet.cssText = _this2.generatedStyles;\n        }\n\n        return metaInfo;\n      };\n    }\n  }, {\n    key: \"applyVueMeta23\",\n    value: function applyVueMeta23() {\n      var _this$vueMeta$addApp = this.vueMeta.addApp('vuetify'),\n          set = _this$vueMeta$addApp.set;\n\n      set({\n        style: [{\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: (this.options || {}).cspNonce\n        }]\n      });\n    }\n  }, {\n    key: \"initSSR\",\n    value: function initSSR(ssrContext) {\n      var options = this.options || {}; // SSR\n\n      var nonce = options.cspNonce ? \" nonce=\\\"\".concat(options.cspNonce, \"\\\"\") : '';\n      ssrContext.head = ssrContext.head || '';\n      ssrContext.head += \"<style type=\\\"text/css\\\" id=\\\"vuetify-theme-stylesheet\\\"\".concat(nonce, \">\").concat(this.generatedStyles, \"</style>\");\n    }\n  }, {\n    key: \"initTheme\",\n    value: function initTheme() {\n      var _this3 = this;\n\n      // Only watch for reactivity on client side\n      if (typeof document === 'undefined') return; // If we get here somehow, ensure\n      // existing instance is removed\n\n      if (this.vueInstance) this.vueInstance.$destroy(); // Use Vue instance to track reactivity\n      // TODO: Update to use RFC if merged\n      // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n\n      this.vueInstance = new Vue({\n        data: {\n          themes: this.themes\n        },\n        watch: {\n          themes: {\n            immediate: true,\n            deep: true,\n            handler: function handler() {\n              return _this3.applyTheme();\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"css\",\n    set: function set(val) {\n      if (this.vueMeta) {\n        if (this.isVueMeta23) {\n          this.applyVueMeta23();\n        }\n\n        return;\n      }\n\n      this.checkOrCreateStyleElement() && (this.styleEl.innerHTML = val);\n    }\n  }, {\n    key: \"dark\",\n    set: function set(val) {\n      var oldDark = this.isDark;\n      this.isDark = val; // Only apply theme after dark\n      // has already been set before\n\n      oldDark != null && this.applyTheme();\n    },\n    get: function get() {\n      return Boolean(this.isDark);\n    }\n  }, {\n    key: \"currentTheme\",\n    get: function get() {\n      var target = this.dark ? 'dark' : 'light';\n      return this.themes[target];\n    }\n  }, {\n    key: \"generatedStyles\",\n    get: function get() {\n      var theme = this.parsedTheme;\n      /* istanbul ignore next */\n\n      var options = this.options || {};\n      var css;\n\n      if (options.themeCache != null) {\n        css = options.themeCache.get(theme);\n        /* istanbul ignore if */\n\n        if (css != null) return css;\n      }\n\n      css = ThemeUtils.genStyles(theme, options.customProperties);\n\n      if (options.minifyTheme != null) {\n        css = options.minifyTheme(css);\n      }\n\n      if (options.themeCache != null) {\n        options.themeCache.set(theme, css);\n      }\n\n      return css;\n    }\n  }, {\n    key: \"parsedTheme\",\n    get: function get() {\n      /* istanbul ignore next */\n      var theme = this.currentTheme || {};\n      return ThemeUtils.parse(theme);\n    } // Is using v2.3 of vue-meta\n    // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n\n  }, {\n    key: \"isVueMeta23\",\n    get: function get() {\n      return typeof this.vueMeta.addApp === 'function';\n    }\n  }]);\n\n  return Theme;\n}(Service);\nTheme.property = 'theme';",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/services/theme/index.js"],"names":["Service","ThemeUtils","Vue","Theme","preset","disabled","isDark","vueInstance","vueMeta","property","dark","disable","options","themes","Boolean","defaults","fillVariant","light","clearCss","css","generatedStyles","root","ssrContext","$meta","initVueMeta","initSSR","initTheme","theme","value","Object","assign","applyTheme","styleEl","document","getElementById","genStyleElement","defaultTheme","createElement","type","id","cspNonce","setAttribute","head","appendChild","isVueMeta23","$nextTick","applyVueMeta23","metaKeyName","getOptions","keyName","metaInfo","$options","style","vuetifyStylesheet","find","s","push","cssText","nonce","addApp","set","$destroy","data","watch","immediate","deep","handler","val","checkOrCreateStyleElement","innerHTML","oldDark","target","parsedTheme","themeCache","get","genStyles","customProperties","minifyTheme","currentTheme","parse"],"mappings":";;;;;;;AAAA;AACA;AACA,SAASA,OAAT,qB,CAAsC;;AAEtC,OAAO,KAAKC,UAAZ,gB,CAAuC;;AAEvC,OAAOC,GAAP,MAAgB,KAAhB;AACA,WAAaC,KAAb;AAAA;AAAA;AAAA;;AACE,iBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB;AACA,UAAKC,QAAL,GAAgB,KAAhB;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,WAAL,GAAmB,IAAnB;AACA,UAAKC,OAAL,GAAe,IAAf;AALkB,gCAWdJ,MAAM,CAACD,KAAK,CAACM,QAAP,CAXQ;AAAA,QAOhBC,IAPgB,yBAOhBA,IAPgB;AAAA,QAQhBC,OARgB,yBAQhBA,OARgB;AAAA,QAShBC,OATgB,yBAShBA,OATgB;AAAA,QAUhBC,MAVgB,yBAUhBA,MAVgB;AAYlB,UAAKH,IAAL,GAAYI,OAAO,CAACJ,IAAD,CAAnB;AACA,UAAKK,QAAL,GAAgB,MAAKF,MAAL,GAAcA,MAA9B;AACA,UAAKD,OAAL,GAAeA,OAAf;;AAEA,QAAID,OAAJ,EAAa;AACX,YAAKN,QAAL,GAAgB,IAAhB;AACA;AACD;;AAED,UAAKQ,MAAL,GAAc;AACZH,MAAAA,IAAI,EAAE,MAAKM,WAAL,CAAiBH,MAAM,CAACH,IAAxB,EAA8B,IAA9B,CADM;AAEZO,MAAAA,KAAK,EAAE,MAAKD,WAAL,CAAiBH,MAAM,CAACI,KAAxB,EAA+B,KAA/B;AAFK,KAAd;AArBkB;AAyBnB,GA1BH,CA0BI;AACF;;;AA3BF;AAAA;AAoDI;AACF;AArDF,iCAwDe;AACX,UAAI,KAAKZ,QAAT,EAAmB,OAAO,KAAKa,QAAL,EAAP;AACnB,WAAKC,GAAL,GAAW,KAAKC,eAAhB;AACD;AA3DH;AAAA;AAAA,+BA6Da;AACT,WAAKD,GAAL,GAAW,EAAX;AACD,KA/DH,CA+DI;AACF;AACA;;AAjEF;AAAA;AAAA,yBAoEOE,IApEP,EAoEaC,UApEb,EAoEyB;AACrB,UAAI,KAAKjB,QAAT,EAAmB;AACnB;;AAEA,UAAIgB,IAAI,CAACE,KAAT,EAAgB;AACd,aAAKC,WAAL,CAAiBH,IAAjB;AACD,OAFD,MAEO,IAAIC,UAAJ,EAAgB;AACrB,aAAKG,OAAL,CAAaH,UAAb;AACD;;AAED,WAAKI,SAAL;AACD,KA/EH,CA+EI;;AA/EJ;AAAA;AAAA,6BAkFWC,KAlFX,EAkFkBC,KAlFlB,EAkFyB;AACrB,WAAKf,MAAL,CAAYc,KAAZ,IAAqBE,MAAM,CAACC,MAAP,CAAc,KAAKjB,MAAL,CAAYc,KAAZ,CAAd,EAAkCC,KAAlC,CAArB;AACA,WAAKG,UAAL;AACD,KArFH,CAqFI;;AArFJ;AAAA;AAAA,kCAwFgB;AACZ,WAAKlB,MAAL,CAAYI,KAAZ,GAAoBY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKf,QAAL,CAAcE,KAAhC,CAApB;AACA,WAAKJ,MAAL,CAAYH,IAAZ,GAAmBmB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKf,QAAL,CAAcL,IAAhC,CAAnB;AACA,WAAKqB,UAAL;AACD,KA5FH,CA4FI;;AA5FJ;AAAA;AAAA,gDA+F8B;AAC1B,WAAKC,OAAL,GAAeC,QAAQ,CAACC,cAAT,CAAwB,0BAAxB,CAAf;AACA;;AAEA,UAAI,KAAKF,OAAT,EAAkB,OAAO,IAAP;AAClB,WAAKG,eAAL,GAL0B,CAKF;;AAExB,aAAOrB,OAAO,CAAC,KAAKkB,OAAN,CAAd;AACD;AAvGH;AAAA;AAAA,kCAyGgC;AAAA,UAAlBL,KAAkB,uEAAV,EAAU;AAAA,UAANjB,IAAM;AAC5B,UAAM0B,YAAY,GAAG,KAAKvB,MAAL,CAAYH,IAAI,GAAG,MAAH,GAAY,OAA5B,CAArB;AACA,aAAOmB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBM,YAAlB,EAAgCT,KAAhC,CAAP;AACD,KA5GH,CA4GI;AACF;;AA7GF;AAAA;AAAA,sCAgHoB;AAChB;AACA,UAAI,OAAOM,QAAP,KAAoB,WAAxB,EAAqC;AACrC;;AAEA,UAAMrB,OAAO,GAAG,KAAKA,OAAL,IAAgB,EAAhC;AACA,WAAKoB,OAAL,GAAeC,QAAQ,CAACI,aAAT,CAAuB,OAAvB,CAAf;AACA,WAAKL,OAAL,CAAaM,IAAb,GAAoB,UAApB;AACA,WAAKN,OAAL,CAAaO,EAAb,GAAkB,0BAAlB;;AAEA,UAAI3B,OAAO,CAAC4B,QAAZ,EAAsB;AACpB,aAAKR,OAAL,CAAaS,YAAb,CAA0B,OAA1B,EAAmC7B,OAAO,CAAC4B,QAA3C;AACD;;AAEDP,MAAAA,QAAQ,CAACS,IAAT,CAAcC,WAAd,CAA0B,KAAKX,OAA/B;AACD;AA/HH;AAAA;AAAA,gCAiIcX,IAjId,EAiIoB;AAAA;;AAChB,WAAKb,OAAL,GAAea,IAAI,CAACE,KAAL,EAAf;;AAEA,UAAI,KAAKqB,WAAT,EAAsB;AACpB;AACAvB,QAAAA,IAAI,CAACwB,SAAL,CAAe,YAAM;AACnB,UAAA,MAAI,CAACC,cAAL;AACD,SAFD;AAGA;AACD;;AAED,UAAMC,WAAW,GAAG,OAAO,KAAKvC,OAAL,CAAawC,UAApB,KAAmC,UAAnC,GAAgD,KAAKxC,OAAL,CAAawC,UAAb,GAA0BC,OAA1E,GAAoF,UAAxG;AACA,UAAMC,QAAQ,GAAG7B,IAAI,CAAC8B,QAAL,CAAcJ,WAAd,KAA8B,EAA/C;;AAEA1B,MAAAA,IAAI,CAAC8B,QAAL,CAAcJ,WAAd,IAA6B,YAAM;AACjCG,QAAAA,QAAQ,CAACE,KAAT,GAAiBF,QAAQ,CAACE,KAAT,IAAkB,EAAnC;AACA,YAAMC,iBAAiB,GAAGH,QAAQ,CAACE,KAAT,CAAeE,IAAf,CAAoB,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAAChB,EAAF,KAAS,0BAAb;AAAA,SAArB,CAA1B;;AAEA,YAAI,CAACc,iBAAL,EAAwB;AACtBH,UAAAA,QAAQ,CAACE,KAAT,CAAeI,IAAf,CAAoB;AAClBC,YAAAA,OAAO,EAAE,MAAI,CAACrC,eADI;AAElBkB,YAAAA,IAAI,EAAE,UAFY;AAGlBC,YAAAA,EAAE,EAAE,0BAHc;AAIlBmB,YAAAA,KAAK,EAAE,CAAC,MAAI,CAAC9C,OAAL,IAAgB,EAAjB,EAAqB4B;AAJV,WAApB;AAMD,SAPD,MAOO;AACLa,UAAAA,iBAAiB,CAACI,OAAlB,GAA4B,MAAI,CAACrC,eAAjC;AACD;;AAED,eAAO8B,QAAP;AACD,OAhBD;AAiBD;AAhKH;AAAA;AAAA,qCAkKmB;AAAA,iCAGX,KAAK1C,OAAL,CAAamD,MAAb,CAAoB,SAApB,CAHW;AAAA,UAEbC,GAFa,wBAEbA,GAFa;;AAIfA,MAAAA,GAAG,CAAC;AACFR,QAAAA,KAAK,EAAE,CAAC;AACNK,UAAAA,OAAO,EAAE,KAAKrC,eADR;AAENkB,UAAAA,IAAI,EAAE,UAFA;AAGNC,UAAAA,EAAE,EAAE,0BAHE;AAINmB,UAAAA,KAAK,EAAE,CAAC,KAAK9C,OAAL,IAAgB,EAAjB,EAAqB4B;AAJtB,SAAD;AADL,OAAD,CAAH;AAQD;AA9KH;AAAA;AAAA,4BAgLUlB,UAhLV,EAgLsB;AAClB,UAAMV,OAAO,GAAG,KAAKA,OAAL,IAAgB,EAAhC,CADkB,CACkB;;AAEpC,UAAM8C,KAAK,GAAG9C,OAAO,CAAC4B,QAAR,sBAA8B5B,OAAO,CAAC4B,QAAtC,UAAoD,EAAlE;AACAlB,MAAAA,UAAU,CAACoB,IAAX,GAAkBpB,UAAU,CAACoB,IAAX,IAAmB,EAArC;AACApB,MAAAA,UAAU,CAACoB,IAAX,sEAA0EgB,KAA1E,cAAmF,KAAKtC,eAAxF;AACD;AAtLH;AAAA;AAAA,gCAwLc;AAAA;;AACV;AACA,UAAI,OAAOa,QAAP,KAAoB,WAAxB,EAAqC,OAF3B,CAEmC;AAC7C;;AAEA,UAAI,KAAK1B,WAAT,EAAsB,KAAKA,WAAL,CAAiBsD,QAAjB,GALZ,CAKyC;AACnD;AACA;;AAEA,WAAKtD,WAAL,GAAmB,IAAIL,GAAJ,CAAQ;AACzB4D,QAAAA,IAAI,EAAE;AACJjD,UAAAA,MAAM,EAAE,KAAKA;AADT,SADmB;AAIzBkD,QAAAA,KAAK,EAAE;AACLlD,UAAAA,MAAM,EAAE;AACNmD,YAAAA,SAAS,EAAE,IADL;AAENC,YAAAA,IAAI,EAAE,IAFA;AAGNC,YAAAA,OAAO,EAAE;AAAA,qBAAM,MAAI,CAACnC,UAAL,EAAN;AAAA;AAHH;AADH;AAJkB,OAAR,CAAnB;AAYD;AA7MH;AAAA;AAAA,sBA8BUoC,GA9BV,EA8Be;AACX,UAAI,KAAK3D,OAAT,EAAkB;AAChB,YAAI,KAAKoC,WAAT,EAAsB;AACpB,eAAKE,cAAL;AACD;;AAED;AACD;;AAED,WAAKsB,yBAAL,OAAqC,KAAKpC,OAAL,CAAaqC,SAAb,GAAyBF,GAA9D;AACD;AAxCH;AAAA;AAAA,sBA0CWA,GA1CX,EA0CgB;AACZ,UAAMG,OAAO,GAAG,KAAKhE,MAArB;AACA,WAAKA,MAAL,GAAc6D,GAAd,CAFY,CAEO;AACnB;;AAEAG,MAAAA,OAAO,IAAI,IAAX,IAAmB,KAAKvC,UAAL,EAAnB;AACD,KAhDH;AAAA,wBAkDa;AACT,aAAOjB,OAAO,CAAC,KAAKR,MAAN,CAAd;AACD;AApDH;AAAA;AAAA,wBA+MqB;AACjB,UAAMiE,MAAM,GAAG,KAAK7D,IAAL,GAAY,MAAZ,GAAqB,OAApC;AACA,aAAO,KAAKG,MAAL,CAAY0D,MAAZ,CAAP;AACD;AAlNH;AAAA;AAAA,wBAoNwB;AACpB,UAAM5C,KAAK,GAAG,KAAK6C,WAAnB;AACA;;AAEA,UAAM5D,OAAO,GAAG,KAAKA,OAAL,IAAgB,EAAhC;AACA,UAAIO,GAAJ;;AAEA,UAAIP,OAAO,CAAC6D,UAAR,IAAsB,IAA1B,EAAgC;AAC9BtD,QAAAA,GAAG,GAAGP,OAAO,CAAC6D,UAAR,CAAmBC,GAAnB,CAAuB/C,KAAvB,CAAN;AACA;;AAEA,YAAIR,GAAG,IAAI,IAAX,EAAiB,OAAOA,GAAP;AAClB;;AAEDA,MAAAA,GAAG,GAAGlB,UAAU,CAAC0E,SAAX,CAAqBhD,KAArB,EAA4Bf,OAAO,CAACgE,gBAApC,CAAN;;AAEA,UAAIhE,OAAO,CAACiE,WAAR,IAAuB,IAA3B,EAAiC;AAC/B1D,QAAAA,GAAG,GAAGP,OAAO,CAACiE,WAAR,CAAoB1D,GAApB,CAAN;AACD;;AAED,UAAIP,OAAO,CAAC6D,UAAR,IAAsB,IAA1B,EAAgC;AAC9B7D,QAAAA,OAAO,CAAC6D,UAAR,CAAmBb,GAAnB,CAAuBjC,KAAvB,EAA8BR,GAA9B;AACD;;AAED,aAAOA,GAAP;AACD;AA7OH;AAAA;AAAA,wBA+OoB;AAChB;AACA,UAAMQ,KAAK,GAAG,KAAKmD,YAAL,IAAqB,EAAnC;AACA,aAAO7E,UAAU,CAAC8E,KAAX,CAAiBpD,KAAjB,CAAP;AACD,KAnPH,CAmPI;AACF;;AApPF;AAAA;AAAA,wBAuPoB;AAChB,aAAO,OAAO,KAAKnB,OAAL,CAAamD,MAApB,KAA+B,UAAtC;AACD;AAzPH;;AAAA;AAAA,EAA2B3D,OAA3B;AA4PAG,KAAK,CAACM,QAAN,GAAiB,OAAjB","sourcesContent":["/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from '../service'; // Utilities\n\nimport * as ThemeUtils from './utils'; // Types\n\nimport Vue from 'vue';\nexport class Theme extends Service {\n  constructor(preset) {\n    super();\n    this.disabled = false;\n    this.isDark = null;\n    this.vueInstance = null;\n    this.vueMeta = null;\n    const {\n      dark,\n      disable,\n      options,\n      themes\n    } = preset[Theme.property];\n    this.dark = Boolean(dark);\n    this.defaults = this.themes = themes;\n    this.options = options;\n\n    if (disable) {\n      this.disabled = true;\n      return;\n    }\n\n    this.themes = {\n      dark: this.fillVariant(themes.dark, true),\n      light: this.fillVariant(themes.light, false)\n    };\n  } // When setting css, check for element\n  // and apply new values\n\n\n  set css(val) {\n    if (this.vueMeta) {\n      if (this.isVueMeta23) {\n        this.applyVueMeta23();\n      }\n\n      return;\n    }\n\n    this.checkOrCreateStyleElement() && (this.styleEl.innerHTML = val);\n  }\n\n  set dark(val) {\n    const oldDark = this.isDark;\n    this.isDark = val; // Only apply theme after dark\n    // has already been set before\n\n    oldDark != null && this.applyTheme();\n  }\n\n  get dark() {\n    return Boolean(this.isDark);\n  } // Apply current theme default\n  // only called on client side\n\n\n  applyTheme() {\n    if (this.disabled) return this.clearCss();\n    this.css = this.generatedStyles;\n  }\n\n  clearCss() {\n    this.css = '';\n  } // Initialize theme for SSR and SPA\n  // Attach to ssrContext head or\n  // apply new theme to document\n\n\n  init(root, ssrContext) {\n    if (this.disabled) return;\n    /* istanbul ignore else */\n\n    if (root.$meta) {\n      this.initVueMeta(root);\n    } else if (ssrContext) {\n      this.initSSR(ssrContext);\n    }\n\n    this.initTheme();\n  } // Allows for you to set target theme\n\n\n  setTheme(theme, value) {\n    this.themes[theme] = Object.assign(this.themes[theme], value);\n    this.applyTheme();\n  } // Reset theme defaults\n\n\n  resetThemes() {\n    this.themes.light = Object.assign({}, this.defaults.light);\n    this.themes.dark = Object.assign({}, this.defaults.dark);\n    this.applyTheme();\n  } // Check for existence of style element\n\n\n  checkOrCreateStyleElement() {\n    this.styleEl = document.getElementById('vuetify-theme-stylesheet');\n    /* istanbul ignore next */\n\n    if (this.styleEl) return true;\n    this.genStyleElement(); // If doesn't have it, create it\n\n    return Boolean(this.styleEl);\n  }\n\n  fillVariant(theme = {}, dark) {\n    const defaultTheme = this.themes[dark ? 'dark' : 'light'];\n    return Object.assign({}, defaultTheme, theme);\n  } // Generate the style element\n  // if applicable\n\n\n  genStyleElement() {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') return;\n    /* istanbul ignore next */\n\n    const options = this.options || {};\n    this.styleEl = document.createElement('style');\n    this.styleEl.type = 'text/css';\n    this.styleEl.id = 'vuetify-theme-stylesheet';\n\n    if (options.cspNonce) {\n      this.styleEl.setAttribute('nonce', options.cspNonce);\n    }\n\n    document.head.appendChild(this.styleEl);\n  }\n\n  initVueMeta(root) {\n    this.vueMeta = root.$meta();\n\n    if (this.isVueMeta23) {\n      // vue-meta needs to apply after mounted()\n      root.$nextTick(() => {\n        this.applyVueMeta23();\n      });\n      return;\n    }\n\n    const metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo';\n    const metaInfo = root.$options[metaKeyName] || {};\n\n    root.$options[metaKeyName] = () => {\n      metaInfo.style = metaInfo.style || [];\n      const vuetifyStylesheet = metaInfo.style.find(s => s.id === 'vuetify-theme-stylesheet');\n\n      if (!vuetifyStylesheet) {\n        metaInfo.style.push({\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: (this.options || {}).cspNonce\n        });\n      } else {\n        vuetifyStylesheet.cssText = this.generatedStyles;\n      }\n\n      return metaInfo;\n    };\n  }\n\n  applyVueMeta23() {\n    const {\n      set\n    } = this.vueMeta.addApp('vuetify');\n    set({\n      style: [{\n        cssText: this.generatedStyles,\n        type: 'text/css',\n        id: 'vuetify-theme-stylesheet',\n        nonce: (this.options || {}).cspNonce\n      }]\n    });\n  }\n\n  initSSR(ssrContext) {\n    const options = this.options || {}; // SSR\n\n    const nonce = options.cspNonce ? ` nonce=\"${options.cspNonce}\"` : '';\n    ssrContext.head = ssrContext.head || '';\n    ssrContext.head += `<style type=\"text/css\" id=\"vuetify-theme-stylesheet\"${nonce}>${this.generatedStyles}</style>`;\n  }\n\n  initTheme() {\n    // Only watch for reactivity on client side\n    if (typeof document === 'undefined') return; // If we get here somehow, ensure\n    // existing instance is removed\n\n    if (this.vueInstance) this.vueInstance.$destroy(); // Use Vue instance to track reactivity\n    // TODO: Update to use RFC if merged\n    // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n\n    this.vueInstance = new Vue({\n      data: {\n        themes: this.themes\n      },\n      watch: {\n        themes: {\n          immediate: true,\n          deep: true,\n          handler: () => this.applyTheme()\n        }\n      }\n    });\n  }\n\n  get currentTheme() {\n    const target = this.dark ? 'dark' : 'light';\n    return this.themes[target];\n  }\n\n  get generatedStyles() {\n    const theme = this.parsedTheme;\n    /* istanbul ignore next */\n\n    const options = this.options || {};\n    let css;\n\n    if (options.themeCache != null) {\n      css = options.themeCache.get(theme);\n      /* istanbul ignore if */\n\n      if (css != null) return css;\n    }\n\n    css = ThemeUtils.genStyles(theme, options.customProperties);\n\n    if (options.minifyTheme != null) {\n      css = options.minifyTheme(css);\n    }\n\n    if (options.themeCache != null) {\n      options.themeCache.set(theme, css);\n    }\n\n    return css;\n  }\n\n  get parsedTheme() {\n    /* istanbul ignore next */\n    const theme = this.currentTheme || {};\n    return ThemeUtils.parse(theme);\n  } // Is using v2.3 of vue-meta\n  // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n\n\n  get isVueMeta23() {\n    return typeof this.vueMeta.addApp === 'function';\n  }\n\n}\nTheme.property = 'theme';\n//# sourceMappingURL=index.js.map"]}]}