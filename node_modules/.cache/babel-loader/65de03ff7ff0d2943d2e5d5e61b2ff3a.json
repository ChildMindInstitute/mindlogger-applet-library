{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleForecast.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/ScheduleForecast.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Day, Schedule, Functions as fn } from 'dayspan';\nexport default {\n  name: 'dsScheduleForecast',\n  props: {\n    schedule: {\n      required: true,\n      type: Schedule\n    },\n    day: {\n      type: Day\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    },\n    canExclude: {\n      type: Boolean,\n      default: function _default() {\n        return this.$dsDefaults().canExclude;\n      }\n    },\n    hasDescription: {\n      type: Boolean,\n      default: function _default() {\n        return this.$dsDefaults().hasDescription;\n      }\n    },\n    defaultSize: {\n      type: Number,\n      default: function _default() {\n        return this.$dsDefaults().defaultSize;\n      }\n    },\n    sizeMax: {\n      type: Number,\n      default: function _default() {\n        return this.$dsDefaults().sizeMax;\n      }\n    },\n    labels: {\n      validate: function validate(x) {\n        return this.$dsValidate(x, 'labels');\n      },\n      default: function _default() {\n        return this.$dsDefaults().labels;\n      }\n    }\n  },\n  data: function data(vm) {\n    return {\n      size: vm.defaultSize\n    };\n  },\n  computed: {\n    sizeInput: {\n      get: function get() {\n        return this.size;\n      },\n      set: function set(value) {\n        this.size = Math.max(1, Math.min(Math.floor(value), this.sizeMax));\n      }\n    },\n    aroundDay: function aroundDay() {\n      return this.day || this.$dayspan.today;\n    },\n    forecast: function forecast() {\n      return this.schedule.forecast(this.aroundDay, false, this.size).map(function (spanDayId) {\n        return spanDayId[1];\n      }).list();\n    },\n    isReadOnly: function isReadOnly() {\n      return this.readOnly || this.$dayspan.readOnly;\n    }\n  },\n  watch: {\n    forecast: {\n      handler: 'triggerChange',\n      immediate: true\n    }\n  },\n  methods: {\n    triggerChange: function triggerChange() {\n      this.$emit('change', this.getEvent('change'));\n    },\n    exclude: function exclude(time) {\n      var ev = this.getEvent('exclude', {\n        time: time\n      });\n\n      if (!ev.handled && ev.schedule) {\n        ev.schedule.setExcluded(ev.time);\n        ev.handled = true;\n      }\n    },\n    getEvent: function getEvent(type) {\n      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return fn.extend({\n        type: type,\n        schedule: this.schedule,\n        size: this.size,\n        forecast: this.forecast,\n        day: this.day,\n        aroundDay: this.aroundDay,\n        handled: false,\n        $vm: this,\n        $element: this.$el\n      }, extra);\n    }\n  }\n};",{"version":3,"sources":["ScheduleForecast.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAAA,GAAA,EAAA,QAAA,EAAA,SAAA,IAAA,EAAA,QAAA,SAAA;AAEA,eAAA;AAEA,EAAA,IAAA,EAAA,oBAFA;AAIA,EAAA,KAAA,EACA;AACA,IAAA,QAAA,EACA;AACA,MAAA,QAAA,EAAA,IADA;AAEA,MAAA,IAAA,EAAA;AAFA,KAFA;AAOA,IAAA,GAAA,EACA;AACA,MAAA,IAAA,EAAA;AADA,KARA;AAYA,IAAA,QAAA,EACA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAbA;AAkBA,IAAA,UAAA,EACA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,KAAA,WAAA,GAAA,UAAA;AACA;AAJA,KAnBA;AA0BA,IAAA,cAAA,EACA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,KAAA,WAAA,GAAA,cAAA;AACA;AAJA,KA3BA;AAkCA,IAAA,WAAA,EACA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,KAAA,WAAA,GAAA,WAAA;AACA;AAJA,KAnCA;AA0CA,IAAA,OAAA,EACA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,KAAA,WAAA,GAAA,OAAA;AACA;AAJA,KA3CA;AAkDA,IAAA,MAAA,EACA;AACA,MAAA,QADA,oBACA,CADA,EACA;AACA,eAAA,KAAA,WAAA,CAAA,CAAA,EAAA,QAAA,CAAA;AACA,OAHA;AAIA,MAAA,OAJA,sBAIA;AACA,eAAA,KAAA,WAAA,GAAA,MAAA;AACA;AANA;AAnDA,GALA;AAkEA,EAAA,IAAA,EAAA,cAAA,EAAA;AAAA,WAAA;AACA,MAAA,IAAA,EAAA,EAAA,CAAA;AADA,KAAA;AAAA,GAlEA;AAsEA,EAAA,QAAA,EACA;AACA,IAAA,SAAA,EACA;AACA,MAAA,GADA,iBACA;AACA,eAAA,KAAA,IAAA;AACA,OAHA;AAKA,MAAA,GALA,eAKA,KALA,EAKA;AACA,aAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,OAAA,CAAA,CAAA;AACA;AAPA,KAFA;AAYA,IAAA,SAZA,uBAYA;AACA,aAAA,KAAA,GAAA,IAAA,KAAA,QAAA,CAAA,KAAA;AACA,KAdA;AAgBA,IAAA,QAhBA,sBAgBA;AACA,aAAA,KAAA,QAAA,CAAA,QAAA,CAAA,KAAA,SAAA,EAAA,KAAA,EAAA,KAAA,IAAA,EACA,GADA,CACA,UAAA,SAAA,EAAA;AACA,eAAA,SAAA,CAAA,CAAA,CAAA;AACA,OAHA,EAIA,IAJA,EAAA;AAMA,KAvBA;AAyBA,IAAA,UAzBA,wBAyBA;AACA,aAAA,KAAA,QAAA,IAAA,KAAA,QAAA,CAAA,QAAA;AACA;AA3BA,GAvEA;AAqGA,EAAA,KAAA,EACA;AACA,IAAA,QAAA,EACA;AACA,MAAA,OAAA,EAAA,eADA;AAEA,MAAA,SAAA,EAAA;AAFA;AAFA,GAtGA;AA8GA,EAAA,OAAA,EACA;AACA,IAAA,aADA,2BACA;AACA,WAAA,KAAA,CAAA,QAAA,EAAA,KAAA,QAAA,CAAA,QAAA,CAAA;AACA,KAHA;AAKA,IAAA,OALA,mBAKA,IALA,EAKA;AACA,UAAA,EAAA,GAAA,KAAA,QAAA,CAAA,SAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA,CAAA;;AAEA,UAAA,CAAA,EAAA,CAAA,OAAA,IAAA,EAAA,CAAA,QAAA,EAAA;AACA,QAAA,EAAA,CAAA,QAAA,CAAA,WAAA,CAAA,EAAA,CAAA,IAAA;AACA,QAAA,EAAA,CAAA,OAAA,GAAA,IAAA;AACA;AACA,KAZA;AAcA,IAAA,QAdA,oBAcA,IAdA,EAcA;AAAA,UAAA,KAAA,uEAAA,EAAA;AACA,aAAA,EAAA,CAAA,MAAA,CAAA;AAEA,QAAA,IAAA,EAAA,IAFA;AAGA,QAAA,QAAA,EAAA,KAAA,QAHA;AAIA,QAAA,IAAA,EAAA,KAAA,IAJA;AAKA,QAAA,QAAA,EAAA,KAAA,QALA;AAMA,QAAA,GAAA,EAAA,KAAA,GANA;AAOA,QAAA,SAAA,EAAA,KAAA,SAPA;AAQA,QAAA,OAAA,EAAA,KARA;AASA,QAAA,GAAA,EAAA,IATA;AAUA,QAAA,QAAA,EAAA,KAAA;AAVA,OAAA,EAYA,KAZA,CAAA;AAaA;AA5BA;AA/GA,CAAA","sourcesContent":["<template>\r\n    <div>\r\n\r\n        <div class=\"pb-3\" v-if=\"hasDescription\">\r\n\r\n            <span v-html=\"labels.prefix\"></span>\r\n\r\n            <v-text-field\r\n                    type=\"number\"\r\n                    class=\"ds-textfield inline small\"\r\n                    single-line\r\n                    hide-details\r\n                    v-model.number=\"sizeInput\"\r\n            ></v-text-field>\r\n\r\n            <span v-html=\"labels.suffix\"></span>\r\n\r\n        </div>\r\n\r\n        <template v-for=\"time in forecast\">\r\n\r\n            <ds-calendar-event-chip\r\n                    :key=\"time.time\"\r\n                    :day=\"aroundDay\"\r\n                    :time=\"time\"\r\n                    :can-exclude=\"canExclude && !isReadOnly\"\r\n                    @exclude=\"exclude\"\r\n            ></ds-calendar-event-chip>\r\n\r\n        </template>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { Day, Schedule, Functions as fn } from 'dayspan'\r\n\r\nexport default {\r\n\r\n    name: 'dsScheduleForecast',\r\n\r\n    props:\r\n        {\r\n            schedule:\r\n                {\r\n                    required: true,\r\n                    type: Schedule\r\n                },\r\n\r\n            day:\r\n                {\r\n                    type: Day\r\n                },\r\n\r\n            readOnly:\r\n                {\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n\r\n            canExclude:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().canExclude\r\n                    }\r\n                },\r\n\r\n            hasDescription:\r\n                {\r\n                    type: Boolean,\r\n                    default () {\r\n                        return this.$dsDefaults().hasDescription\r\n                    }\r\n                },\r\n\r\n            defaultSize:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().defaultSize\r\n                    }\r\n                },\r\n\r\n            sizeMax:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().sizeMax\r\n                    }\r\n                },\r\n\r\n            labels:\r\n                {\r\n                    validate (x) {\r\n                        return this.$dsValidate(x, 'labels')\r\n                    },\r\n                    default () {\r\n                        return this.$dsDefaults().labels\r\n                    }\r\n                }\r\n        },\r\n\r\n    data: vm => ({\r\n        size: vm.defaultSize\r\n    }),\r\n\r\n    computed:\r\n        {\r\n            sizeInput:\r\n                {\r\n                    get () {\r\n                        return this.size\r\n                    },\r\n\r\n                    set (value) {\r\n                        this.size = Math.max(1, Math.min(Math.floor(value), this.sizeMax))\r\n                    }\r\n                },\r\n\r\n            aroundDay () {\r\n                return this.day || this.$dayspan.today\r\n            },\r\n\r\n            forecast () {\r\n                return this.schedule.forecast(this.aroundDay, false, this.size)\r\n                .map(function (spanDayId) {\r\n                    return spanDayId[1]\r\n                })\r\n                .list()\r\n\r\n            },\r\n\r\n            isReadOnly () {\r\n                return this.readOnly || this.$dayspan.readOnly\r\n            }\r\n        },\r\n\r\n    watch:\r\n        {\r\n            forecast:\r\n                {\r\n                    handler: 'triggerChange',\r\n                    immediate: true\r\n                }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            triggerChange () {\r\n                this.$emit('change', this.getEvent('change'))\r\n            },\r\n\r\n            exclude (time) {\r\n                var ev = this.getEvent('exclude', {time})\r\n\r\n                if (!ev.handled && ev.schedule) {\r\n                    ev.schedule.setExcluded(ev.time)\r\n                    ev.handled = true\r\n                }\r\n            },\r\n\r\n            getEvent (type, extra = {}) {\r\n                return fn.extend({\r\n\r\n                    type: type,\r\n                    schedule: this.schedule,\r\n                    size: this.size,\r\n                    forecast: this.forecast,\r\n                    day: this.day,\r\n                    aroundDay: this.aroundDay,\r\n                    handled: false,\r\n                    $vm: this,\r\n                    $element: this.$el\r\n\r\n                }, extra)\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>\r\n"],"sourceRoot":"node_modules/dayspan-vuetify-2/src/components"}]}