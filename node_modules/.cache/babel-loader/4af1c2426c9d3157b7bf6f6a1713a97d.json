{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VTreeview/VTreeview.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VTreeview/VTreeview.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _slicedToArray from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport _toConsumableArray from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport _defineProperty from \"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Styles\nimport \"../../../src/components/VTreeview/VTreeview.sass\"; // Components\n\nimport VTreeviewNode, { VTreeviewNodeProps } from \"./VTreeviewNode\"; // Mixins\n\nimport Themeable from \"../../mixins/themeable\";\nimport { provide as RegistrableProvide } from \"../../mixins/registrable\"; // Utils\n\nimport { arrayDiff, deepEqual, getObjectValueByPath } from \"../../util/helpers\";\nimport mixins from \"../../util/mixins\";\nimport { consoleWarn } from \"../../util/console\";\nimport { filterTreeItems, filterTreeItem } from \"./util/filterTreeItems\";\nexport default mixins(RegistrableProvide('treeview'), Themeable\n/* @vue/component */\n).extend({\n  name: 'v-treeview',\n  provide: function provide() {\n    return {\n      treeview: this\n    };\n  },\n  props: _objectSpread({\n    active: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    dense: Boolean,\n    filter: Function,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false\n    },\n    search: String,\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  }, VTreeviewNodeProps),\n  data: function data() {\n    return {\n      level: -1,\n      activeCache: new Set(),\n      nodes: {},\n      openCache: new Set(),\n      selectedCache: new Set()\n    };\n  },\n  computed: {\n    excludedItems: function excludedItems() {\n      var excluded = new Set();\n      if (!this.search) return excluded;\n\n      for (var i = 0; i < this.items.length; i++) {\n        filterTreeItems(this.filter || filterTreeItem, this.items[i], this.search, this.itemKey, this.itemText, this.itemChildren, excluded);\n      }\n\n      return excluded;\n    }\n  },\n  watch: {\n    items: {\n      handler: function handler() {\n        var _this = this;\n\n        var oldKeys = Object.keys(this.nodes).map(function (k) {\n          return getObjectValueByPath(_this.nodes[k].item, _this.itemKey);\n        });\n        var newKeys = this.getKeys(this.items);\n        var diff = arrayDiff(newKeys, oldKeys); // We only want to do stuff if items have changed\n\n        if (!diff.length && newKeys.length < oldKeys.length) return; // If nodes are removed we need to clear them from this.nodes\n\n        diff.forEach(function (k) {\n          return delete _this.nodes[k];\n        });\n\n        var oldSelectedCache = _toConsumableArray(this.selectedCache);\n\n        this.selectedCache = new Set();\n        this.activeCache = new Set();\n        this.openCache = new Set();\n        this.buildTree(this.items); // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n\n        if (!deepEqual(oldSelectedCache, _toConsumableArray(this.selectedCache))) this.emitSelected();\n      },\n      deep: true\n    },\n    active: function active(value) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive);\n    },\n    value: function value(_value) {\n      this.handleNodeCacheWatcher(_value, this.selectedCache, this.updateSelected, this.emitSelected);\n    },\n    open: function open(value) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen);\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    var getValue = function getValue(key) {\n      return _this2.returnObject ? getObjectValueByPath(key, _this2.itemKey) : key;\n    };\n\n    this.buildTree(this.items);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this.value.map(getValue)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var value = _step.value;\n        this.updateSelected(value, true, true);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = this.active.map(getValue)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var active = _step2.value;\n        this.updateActive(active, true);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this);\n    }\n\n    if (this.openAll) {\n      this.updateAll(true);\n    } else {\n      this.open.forEach(function (key) {\n        return _this3.updateOpen(_this3.returnObject ? getObjectValueByPath(key, _this3.itemKey) : key, true);\n      });\n      this.emitOpen();\n    }\n  },\n  methods: {\n    /** @public */\n    updateAll: function updateAll(value) {\n      var _this4 = this;\n\n      Object.keys(this.nodes).forEach(function (key) {\n        return _this4.updateOpen(getObjectValueByPath(_this4.nodes[key].item, _this4.itemKey), value);\n      });\n      this.emitOpen();\n    },\n    getKeys: function getKeys(items) {\n      var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      for (var i = 0; i < items.length; i++) {\n        var key = getObjectValueByPath(items[i], this.itemKey);\n        keys.push(key);\n        var children = getObjectValueByPath(items[i], this.itemChildren);\n\n        if (children) {\n          keys.push.apply(keys, _toConsumableArray(this.getKeys(children)));\n        }\n      }\n\n      return keys;\n    },\n    buildTree: function buildTree(items) {\n      var _this5 = this;\n\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var key = getObjectValueByPath(item, this.itemKey);\n        var children = getObjectValueByPath(item, this.itemChildren, []);\n        var oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false,\n          isIndeterminate: false,\n          isActive: false,\n          isOpen: false,\n          vnode: null\n        };\n        var node = {\n          vnode: oldNode.vnode,\n          parent: parent,\n          children: children.map(function (c) {\n            return getObjectValueByPath(c, _this5.itemKey);\n          }),\n          item: item\n        };\n        this.buildTree(children, key); // This fixed bug with dynamic children resetting selected parent state\n\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected;\n        } else {\n          node.isSelected = oldNode.isSelected;\n          node.isIndeterminate = oldNode.isIndeterminate;\n        }\n\n        node.isActive = oldNode.isActive;\n        node.isOpen = oldNode.isOpen;\n        this.nodes[key] = node;\n\n        if (children.length) {\n          var _this$calculateState = this.calculateState(key, this.nodes),\n              isSelected = _this$calculateState.isSelected,\n              isIndeterminate = _this$calculateState.isIndeterminate;\n\n          node.isSelected = isSelected;\n          node.isIndeterminate = isIndeterminate;\n        } // Don't forget to rebuild cache\n\n\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key);\n        if (this.nodes[key].isActive) this.activeCache.add(key);\n        if (this.nodes[key].isOpen) this.openCache.add(key);\n        this.updateVnodeState(key);\n      }\n    },\n    calculateState: function calculateState(node, state) {\n      var children = state[node].children;\n      var counts = children.reduce(function (counts, child) {\n        counts[0] += +Boolean(state[child].isSelected);\n        counts[1] += +Boolean(state[child].isIndeterminate);\n        return counts;\n      }, [0, 0]);\n      var isSelected = !!children.length && counts[0] === children.length;\n      var isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0);\n      return {\n        isSelected: isSelected,\n        isIndeterminate: isIndeterminate\n      };\n    },\n    emitOpen: function emitOpen() {\n      this.emitNodeCache('update:open', this.openCache);\n    },\n    emitSelected: function emitSelected() {\n      this.emitNodeCache('input', this.selectedCache);\n    },\n    emitActive: function emitActive() {\n      this.emitNodeCache('update:active', this.activeCache);\n    },\n    emitNodeCache: function emitNodeCache(event, cache) {\n      var _this6 = this;\n\n      this.$emit(event, this.returnObject ? _toConsumableArray(cache).map(function (key) {\n        return _this6.nodes[key].item;\n      }) : _toConsumableArray(cache));\n    },\n    handleNodeCacheWatcher: function handleNodeCacheWatcher(value, cache, updateFn, emitFn) {\n      var _this7 = this;\n\n      value = this.returnObject ? value.map(function (v) {\n        return getObjectValueByPath(v, _this7.itemKey);\n      }) : value;\n\n      var old = _toConsumableArray(cache);\n\n      if (deepEqual(old, value)) return;\n      old.forEach(function (key) {\n        return updateFn(key, false);\n      });\n      value.forEach(function (key) {\n        return updateFn(key, true);\n      });\n      emitFn();\n    },\n    getDescendants: function getDescendants(key) {\n      var _descendants;\n\n      var descendants = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var children = this.nodes[key].children;\n\n      (_descendants = descendants).push.apply(_descendants, _toConsumableArray(children));\n\n      for (var i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants);\n      }\n\n      return descendants;\n    },\n    getParents: function getParents(key) {\n      var parent = this.nodes[key].parent;\n      var parents = [];\n\n      while (parent !== null) {\n        parents.push(parent);\n        parent = this.nodes[parent].parent;\n      }\n\n      return parents;\n    },\n    register: function register(node) {\n      var key = getObjectValueByPath(node.item, this.itemKey);\n      this.nodes[key].vnode = node;\n      this.updateVnodeState(key);\n    },\n    unregister: function unregister(node) {\n      var key = getObjectValueByPath(node.item, this.itemKey);\n      if (this.nodes[key]) this.nodes[key].vnode = null;\n    },\n    isParent: function isParent(key) {\n      return this.nodes[key].children && this.nodes[key].children.length;\n    },\n    updateActive: function updateActive(key, isActive) {\n      var _this8 = this;\n\n      if (!this.nodes.hasOwnProperty(key)) return;\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(function (active) {\n          _this8.nodes[active].isActive = false;\n\n          _this8.updateVnodeState(active);\n\n          _this8.activeCache.delete(active);\n        });\n      }\n\n      var node = this.nodes[key];\n      if (!node) return;\n      if (isActive) this.activeCache.add(key);else this.activeCache.delete(key);\n      node.isActive = isActive;\n      this.updateVnodeState(key);\n    },\n    updateSelected: function updateSelected(key, isSelected) {\n      var isForced = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this.nodes.hasOwnProperty(key)) return;\n      var changed = new Map();\n\n      if (this.selectionType !== 'independent') {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = this.getDescendants(key)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var descendant = _step3.value;\n\n            if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n              this.nodes[descendant].isSelected = isSelected;\n              this.nodes[descendant].isIndeterminate = false;\n              changed.set(descendant, isSelected);\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        var calculated = this.calculateState(key, this.nodes);\n        this.nodes[key].isSelected = isSelected;\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate;\n        changed.set(key, isSelected);\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = this.getParents(key)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var parent = _step4.value;\n\n            var _calculated = this.calculateState(parent, this.nodes);\n\n            this.nodes[parent].isSelected = _calculated.isSelected;\n            this.nodes[parent].isIndeterminate = _calculated.isIndeterminate;\n            changed.set(parent, _calculated.isSelected);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected;\n        this.nodes[key].isIndeterminate = false;\n        changed.set(key, isSelected);\n      }\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = changed.entries()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              _key = _step5$value[0],\n              value = _step5$value[1];\n\n          this.updateVnodeState(_key);\n          if (this.selectionType === 'leaf' && this.isParent(_key)) continue;\n          value === true ? this.selectedCache.add(_key) : this.selectedCache.delete(_key);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    },\n    updateOpen: function updateOpen(key, isOpen) {\n      var _this9 = this;\n\n      if (!this.nodes.hasOwnProperty(key)) return;\n      var node = this.nodes[key];\n      var children = getObjectValueByPath(node.item, this.itemChildren);\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(function () {\n          return _this9.updateOpen(key, isOpen);\n        });\n      } else if (children && children.length) {\n        node.isOpen = isOpen;\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key);\n        this.updateVnodeState(key);\n      }\n    },\n    updateVnodeState: function updateVnodeState(key) {\n      var node = this.nodes[key];\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected;\n        node.vnode.isIndeterminate = node.isIndeterminate;\n        node.vnode.isActive = node.isActive;\n        node.vnode.isOpen = node.isOpen;\n      }\n    },\n    isExcluded: function isExcluded(key) {\n      return !!this.search && this.excludedItems.has(key);\n    }\n  },\n  render: function render(h) {\n    var _this10 = this;\n\n    var children = this.items.length ? this.items.map(function (item) {\n      var genChild = VTreeviewNode.options.methods.genChild.bind(_this10);\n      return genChild(item, getObjectValueByPath(item, _this10.itemDisabled));\n    })\n    /* istanbul ignore next */\n    : this.$slots.default; // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: _objectSpread({\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense\n      }, this.themeClasses)\n    }, children);\n  }\n});",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VTreeview/VTreeview.js"],"names":["VTreeviewNode","VTreeviewNodeProps","Themeable","provide","RegistrableProvide","arrayDiff","deepEqual","getObjectValueByPath","mixins","consoleWarn","filterTreeItems","filterTreeItem","extend","name","treeview","props","active","type","Array","default","dense","Boolean","filter","Function","hoverable","items","multipleActive","open","openAll","returnObject","search","String","value","data","level","activeCache","Set","nodes","openCache","selectedCache","computed","excludedItems","excluded","i","length","itemKey","itemText","itemChildren","watch","handler","oldKeys","Object","keys","map","k","item","newKeys","getKeys","diff","forEach","oldSelectedCache","buildTree","emitSelected","deep","handleNodeCacheWatcher","updateActive","emitActive","updateSelected","updateOpen","emitOpen","created","getValue","key","mounted","$slots","prepend","append","updateAll","methods","push","children","parent","oldNode","hasOwnProperty","isSelected","isIndeterminate","isActive","isOpen","vnode","node","c","calculateState","selectionType","add","updateVnodeState","state","counts","reduce","child","emitNodeCache","event","cache","$emit","updateFn","emitFn","v","old","getDescendants","descendants","getParents","parents","register","unregister","isParent","delete","isForced","changed","Map","descendant","itemDisabled","set","calculated","entries","hasLoaded","checkChildren","then","isExcluded","has","render","h","genChild","options","bind","staticClass","class","themeClasses"],"mappings":"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","sourcesContent":["// Styles\nimport \"../../../src/components/VTreeview/VTreeview.sass\"; // Components\n\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'; // Mixins\n\nimport Themeable from '../../mixins/themeable';\nimport { provide as RegistrableProvide } from '../../mixins/registrable'; // Utils\n\nimport { arrayDiff, deepEqual, getObjectValueByPath } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nimport { consoleWarn } from '../../util/console';\nimport { filterTreeItems, filterTreeItem } from './util/filterTreeItems';\nexport default mixins(RegistrableProvide('treeview'), Themeable\n/* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide() {\n    return {\n      treeview: this\n    };\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => []\n    },\n    dense: Boolean,\n    filter: Function,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: () => []\n    },\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => []\n    },\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false\n    },\n    search: String,\n    value: {\n      type: Array,\n      default: () => []\n    },\n    ...VTreeviewNodeProps\n  },\n  data: () => ({\n    level: -1,\n    activeCache: new Set(),\n    nodes: {},\n    openCache: new Set(),\n    selectedCache: new Set()\n  }),\n  computed: {\n    excludedItems() {\n      const excluded = new Set();\n      if (!this.search) return excluded;\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(this.filter || filterTreeItem, this.items[i], this.search, this.itemKey, this.itemText, this.itemChildren, excluded);\n      }\n\n      return excluded;\n    }\n\n  },\n  watch: {\n    items: {\n      handler() {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey));\n        const newKeys = this.getKeys(this.items);\n        const diff = arrayDiff(newKeys, oldKeys); // We only want to do stuff if items have changed\n\n        if (!diff.length && newKeys.length < oldKeys.length) return; // If nodes are removed we need to clear them from this.nodes\n\n        diff.forEach(k => delete this.nodes[k]);\n        const oldSelectedCache = [...this.selectedCache];\n        this.selectedCache = new Set();\n        this.activeCache = new Set();\n        this.openCache = new Set();\n        this.buildTree(this.items); // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected();\n      },\n\n      deep: true\n    },\n\n    active(value) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive);\n    },\n\n    value(value) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected);\n    },\n\n    open(value) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen);\n    }\n\n  },\n\n  created() {\n    const getValue = key => this.returnObject ? getObjectValueByPath(key, this.itemKey) : key;\n\n    this.buildTree(this.items);\n\n    for (const value of this.value.map(getValue)) {\n      this.updateSelected(value, true, true);\n    }\n\n    for (const active of this.active.map(getValue)) {\n      this.updateActive(active, true);\n    }\n  },\n\n  mounted() {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this);\n    }\n\n    if (this.openAll) {\n      this.updateAll(true);\n    } else {\n      this.open.forEach(key => this.updateOpen(this.returnObject ? getObjectValueByPath(key, this.itemKey) : key, true));\n      this.emitOpen();\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll(value) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value));\n      this.emitOpen();\n    },\n\n    getKeys(items, keys = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey);\n        keys.push(key);\n        const children = getObjectValueByPath(items[i], this.itemChildren);\n\n        if (children) {\n          keys.push(...this.getKeys(children));\n        }\n      }\n\n      return keys;\n    },\n\n    buildTree(items, parent = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        const key = getObjectValueByPath(item, this.itemKey);\n        const children = getObjectValueByPath(item, this.itemChildren, []);\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false,\n          isIndeterminate: false,\n          isActive: false,\n          isOpen: false,\n          vnode: null\n        };\n        const node = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map(c => getObjectValueByPath(c, this.itemKey)),\n          item\n        };\n        this.buildTree(children, key); // This fixed bug with dynamic children resetting selected parent state\n\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected;\n        } else {\n          node.isSelected = oldNode.isSelected;\n          node.isIndeterminate = oldNode.isIndeterminate;\n        }\n\n        node.isActive = oldNode.isActive;\n        node.isOpen = oldNode.isOpen;\n        this.nodes[key] = node;\n\n        if (children.length) {\n          const {\n            isSelected,\n            isIndeterminate\n          } = this.calculateState(key, this.nodes);\n          node.isSelected = isSelected;\n          node.isIndeterminate = isIndeterminate;\n        } // Don't forget to rebuild cache\n\n\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key);\n        if (this.nodes[key].isActive) this.activeCache.add(key);\n        if (this.nodes[key].isOpen) this.openCache.add(key);\n        this.updateVnodeState(key);\n      }\n    },\n\n    calculateState(node, state) {\n      const children = state[node].children;\n      const counts = children.reduce((counts, child) => {\n        counts[0] += +Boolean(state[child].isSelected);\n        counts[1] += +Boolean(state[child].isIndeterminate);\n        return counts;\n      }, [0, 0]);\n      const isSelected = !!children.length && counts[0] === children.length;\n      const isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0);\n      return {\n        isSelected,\n        isIndeterminate\n      };\n    },\n\n    emitOpen() {\n      this.emitNodeCache('update:open', this.openCache);\n    },\n\n    emitSelected() {\n      this.emitNodeCache('input', this.selectedCache);\n    },\n\n    emitActive() {\n      this.emitNodeCache('update:active', this.activeCache);\n    },\n\n    emitNodeCache(event, cache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache]);\n    },\n\n    handleNodeCacheWatcher(value, cache, updateFn, emitFn) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value;\n      const old = [...cache];\n      if (deepEqual(old, value)) return;\n      old.forEach(key => updateFn(key, false));\n      value.forEach(key => updateFn(key, true));\n      emitFn();\n    },\n\n    getDescendants(key, descendants = []) {\n      const children = this.nodes[key].children;\n      descendants.push(...children);\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants);\n      }\n\n      return descendants;\n    },\n\n    getParents(key) {\n      let parent = this.nodes[key].parent;\n      const parents = [];\n\n      while (parent !== null) {\n        parents.push(parent);\n        parent = this.nodes[parent].parent;\n      }\n\n      return parents;\n    },\n\n    register(node) {\n      const key = getObjectValueByPath(node.item, this.itemKey);\n      this.nodes[key].vnode = node;\n      this.updateVnodeState(key);\n    },\n\n    unregister(node) {\n      const key = getObjectValueByPath(node.item, this.itemKey);\n      if (this.nodes[key]) this.nodes[key].vnode = null;\n    },\n\n    isParent(key) {\n      return this.nodes[key].children && this.nodes[key].children.length;\n    },\n\n    updateActive(key, isActive) {\n      if (!this.nodes.hasOwnProperty(key)) return;\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false;\n          this.updateVnodeState(active);\n          this.activeCache.delete(active);\n        });\n      }\n\n      const node = this.nodes[key];\n      if (!node) return;\n      if (isActive) this.activeCache.add(key);else this.activeCache.delete(key);\n      node.isActive = isActive;\n      this.updateVnodeState(key);\n    },\n\n    updateSelected(key, isSelected, isForced = false) {\n      if (!this.nodes.hasOwnProperty(key)) return;\n      const changed = new Map();\n\n      if (this.selectionType !== 'independent') {\n        for (const descendant of this.getDescendants(key)) {\n          if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n            this.nodes[descendant].isSelected = isSelected;\n            this.nodes[descendant].isIndeterminate = false;\n            changed.set(descendant, isSelected);\n          }\n        }\n\n        const calculated = this.calculateState(key, this.nodes);\n        this.nodes[key].isSelected = isSelected;\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate;\n        changed.set(key, isSelected);\n\n        for (const parent of this.getParents(key)) {\n          const calculated = this.calculateState(parent, this.nodes);\n          this.nodes[parent].isSelected = calculated.isSelected;\n          this.nodes[parent].isIndeterminate = calculated.isIndeterminate;\n          changed.set(parent, calculated.isSelected);\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected;\n        this.nodes[key].isIndeterminate = false;\n        changed.set(key, isSelected);\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key);\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue;\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key);\n      }\n    },\n\n    updateOpen(key, isOpen) {\n      if (!this.nodes.hasOwnProperty(key)) return;\n      const node = this.nodes[key];\n      const children = getObjectValueByPath(node.item, this.itemChildren);\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen));\n      } else if (children && children.length) {\n        node.isOpen = isOpen;\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key);\n        this.updateVnodeState(key);\n      }\n    },\n\n    updateVnodeState(key) {\n      const node = this.nodes[key];\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected;\n        node.vnode.isIndeterminate = node.isIndeterminate;\n        node.vnode.isActive = node.isActive;\n        node.vnode.isOpen = node.isOpen;\n      }\n    },\n\n    isExcluded(key) {\n      return !!this.search && this.excludedItems.has(key);\n    }\n\n  },\n\n  render(h) {\n    const children = this.items.length ? this.items.map(item => {\n      const genChild = VTreeviewNode.options.methods.genChild.bind(this);\n      return genChild(item, getObjectValueByPath(item, this.itemDisabled));\n    })\n    /* istanbul ignore next */\n    : this.$slots.default; // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses\n      }\n    }, children);\n  }\n\n});\n//# sourceMappingURL=VTreeview.js.map"]}]}