{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VCalendar/mixins/times.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VCalendar/mixins/times.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport { validateTimestamp, parseTimestamp, parseDate } from \"../util/timestamp\";\nexport default Vue.extend({\n  name: 'times',\n  props: {\n    now: {\n      type: String,\n      validator: validateTimestamp\n    }\n  },\n  data: function data() {\n    return {\n      times: {\n        now: parseTimestamp('0000-00-00 00:00', true),\n        today: parseTimestamp('0000-00-00', true)\n      }\n    };\n  },\n  computed: {\n    parsedNow: function parsedNow() {\n      return this.now ? parseTimestamp(this.now, true) : null;\n    }\n  },\n  watch: {\n    parsedNow: 'updateTimes'\n  },\n  created: function created() {\n    this.updateTimes();\n    this.setPresent();\n  },\n  methods: {\n    setPresent: function setPresent() {\n      this.times.now.present = this.times.today.present = true;\n      this.times.now.past = this.times.today.past = false;\n      this.times.now.future = this.times.today.future = false;\n    },\n    updateTimes: function updateTimes() {\n      var now = this.parsedNow || this.getNow();\n      this.updateDay(now, this.times.now);\n      this.updateTime(now, this.times.now);\n      this.updateDay(now, this.times.today);\n    },\n    getNow: function getNow() {\n      return parseDate(new Date());\n    },\n    updateDay: function updateDay(now, target) {\n      if (now.date !== target.date) {\n        target.year = now.year;\n        target.month = now.month;\n        target.day = now.day;\n        target.weekday = now.weekday;\n        target.date = now.date;\n      }\n    },\n    updateTime: function updateTime(now, target) {\n      if (now.time !== target.time) {\n        target.hour = now.hour;\n        target.minute = now.minute;\n        target.time = now.time;\n      }\n    }\n  }\n});",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify/lib/components/VCalendar/mixins/times.js"],"names":["Vue","validateTimestamp","parseTimestamp","parseDate","extend","name","props","now","type","String","validator","data","times","today","computed","parsedNow","watch","created","updateTimes","setPresent","methods","present","past","future","getNow","updateDay","updateTime","Date","target","date","year","month","day","weekday","time","hour","minute"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport { validateTimestamp, parseTimestamp, parseDate } from '../util/timestamp';\nexport default Vue.extend({\n  name: 'times',\n  props: {\n    now: {\n      type: String,\n      validator: validateTimestamp\n    }\n  },\n  data: () => ({\n    times: {\n      now: parseTimestamp('0000-00-00 00:00', true),\n      today: parseTimestamp('0000-00-00', true)\n    }\n  }),\n  computed: {\n    parsedNow() {\n      return this.now ? parseTimestamp(this.now, true) : null;\n    }\n\n  },\n  watch: {\n    parsedNow: 'updateTimes'\n  },\n\n  created() {\n    this.updateTimes();\n    this.setPresent();\n  },\n\n  methods: {\n    setPresent() {\n      this.times.now.present = this.times.today.present = true;\n      this.times.now.past = this.times.today.past = false;\n      this.times.now.future = this.times.today.future = false;\n    },\n\n    updateTimes() {\n      const now = this.parsedNow || this.getNow();\n      this.updateDay(now, this.times.now);\n      this.updateTime(now, this.times.now);\n      this.updateDay(now, this.times.today);\n    },\n\n    getNow() {\n      return parseDate(new Date());\n    },\n\n    updateDay(now, target) {\n      if (now.date !== target.date) {\n        target.year = now.year;\n        target.month = now.month;\n        target.day = now.day;\n        target.weekday = now.weekday;\n        target.date = now.date;\n      }\n    },\n\n    updateTime(now, target) {\n      if (now.time !== target.time) {\n        target.hour = now.hour;\n        target.minute = now.minute;\n        target.time = now.time;\n      }\n    }\n\n  }\n});\n//# sourceMappingURL=times.js.map"]}]}