{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/Gestures.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/dayspan-vuetify-2/src/components/Gestures.vue","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'dsGestures',\n  props: {\n    minDistance: {\n      type: Number,\n      default: function _default() {\n        return this.$dsDefaults().minDistance;\n      }\n    },\n    maxDistance: {\n      type: Number,\n      default: function _default() {\n        return this.$dsDefaults().maxDistance;\n      }\n    },\n    maxWander: {\n      type: Number,\n      default: function _default() {\n        return this.$dsDefaults().maxWander;\n      }\n    }\n  },\n  methods: {\n    start: function start($event) {\n      this.starting = this.getPoint($event);\n    },\n    move: function move($event) {\n      this.checkGesture(this.getPoint($event), this.maxDistance);\n    },\n    end: function end($event) {\n      this.checkGesture(this.getPoint($event), this.minDistance);\n    },\n    checkGesture: function checkGesture(point, threshold) {\n      var start = this.starting;\n\n      if (!start) {\n        return false;\n      }\n\n      var dx = point.x - start.x;\n      var dy = point.y - start.y;\n      var dSq = dx * dx;\n\n      if (dSq > threshold * threshold) {\n        var distance = Math.sqrt(dSq);\n        var adx = dx < 0 ? -dx : dx;\n        var ady = dy < 0 ? -dy : dy; // more horizontal than vertical\n\n        if (adx > ady) {\n          // check wander\n          if (adx * this.maxWander > ady) {\n            // towards left\n            if (dx < 0) {\n              this.$emit('swipeleft', adx);\n            } // towards right\n            else {\n                this.$emit('swiperight', adx);\n              }\n\n            this.$emit('swipex', dx);\n          }\n        } // more vertical than horizontal\n        else {\n            // check wander\n            if (ady * this.maxWander > adx) {\n              // towards top\n              if (dy < 0) {\n                this.$emit('swipeup', ady);\n              } // towards bottom\n              else {\n                  this.$emit('swipedown', ady);\n                }\n\n              this.$emit('swipey', dy);\n            }\n          }\n\n        this.starting = null;\n      }\n    },\n    getPoint: function getPoint($event) {\n      var touch = $event.touches[0] || $event.changedTouches[0];\n      return {\n        x: touch.clientX,\n        y: touch.clientY\n      };\n    }\n  }\n};",{"version":3,"sources":["Gestures.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA,eAAA;AAEA,EAAA,IAAA,EAAA,YAFA;AAIA,EAAA,KAAA,EACA;AACA,IAAA,WAAA,EACA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,KAAA,WAAA,GAAA,WAAA;AACA;AAJA,KAFA;AAQA,IAAA,WAAA,EACA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,KAAA,WAAA,GAAA,WAAA;AACA;AAJA,KATA;AAeA,IAAA,SAAA,EACA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,KAAA,WAAA,GAAA,SAAA;AACA;AAJA;AAhBA,GALA;AA6BA,EAAA,OAAA,EACA;AACA,IAAA,KADA,iBACA,MADA,EACA;AACA,WAAA,QAAA,GAAA,KAAA,QAAA,CAAA,MAAA,CAAA;AACA,KAHA;AAKA,IAAA,IALA,gBAKA,MALA,EAKA;AACA,WAAA,YAAA,CAAA,KAAA,QAAA,CAAA,MAAA,CAAA,EAAA,KAAA,WAAA;AACA,KAPA;AASA,IAAA,GATA,eASA,MATA,EASA;AACA,WAAA,YAAA,CAAA,KAAA,QAAA,CAAA,MAAA,CAAA,EAAA,KAAA,WAAA;AACA,KAXA;AAaA,IAAA,YAbA,wBAaA,KAbA,EAaA,SAbA,EAaA;AACA,UAAA,KAAA,GAAA,KAAA,QAAA;;AAEA,UAAA,CAAA,KAAA,EAAA;AACA,eAAA,KAAA;AACA;;AAEA,UAAA,EAAA,GAAA,KAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA;AACA,UAAA,EAAA,GAAA,KAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA;AACA,UAAA,GAAA,GAAA,EAAA,GAAA,EAAA;;AAEA,UAAA,GAAA,GAAA,SAAA,GAAA,SAAA,EAAA;AACA,YAAA,QAAA,GAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACA,YAAA,GAAA,GAAA,EAAA,GAAA,CAAA,GAAA,CAAA,EAAA,GAAA,EAAA;AACA,YAAA,GAAA,GAAA,EAAA,GAAA,CAAA,GAAA,CAAA,EAAA,GAAA,EAAA,CAHA,CAKA;;AACA,YAAA,GAAA,GAAA,GAAA,EAAA;AACA;AACA,cAAA,GAAA,GAAA,KAAA,SAAA,GAAA,GAAA,EAAA;AACA;AACA,gBAAA,EAAA,GAAA,CAAA,EAAA;AACA,mBAAA,KAAA,CAAA,WAAA,EAAA,GAAA;AACA,aAFA,CAGA;AAHA,iBAIA;AACA,qBAAA,KAAA,CAAA,YAAA,EAAA,GAAA;AACA;;AAEA,iBAAA,KAAA,CAAA,QAAA,EAAA,EAAA;AACA;AACA,SAdA,CAeA;AAfA,aAgBA;AACA;AACA,gBAAA,GAAA,GAAA,KAAA,SAAA,GAAA,GAAA,EAAA;AACA;AACA,kBAAA,EAAA,GAAA,CAAA,EAAA;AACA,qBAAA,KAAA,CAAA,SAAA,EAAA,GAAA;AACA,eAFA,CAGA;AAHA,mBAIA;AACA,uBAAA,KAAA,CAAA,WAAA,EAAA,GAAA;AACA;;AAEA,mBAAA,KAAA,CAAA,QAAA,EAAA,EAAA;AACA;AACA;;AAEA,aAAA,QAAA,GAAA,IAAA;AACA;AACA,KAhEA;AAkEA,IAAA,QAlEA,oBAkEA,MAlEA,EAkEA;AACA,UAAA,KAAA,GAAA,MAAA,CAAA,OAAA,CAAA,CAAA,KAAA,MAAA,CAAA,cAAA,CAAA,CAAA,CAAA;AAEA,aAAA;AACA,QAAA,CAAA,EAAA,KAAA,CAAA,OADA;AAEA,QAAA,CAAA,EAAA,KAAA,CAAA;AAFA,OAAA;AAIA;AAzEA;AA9BA,CAAA","sourcesContent":["<template>\r\n\r\n    <div class=\"ds-gesture-container\"\r\n         @touchstart=\"start\"\r\n         @touchmove=\"move\"\r\n         @touchend=\"end\">\r\n\r\n        <slot></slot>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n    name: 'dsGestures',\r\n\r\n    props:\r\n        {\r\n            minDistance:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().minDistance\r\n                    }\r\n                },\r\n            maxDistance:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().maxDistance\r\n                    }\r\n                },\r\n            maxWander:\r\n                {\r\n                    type: Number,\r\n                    default () {\r\n                        return this.$dsDefaults().maxWander\r\n                    }\r\n                }\r\n        },\r\n\r\n    methods:\r\n        {\r\n            start ($event) {\r\n                this.starting = this.getPoint($event)\r\n            },\r\n\r\n            move ($event) {\r\n                this.checkGesture(this.getPoint($event), this.maxDistance)\r\n            },\r\n\r\n            end ($event) {\r\n                this.checkGesture(this.getPoint($event), this.minDistance)\r\n            },\r\n\r\n            checkGesture (point, threshold) {\r\n                let start = this.starting\r\n\r\n                if (!start) {\r\n                    return false\r\n                }\r\n\r\n                let dx = point.x - start.x\r\n                let dy = point.y - start.y\r\n                let dSq = dx * dx\r\n\r\n                if (dSq > threshold * threshold) {\r\n                    let distance = Math.sqrt(dSq)\r\n                    let adx = dx < 0 ? -dx : dx\r\n                    let ady = dy < 0 ? -dy : dy\r\n\r\n                    // more horizontal than vertical\r\n                    if (adx > ady) {\r\n                        // check wander\r\n                        if (adx * this.maxWander > ady) {\r\n                            // towards left\r\n                            if (dx < 0) {\r\n                                this.$emit('swipeleft', adx)\r\n                            }\r\n                            // towards right\r\n                            else {\r\n                                this.$emit('swiperight', adx)\r\n                            }\r\n\r\n                            this.$emit('swipex', dx)\r\n                        }\r\n                    }\r\n                    // more vertical than horizontal\r\n                    else {\r\n                        // check wander\r\n                        if (ady * this.maxWander > adx) {\r\n                            // towards top\r\n                            if (dy < 0) {\r\n                                this.$emit('swipeup', ady)\r\n                            }\r\n                            // towards bottom\r\n                            else {\r\n                                this.$emit('swipedown', ady)\r\n                            }\r\n\r\n                            this.$emit('swipey', dy)\r\n                        }\r\n                    }\r\n\r\n                    this.starting = null\r\n                }\r\n            },\r\n\r\n            getPoint ($event) {\r\n                var touch = $event.touches[0] || $event.changedTouches[0]\r\n\r\n                return {\r\n                    x: touch.clientX,\r\n                    y: touch.clientY\r\n                }\r\n            }\r\n        }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n    .ds-gesture-container {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n</style>\r\n"],"sourceRoot":"node_modules/dayspan-vuetify-2/src/components"}]}