{"remainingRequest":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/eslint-loader/index.js??ref--13-0!/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/plugins/language.js","dependencies":[{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/plugins/language.js","mtime":1617335731000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.starts-with\";\n// Third-party libraries.\nimport Vue from 'vue';\nimport VueI18n from 'vue-i18n';\nimport _ from 'lodash'; // Local.\n\nimport store from \"../state\"; // Translations.\n\nimport en_US from \"./locales/en_US\";\nimport fr_FR from \"./locales/fr_FR\";\nVue.use(VueI18n);\nvar DEFAULT_LANG = 'en_US';\n/**\n * Returns the full ISO code for the language;\n *\n * @param {string} any language code.\n * @returns {string} the full language ISO code.\n */\n\nexport var getLanguageCode = function getLanguageCode(language) {\n  if (!language) return DEFAULT_LANG;\n\n  if (language.startsWith('fr')) {\n    return 'fr_FR';\n  }\n\n  return DEFAULT_LANG;\n}; // Detect language in the URL.\n\nvar queryString = window.location.hash.split('?').pop();\nvar urlParams = new URLSearchParams(queryString);\nvar urlLanguage = urlParams.get('lang'); // Initialize the extended Vue instance. \n\nexport default new VueI18n({\n  locale: getLanguageCode(urlLanguage) || _.get(store, 'state.currentLanguage') || getLanguageCode(navigator.language || navigator.userLanguage),\n  messages: {\n    en_US: en_US,\n    fr_FR: fr_FR\n  }\n});",{"version":3,"sources":["/Volumes/Disk1/work/work/mindlogger/mindlogger-applet-library/src/plugins/language.js"],"names":["Vue","VueI18n","_","store","en_US","fr_FR","use","DEFAULT_LANG","getLanguageCode","language","startsWith","queryString","window","location","hash","split","pop","urlParams","URLSearchParams","urlLanguage","get","locale","navigator","userLanguage","messages"],"mappings":";;AAAA;AACA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,CAAP,MAAc,QAAd,C,CAEA;;AACA,OAAOC,KAAP,iB,CAEA;;AACA,OAAOC,KAAP;AACA,OAAOC,KAAP;AAGAL,GAAG,CAACM,GAAJ,CAAQL,OAAR;AAEA,IAAMM,YAAY,GAAG,OAArB;AAEA;;;;;;;AAMA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AAC3C,MAAI,CAACA,QAAL,EAAe,OAAOF,YAAP;;AAEf,MAAIE,QAAQ,CAACC,UAAT,CAAoB,IAApB,CAAJ,EAA+B;AAC7B,WAAO,OAAP;AACD;;AAED,SAAOH,YAAP;AACD,CARM,C,CAUP;;AACA,IAAMI,WAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,EAAgCC,GAAhC,EAApB;AACA,IAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBP,WAApB,CAAlB;AACA,IAAMQ,WAAW,GAAGF,SAAS,CAACG,GAAV,CAAc,MAAd,CAApB,C,CAGA;;AACA,eAAe,IAAInB,OAAJ,CAAY;AACzBoB,EAAAA,MAAM,EACJb,eAAe,CAACW,WAAD,CAAf,IACAjB,CAAC,CAACkB,GAAF,CAAMjB,KAAN,EAAa,uBAAb,CADA,IAEAK,eAAe,CAACc,SAAS,CAACb,QAAV,IAAsBa,SAAS,CAACC,YAAjC,CAJQ;AAMzBC,EAAAA,QAAQ,EAAE;AACRpB,IAAAA,KAAK,EAALA,KADQ;AAERC,IAAAA,KAAK,EAALA;AAFQ;AANe,CAAZ,CAAf","sourcesContent":["// Third-party libraries.\nimport Vue from 'vue';\nimport VueI18n from 'vue-i18n';\nimport _ from 'lodash';\n\n// Local.\nimport store from '../state';\n\n// Translations.\nimport en_US from './locales/en_US';\nimport fr_FR from './locales/fr_FR';\n\n\nVue.use(VueI18n);\n\nconst DEFAULT_LANG = 'en_US';\n\n/**\n * Returns the full ISO code for the language;\n *\n * @param {string} any language code.\n * @returns {string} the full language ISO code.\n */\nexport const getLanguageCode = (language) => {\n  if (!language) return DEFAULT_LANG;\n\n  if (language.startsWith('fr')) { \n    return 'fr_FR';\n  }\n\n  return DEFAULT_LANG;\n};\n\n// Detect language in the URL.\nconst queryString = window.location.hash.split('?').pop();\nconst urlParams = new URLSearchParams(queryString);\nconst urlLanguage = urlParams.get('lang');\n\n\n// Initialize the extended Vue instance. \nexport default new VueI18n({\n  locale: (\n    getLanguageCode(urlLanguage) ||\n    _.get(store, 'state.currentLanguage') ||\n    getLanguageCode(navigator.language || navigator.userLanguage)\n  ),\n  messages: {\n    en_US,\n    fr_FR,\n  },\n});\n"]}]}