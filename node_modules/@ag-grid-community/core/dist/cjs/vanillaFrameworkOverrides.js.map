{"version":3,"sources":["../../src/ts/vanillaFrameworkOverrides.ts"],"names":[],"mappings":";;;;;;;;AAEA,wHAAwH;AACxH;IAAA;IAaA,CAAC;IAXG,wCAAwC;IACjC,8CAAU,GAAjB,UAAkB,MAAW,EAAE,OAAa;QACxC,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,uDAAuD;IAChD,kEAA8B,GAArC,UAAsC,OAAoB,EAAE,IAAY,EACnC,QAA4C,EAC3C,UAAoB;QACtD,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;IACzD,CAAC;IACL,gCAAC;AAAD,CAbA,AAaC,IAAA;AAbY,8DAAyB","file":"vanillaFrameworkOverrides.js","sourcesContent":["import { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\n\n/** The base frameworks, eg React & Angular 2, override this bean with implementations specific to their requirement. */\nexport class VanillaFrameworkOverrides implements IFrameworkOverrides {\n\n    // for Vanilla JS, we use simple timeout\n    public setTimeout(action: any, timeout?: any): void {\n        window.setTimeout(action, timeout);\n    }\n\n    // for Vanilla JS, we just add the event to the element\n    public addEventListenerOutsideAngular(element: HTMLElement, type: string,\n                                         listener: EventListenerOrEventListenerObject,\n                                          useCapture?: boolean): void {\n        element.addEventListener(type, listener, useCapture);\n    }\n}"]}