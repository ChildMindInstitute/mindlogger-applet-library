{"version":3,"sources":["../../src/ts/dragAndDrop/dragService.ts"],"names":[],"mappings":"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","file":"dragService.js","sourcesContent":["import { Bean, PreDestroy, Autowired, PostConstruct } from \"../context/context\";\nimport { LoggerFactory, Logger } from \"../logger\";\nimport { EventService } from \"../eventService\";\nimport { DragStartedEvent, DragStoppedEvent, Events } from \"../events\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { ColumnApi } from \"../columnController/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { _ } from \"../utils\";\n\n/** Adds drag listening onto an element. In ag-Grid this is used twice, first is resizing columns,\n * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */\n@Bean('dragService')\nexport class DragService {\n\n    @Autowired('loggerFactory') private loggerFactory: LoggerFactory;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private currentDragParams: DragListenerParams;\n    private dragging: boolean;\n    private mouseStartEvent: MouseEvent;\n    private touchLastTime: Touch;\n    private touchStart: Touch;\n\n    private onMouseUpListener = this.onMouseUp.bind(this);\n    private onMouseMoveListener = this.onMouseMove.bind(this);\n\n    private onTouchEndListener = this.onTouchUp.bind(this);\n    private onTouchMoveListener = this.onTouchMove.bind(this);\n\n    private logger: Logger;\n\n    private dragEndFunctions: Function[] = [];\n\n    private dragSources: DragSourceAndListener[] = [];\n\n    @PostConstruct\n    private init(): void {\n        this.logger = this.loggerFactory.create('DragService');\n    }\n\n    @PreDestroy\n    private destroy(): void {\n        this.dragSources.forEach(this.removeListener.bind(this));\n        this.dragSources.length = 0;\n    }\n\n    private removeListener(dragSourceAndListener: DragSourceAndListener): void {\n        const element = dragSourceAndListener.dragSource.eElement;\n        const mouseDownListener = dragSourceAndListener.mouseDownListener;\n        element.removeEventListener('mousedown', mouseDownListener);\n\n        // remove touch listener only if it exists\n        if (dragSourceAndListener.touchEnabled) {\n            const touchStartListener = dragSourceAndListener.touchStartListener;\n            element.removeEventListener('touchstart', touchStartListener, {passive:true} as any);\n        }\n    }\n\n    public removeDragSource(params: DragListenerParams): void {\n        const dragSourceAndListener = _.find(this.dragSources, item => item.dragSource === params);\n\n        if (!dragSourceAndListener) { return; }\n\n        this.removeListener(dragSourceAndListener);\n        _.removeFromArray(this.dragSources, dragSourceAndListener);\n    }\n\n    private setNoSelectToBody(noSelect: boolean): void {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const eBody = eDocument.querySelector('body') as HTMLElement;\n        if (_.exists(eBody)) {\n            // when we drag the mouse in ag-Grid, this class gets added / removed from the body, so that\n            // the mouse isn't selecting text when dragging.\n            _.addOrRemoveCssClass(eBody, 'ag-unselectable', noSelect);\n        }\n    }\n\n    public addDragSource(params: DragListenerParams, includeTouch: boolean = false): void {\n        const mouseListener = this.onMouseDown.bind(this, params);\n        params.eElement.addEventListener('mousedown', mouseListener);\n\n        let touchListener: (touchEvent: TouchEvent) => void = null;\n\n        const suppressTouch = this.gridOptionsWrapper.isSuppressTouch();\n\n        if (includeTouch && !suppressTouch) {\n            touchListener = this.onTouchStart.bind(this, params);\n            params.eElement.addEventListener('touchstart', touchListener, { passive:false } as any);\n        }\n\n        this.dragSources.push({\n            dragSource: params,\n            mouseDownListener: mouseListener,\n            touchStartListener: touchListener,\n            touchEnabled: includeTouch\n        });\n    }\n\n    // gets called whenever mouse down on any drag source\n    private onTouchStart(params: DragListenerParams, touchEvent: TouchEvent): void {\n        this.currentDragParams = params;\n        this.dragging = false;\n\n        const touch = touchEvent.touches[0];\n\n        this.touchLastTime = touch;\n        this.touchStart = touch;\n\n        touchEvent.preventDefault();\n\n        // we temporally add these listeners, for the duration of the drag, they\n        // are removed in touch end handling.\n        params.eElement.addEventListener('touchmove', this.onTouchMoveListener, {passive:true} as any);\n        params.eElement.addEventListener('touchend', this.onTouchEndListener, {passive:true} as any);\n        params.eElement.addEventListener('touchcancel', this.onTouchEndListener, {passive:true} as any);\n\n        this.dragEndFunctions.push(() => {\n            params.eElement.removeEventListener('touchmove', this.onTouchMoveListener, {passive:true} as any);\n            params.eElement.removeEventListener('touchend', this.onTouchEndListener, {passive:true} as any);\n            params.eElement.removeEventListener('touchcancel', this.onTouchEndListener, {passive:true} as any);\n        });\n\n        // see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onCommonMove(touch, this.touchStart);\n        }\n    }\n\n    // gets called whenever mouse down on any drag source\n    private onMouseDown(params: DragListenerParams, mouseEvent: MouseEvent): void {\n        // we ignore when shift key is pressed. this is for the range selection, as when\n        // user shift-clicks a cell, this should not be interpreted as the start of a drag.\n        // if (mouseEvent.shiftKey) { return; }\n        if (params.skipMouseEvent) {\n            if (params.skipMouseEvent(mouseEvent)) { return; }\n        }\n\n        // if there are two elements with parent / child relationship, and both are draggable,\n        // when we drag the child, we should NOT drag the parent. an example of this is row moving\n        // and range selection - row moving should get preference when use drags the rowDrag component.\n        if ((mouseEvent as any)._alreadyProcessedByDragService) { return; }\n        (mouseEvent as any)._alreadyProcessedByDragService = true;\n\n        // only interested in left button clicks\n        if (mouseEvent.button !== 0) { return; }\n\n        this.currentDragParams = params;\n        this.dragging = false;\n\n        this.mouseStartEvent = mouseEvent;\n\n        const eDocument = this.gridOptionsWrapper.getDocument();\n\n        this.setNoSelectToBody(true);\n        // we temporally add these listeners, for the duration of the drag, they\n        // are removed in mouseup handling.\n        eDocument.addEventListener('mousemove', this.onMouseMoveListener);\n        eDocument.addEventListener('mouseup', this.onMouseUpListener);\n\n        this.dragEndFunctions.push(() => {\n            eDocument.removeEventListener('mousemove', this.onMouseMoveListener);\n            eDocument.removeEventListener('mouseup', this.onMouseUpListener);\n        });\n\n        //see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onMouseMove(mouseEvent);\n        }\n    }\n\n    // returns true if the event is close to the original event by X pixels either vertically or horizontally.\n    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n    private isEventNearStartEvent(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch): boolean {\n        // by default, we wait 4 pixels before starting the drag\n        const {dragStartPixels} = this.currentDragParams;\n        const requiredPixelDiff = _.exists(dragStartPixels) ? dragStartPixels : 4;\n        return _.areEventsNear(currentEvent, startEvent, requiredPixelDiff);\n    }\n\n    private getFirstActiveTouch(touchList: TouchList): Touch {\n        for (let i = 0; i < touchList.length; i++) {\n            if (touchList[i].identifier === this.touchStart.identifier) {\n                return touchList[i];\n            }\n        }\n        return null;\n    }\n\n    private onCommonMove(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch): void {\n        if (!this.dragging) {\n            // if mouse hasn't travelled from the start position enough, do nothing\n            if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) { return; }\n\n            this.dragging = true;\n            const event: DragStartedEvent = {\n                type: Events.EVENT_DRAG_STARTED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event);\n            this.currentDragParams.onDragStart(startEvent);\n        }\n\n        this.currentDragParams.onDragging(currentEvent);\n    }\n\n    private onTouchMove(touchEvent: TouchEvent): void {\n        const touch = this.getFirstActiveTouch(touchEvent.touches);\n        if (!touch) { return; }\n\n        // this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');\n\n        // if we don't preview default, then the browser will try and do it's own touch stuff,\n        // like do 'back button' (chrome does this) or scroll the page (eg drag column could  be confused\n        // with scroll page in the app)\n        // touchEvent.preventDefault();\n\n        this.onCommonMove(touch, this.touchStart);\n    }\n\n    // only gets called after a mouse down - as this is only added after mouseDown\n    // and is removed when mouseUp happens\n    private onMouseMove(mouseEvent: MouseEvent): void {\n        this.onCommonMove(mouseEvent, this.mouseStartEvent);\n    }\n\n    public onTouchUp(touchEvent: TouchEvent): void {\n        let touch = this.getFirstActiveTouch(touchEvent.changedTouches);\n\n        // i haven't worked this out yet, but there is no matching touch\n        // when we get the touch up event. to get around this, we swap in\n        // the last touch. this is a hack to 'get it working' while we\n        // figure out what's going on, why we are not getting a touch in\n        // current event.\n        if (!touch) {\n            touch = this.touchLastTime;\n        }\n\n        // if mouse was left up before we started to move, then this is a tap.\n        // we check this before onUpCommon as onUpCommon resets the dragging\n        // let tap = !this.dragging;\n        // let tapTarget = this.currentDragParams.eElement;\n\n        this.onUpCommon(touch);\n\n        // if tap, tell user\n        // console.log(`${Math.random()} tap = ${tap}`);\n        // if (tap) {\n        //     tapTarget.click();\n        // }\n    }\n\n    public onMouseUp(mouseEvent: MouseEvent): void {\n        this.onUpCommon(mouseEvent);\n    }\n\n    public onUpCommon(eventOrTouch: MouseEvent | Touch): void {\n        if (this.dragging) {\n            this.dragging = false;\n            this.currentDragParams.onDragStop(eventOrTouch);\n            const event: DragStoppedEvent = {\n                type: Events.EVENT_DRAG_STOPPED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        this.setNoSelectToBody(false);\n\n        this.mouseStartEvent = null;\n        this.touchStart = null;\n        this.touchLastTime = null;\n        this.currentDragParams = null;\n\n        this.dragEndFunctions.forEach(func => func());\n        this.dragEndFunctions.length = 0;\n    }\n}\n\ninterface DragSourceAndListener {\n    dragSource: DragListenerParams;\n    mouseDownListener: (mouseEvent: MouseEvent) => void;\n    touchEnabled: boolean;\n    touchStartListener: (touchEvent: TouchEvent) => void;\n}\n\nexport interface DragListenerParams {\n    /** After how many pixels of dragging should the drag operation start. Default is 4px. */\n    dragStartPixels?: number;\n    /** Dom element to add the drag handling to */\n    eElement: HTMLElement;\n    /** Some places may wish to ignore certain events, eg range selection ignores shift clicks */\n    skipMouseEvent?: (mouseEvent: MouseEvent) => boolean;\n    /** Callback for drag starting */\n    onDragStart: (mouseEvent: MouseEvent | Touch) => void;\n    /** Callback for drag stopping */\n    onDragStop: (mouseEvent: MouseEvent | Touch) => void;\n    /** Callback for mouse move while dragging */\n    onDragging: (mouseEvent: MouseEvent | Touch) => void;\n}"]}