{"version":3,"sources":["../../src/ts/headerRendering/bodyDropPivotTarget.ts"],"names":[],"mappings":"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","file":"bodyDropPivotTarget.js","sourcesContent":["import { DraggingEvent, DragAndDropService } from \"../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../entities/column\";\nimport { ColumnController } from \"../columnController/columnController\";\nimport { Autowired } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { DropListener } from \"./bodyDropTarget\";\n\nexport class BodyDropPivotTarget implements DropListener {\n\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    private columnsToAggregate: Column[] = [];\n    private columnsToGroup: Column[] = [];\n    private columnsToPivot: Column[] = [];\n\n    private pinned: string;\n\n    constructor(pinned: string) {\n        this.pinned = pinned;\n    }\n\n    /** Callback for when drag enters */\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        this.clearColumnsList();\n\n        // in pivot mode, we don't accept any drops if functions are read only\n        if (this.gridOptionsWrapper.isFunctionsReadOnly()) { return; }\n\n        const dragColumns: Column[] = draggingEvent.dragItem.columns;\n\n        dragColumns.forEach(column => {\n            // we don't allow adding secondary columns\n            if (!column.isPrimary()) { return; }\n\n            if (column.isAnyFunctionActive()) { return; }\n\n            if (column.isAllowValue()) {\n                this.columnsToAggregate.push(column);\n            } else if (column.isAllowRowGroup()) {\n                this.columnsToGroup.push(column);\n            } else if (column.isAllowRowGroup()) {\n                this.columnsToPivot.push(column);\n            }\n\n        });\n    }\n\n    public getIconName(): string {\n        const totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\n        if (totalColumns > 0) {\n            return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n        } else {\n            return null;\n        }\n    }\n\n    /** Callback for when drag leaves */\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        // if we are taking columns out of the center, then we remove them from the report\n        this.clearColumnsList();\n    }\n\n    private clearColumnsList(): void {\n        this.columnsToAggregate.length = 0;\n        this.columnsToGroup.length = 0;\n        this.columnsToPivot.length = 0;\n    }\n\n    /** Callback for when dragging */\n    public onDragging(draggingEvent: DraggingEvent): void {\n    }\n\n    /** Callback for when drag stops */\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        if (this.columnsToAggregate.length > 0) {\n            this.columnController.addValueColumns(this.columnsToAggregate, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToGroup.length > 0) {\n            this.columnController.addRowGroupColumns(this.columnsToGroup, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToPivot.length > 0) {\n            this.columnController.addPivotColumns(this.columnsToPivot, \"toolPanelDragAndDrop\");\n        }\n    }\n\n}"]}