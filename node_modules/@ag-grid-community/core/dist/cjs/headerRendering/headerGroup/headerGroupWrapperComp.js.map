{"version":3,"sources":["../../src/ts/headerRendering/headerGroup/headerGroupWrapperComp.ts"],"names":[],"mappings":"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","file":"headerGroupWrapperComp.js","sourcesContent":["import { ColGroupDef } from \"../../entities/colDef\";\nimport { Component } from \"../../widgets/component\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { ColumnApi } from \"../../columnController/columnApi\";\nimport { ColumnController, ColumnResizeSet } from \"../../columnController/columnController\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { HorizontalResizeService } from \"../horizontalResizeService\";\nimport { Autowired, Context, PostConstruct } from \"../../context/context\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport {\n    DragAndDropService,\n    DragItem,\n    DragSource,\n    DragSourceType,\n    DropTarget\n} from \"../../dragAndDrop/dragAndDropService\";\nimport { SetLeftFeature } from \"../../rendering/features/setLeftFeature\";\nimport { IHeaderGroupComp, IHeaderGroupParams } from \"./headerGroupComp\";\nimport { GridApi } from \"../../gridApi\";\nimport { UserComponentFactory } from \"../../components/framework/userComponentFactory\";\nimport { Beans } from \"../../rendering/beans\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { _ } from \"../../utils\";\nimport { Constants } from \"../../constants\";\n\nexport class HeaderGroupWrapperComp extends Component {\n\n    private static TEMPLATE =\n        '<div class=\"ag-header-group-cell\" role=\"presentation\">' +\n        '  <div ref=\"agResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>' +\n        '</div>';\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('horizontalResizeService') private horizontalResizeService: HorizontalResizeService;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('beans') private beans: Beans;\n\n    private readonly columnGroup: ColumnGroup;\n    private readonly dragSourceDropTarget: DropTarget;\n    private readonly pinned: string;\n\n    private eHeaderCellResize: HTMLElement;\n\n    private resizeCols: Column[];\n    private resizeStartWidth: number;\n    private resizeRatios: number[];\n\n    private resizeTakeFromCols: Column[];\n    private resizeTakeFromStartWidth: number;\n    private resizeTakeFromRatios: number[];\n\n    // the children can change, we keep destroy functions related to listening to the children here\n    private childColumnsDestroyFuncs: Function[] = [];\n\n    constructor(columnGroup: ColumnGroup, dragSourceDropTarget: DropTarget, pinned: string) {\n        super(HeaderGroupWrapperComp.TEMPLATE);\n        this.columnGroup = columnGroup;\n        this.dragSourceDropTarget = dragSourceDropTarget;\n        this.pinned = pinned;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        CssClassApplier.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.columnGroup);\n\n        const displayName = this.columnController.getDisplayNameForColumnGroup(this.columnGroup, 'header');\n\n        this.appendHeaderGroupComp(displayName);\n\n        this.setupResize();\n        this.addClasses();\n        this.setupWidth();\n        this.addAttributes();\n        this.setupMovingCss();\n        this.setupTooltip();\n\n        this.addFeature(new HoverFeature(this.columnGroup.getOriginalColumnGroup().getLeafColumns(), this.getGui()));\n\n        const setLeftFeature = new SetLeftFeature(this.columnGroup, this.getGui(), this.beans);\n        setLeftFeature.init();\n        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));\n    }\n\n    private setupMovingCss(): void {\n        const originalColumnGroup = this.columnGroup.getOriginalColumnGroup();\n        const leafColumns = originalColumnGroup.getLeafColumns();\n\n        leafColumns.forEach(col => {\n            this.addDestroyableEventListener(col, Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));\n        });\n\n        this.onColumnMovingChanged();\n    }\n\n    public getColumn(): ColumnGroup {\n        return this.columnGroup;\n    }\n\n    public getComponentHolder(): ColGroupDef {\n        return this.columnGroup.getColGroupDef();\n    }\n\n    public getTooltipText(): string | undefined {\n        const colGroupDef = this.getComponentHolder();\n        return colGroupDef && colGroupDef.headerTooltip;\n    }\n\n    private setupTooltip(): void {\n        const tooltipText = this.getTooltipText();\n\n        if (tooltipText == null) { return; }\n\n        if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {\n            this.getGui().setAttribute('title', tooltipText);\n        } else {\n            this.beans.tooltipManager.registerTooltip(this);\n        }\n    }\n\n    private onColumnMovingChanged(): void {\n        // this function adds or removes the moving css, based on if the col is moving.\n        // this is what makes the header go dark when it is been moved (gives impression to\n        // user that the column was picked up).\n        _.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-moving', this.columnGroup.isMoving());\n    }\n\n    private addAttributes(): void {\n        this.getGui().setAttribute(\"col-id\", this.columnGroup.getUniqueId());\n    }\n\n    private appendHeaderGroupComp(displayName: string): void {\n        const params: IHeaderGroupParams = {\n            displayName: displayName,\n            columnGroup: this.columnGroup,\n            setExpanded: (expanded: boolean) => {\n                this.columnController.setColumnGroupOpened(this.columnGroup.getOriginalColumnGroup(), expanded, \"gridInitializing\");\n            },\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsWrapper.getContext()\n        };\n\n        if (!displayName) {\n            let columnGroup = this.columnGroup;\n            const leafCols = columnGroup.getLeafColumns();\n\n            // find the top most column group that represents the same columns. so if we are dragging a group, we also\n            // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels\n            // of grouping, with each group only containing the next group, and the last group containing three columns,\n            // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all\n            // the groups represent the same column set.\n            while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {\n                columnGroup = columnGroup.getParent();\n            }\n\n            const colGroupDef = columnGroup.getColGroupDef();\n\n            if (colGroupDef) {\n                displayName = colGroupDef.headerName;\n            }\n\n            if (!displayName) {\n                displayName = leafCols ? this.columnController.getDisplayNameForColumn(leafCols[0], 'header', true) : '';\n            }\n        }\n\n        const callback = this.afterHeaderCompCreated.bind(this, displayName);\n\n        this.userComponentFactory.newHeaderGroupComponent(params).then(callback);\n    }\n\n    private afterHeaderCompCreated(displayName: string, headerGroupComp: IHeaderGroupComp): void {\n        this.appendChild(headerGroupComp);\n        this.setupMove(headerGroupComp.getGui(), displayName);\n    }\n\n    private addClasses(): void {\n        // having different classes below allows the style to not have a bottom border\n        // on the group header, if no group is specified\n        // columnGroup.getColGroupDef\n        const style = this.columnGroup.isPadding() ? 'no' : 'with';\n\n        this.addCssClass(`ag-header-group-cell-${style}-group`);\n    }\n\n    private setupMove(eHeaderGroup: HTMLElement, displayName: string): void {\n        if (!eHeaderGroup) { return; }\n        if (this.isSuppressMoving()) { return; }\n\n        const allLeafColumns = this.columnGroup.getOriginalColumnGroup().getLeafColumns();\n        const dragSource: DragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eHeaderGroup,\n            dragItemName: displayName,\n            // we add in the original group leaf columns, so we move both visible and non-visible items\n            getDragItem: this.getDragItemForGroup.bind(this),\n            dragSourceDropTarget: this.dragSourceDropTarget,\n            onDragStarted: () => allLeafColumns.forEach(col => col.setMoving(true, \"uiColumnDragged\")),\n            onDragStopped: () => allLeafColumns.forEach(col => col.setMoving(false, \"uiColumnDragged\"))\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n    // and in the order they are currently in the screen.\n    public getDragItemForGroup(): DragItem {\n        const allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns();\n\n        // capture visible state, used when re-entering grid to dictate which columns should be visible\n        const visibleState: { [key: string]: boolean } = {};\n        allColumnsOriginalOrder.forEach(column => visibleState[column.getId()] = column.isVisible());\n\n        const allColumnsCurrentOrder: Column[] = [];\n        this.columnController.getAllDisplayedColumns().forEach(column => {\n            if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n                allColumnsCurrentOrder.push(column);\n                _.removeFromArray(allColumnsOriginalOrder, column);\n            }\n        });\n\n        // we are left with non-visible columns, stick these in at the end\n        allColumnsOriginalOrder.forEach(column => allColumnsCurrentOrder.push(column));\n\n        // create and return dragItem\n        return {\n            columns: allColumnsCurrentOrder,\n            visibleState: visibleState\n        };\n    }\n\n    private isSuppressMoving(): boolean {\n        // if any child is fixed, then don't allow moving\n        let childSuppressesMoving = false;\n        this.columnGroup.getLeafColumns().forEach((column: Column) => {\n            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n                childSuppressesMoving = true;\n            }\n        });\n\n        const result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();\n\n        return result;\n    }\n\n    private setupWidth(): void {\n\n        // we need to listen to changes in child columns, as they impact our width\n        this.addListenersToChildrenColumns();\n\n        // the children belonging to this group can change, so we need to add and remove listeners as they change\n        this.addDestroyableEventListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));\n\n        this.onWidthChanged();\n\n        // the child listeners are not tied to this components life-cycle, as children can get added and removed\n        // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n        // listeners are removed when we finally get destroyed\n        this.addDestroyFunc(this.destroyListenersOnChildrenColumns.bind(this));\n    }\n\n    private onDisplayedChildrenChanged(): void {\n        this.addListenersToChildrenColumns();\n        this.onWidthChanged();\n    }\n\n    private addListenersToChildrenColumns(): void {\n        // first destroy any old listeners\n        this.destroyListenersOnChildrenColumns();\n\n        // now add new listeners to the new set of children\n        const widthChangedListener = this.onWidthChanged.bind(this);\n        this.columnGroup.getLeafColumns().forEach(column => {\n            column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n            column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            this.childColumnsDestroyFuncs.push(() => {\n                column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n                column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            });\n        });\n    }\n\n    private destroyListenersOnChildrenColumns(): void {\n        this.childColumnsDestroyFuncs.forEach(func => func());\n        this.childColumnsDestroyFuncs = [];\n    }\n\n    private onWidthChanged(): void {\n        this.getGui().style.width = this.columnGroup.getActualWidth() + 'px';\n    }\n\n    private setupResize(): void {\n        this.eHeaderCellResize = this.getRefElement('agResize');\n\n        if (!this.columnGroup.isResizable()) {\n            _.removeFromParent(this.eHeaderCellResize);\n            return;\n        }\n\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.eHeaderCellResize,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this, false),\n            onResizeEnd: this.onResizing.bind(this, true)\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n\n        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {\n            const skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n\n            this.eHeaderCellResize.addEventListener('dblclick', (event: MouseEvent) => {\n                // get list of all the column keys we are responsible for\n                const keys: string[] = [];\n                this.columnGroup.getDisplayedLeafColumns().forEach((column: Column) => {\n                    // not all cols in the group may be participating with auto-resize\n                    if (!column.getColDef().suppressAutoSize) {\n                        keys.push(column.getColId());\n                    }\n                });\n\n                if (keys.length > 0) {\n                    this.columnController.autoSizeColumns(keys, skipHeaderOnAutoSize, \"uiColumnResized\");\n                }\n            });\n        }\n    }\n\n    public onResizeStart(shiftKey: boolean): void {\n        const leafCols = this.columnGroup.getDisplayedLeafColumns();\n        this.resizeCols = leafCols.filter(col => col.isResizable());\n        this.resizeStartWidth = 0;\n        this.resizeCols.forEach(col => this.resizeStartWidth += col.getActualWidth());\n        this.resizeRatios = [];\n        this.resizeCols.forEach(col => this.resizeRatios.push(col.getActualWidth() / this.resizeStartWidth));\n\n        let takeFromGroup: ColumnGroup = null;\n        if (shiftKey) {\n            takeFromGroup = this.columnController.getDisplayedGroupAfter(this.columnGroup);\n        }\n\n        if (takeFromGroup) {\n            const takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();\n\n            this.resizeTakeFromCols = takeFromLeafCols.filter(col => col.isResizable());\n\n            this.resizeTakeFromStartWidth = 0;\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromStartWidth += col.getActualWidth());\n            this.resizeTakeFromRatios = [];\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromRatios.push(col.getActualWidth() / this.resizeTakeFromStartWidth));\n        } else {\n            this.resizeTakeFromCols = null;\n            this.resizeTakeFromStartWidth = null;\n            this.resizeTakeFromRatios = null;\n        }\n\n        _.addCssClass(this.getGui(), 'ag-column-resizing');\n\n    }\n\n    public onResizing(finished: boolean, resizeAmount: any): void {\n\n        const resizeSets: ColumnResizeSet[] = [];\n        const resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n\n        resizeSets.push({\n            columns: this.resizeCols,\n            ratios: this.resizeRatios,\n            width: this.resizeStartWidth + resizeAmountNormalised\n        });\n\n        if (this.resizeTakeFromCols) {\n            resizeSets.push({\n                columns: this.resizeTakeFromCols,\n                ratios: this.resizeTakeFromRatios,\n                width: this.resizeTakeFromStartWidth - resizeAmountNormalised\n            });\n        }\n\n        this.columnController.resizeColumnSets(resizeSets, finished, 'uiColumnDragged');\n\n        if (finished) {\n            _.removeCssClass(this.getGui(), 'ag-column-resizing');\n        }\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n    private normaliseDragChange(dragChange: number): number {\n        let result = dragChange;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (this.pinned !== Constants.PINNED_LEFT) {\n                result *= -1;\n            }\n        } else if (this.pinned === Constants.PINNED_RIGHT) {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            result *= -1;\n        }\n\n        return result;\n    }\n}\n"]}