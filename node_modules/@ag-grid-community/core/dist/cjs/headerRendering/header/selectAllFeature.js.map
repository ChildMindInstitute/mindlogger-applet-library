{"version":3,"sources":["../../src/ts/headerRendering/header/selectAllFeature.ts"],"names":[],"mappings":"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","file":"selectAllFeature.js","sourcesContent":["\nimport { AgCheckbox } from \"../../widgets/agCheckbox\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { PostConstruct, Autowired } from \"../../context/context\";\nimport { ColumnApi } from \"../../columnController/columnApi\";\nimport { GridApi } from \"../../gridApi\";\nimport { Events } from \"../../events\";\nimport { EventService } from \"../../eventService\";\nimport { IRowModel } from \"../../interfaces/iRowModel\";\nimport { Constants } from \"../../constants\";\nimport { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { SelectionController } from \"../../selectionController\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\n\nexport class SelectAllFeature extends BeanStub {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('selectionController') private selectionController: SelectionController;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    private cbSelectAllVisible = false;\n    private processingEventFromCheckbox = false;\n    private column: Column;\n\n    private filteredOnly: boolean;\n    private cbSelectAll: AgCheckbox;\n\n    constructor(cbSelectAll: AgCheckbox, column: Column) {\n        super();\n        this.cbSelectAll = cbSelectAll;\n        this.column = column;\n\n        const colDef = column.getColDef();\n        this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        this.showOrHideSelectAll();\n\n        this.addDestroyableEventListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));\n\n        this.addDestroyableEventListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));\n        this.addDestroyableEventListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));\n\n        this.addDestroyableEventListener(this.cbSelectAll, AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));\n    }\n\n    private showOrHideSelectAll(): void {\n\n        this.cbSelectAllVisible = this.isCheckboxSelection();\n        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible);\n\n        if (this.cbSelectAllVisible) {\n            // in case user is trying this feature with the wrong model type\n            this.checkRightRowModelType();\n            // make sure checkbox is showing the right state\n            this.updateStateOfCheckbox();\n        }\n    }\n\n    private onModelChanged(): void {\n        if (!this.cbSelectAllVisible) { return; }\n        this.updateStateOfCheckbox();\n    }\n\n    private onSelectionChanged(): void {\n        if (!this.cbSelectAllVisible) { return; }\n        this.updateStateOfCheckbox();\n    }\n\n    private getNextCheckboxState(selectionCount: SelectionCount): boolean {\n        if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {\n            // if no rows, always have it unselected\n            return false;\n        } else if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {\n            // if mix of selected and unselected, this is the tri-state\n            return null;\n        } else if (selectionCount.selected > 0) {\n            // only selected\n            return true;\n        } else {\n            // nothing selected\n            return false;\n        }\n    }\n\n    private updateStateOfCheckbox(): void {\n\n        if (this.processingEventFromCheckbox) { return; }\n\n        this.processingEventFromCheckbox = true;\n\n        const selectionCount = this.getSelectionCount();\n\n        const allSelected = this.getNextCheckboxState(selectionCount);\n\n        this.cbSelectAll.setValue(allSelected);\n\n        this.processingEventFromCheckbox = false;\n    }\n\n    private getSelectionCount(): SelectionCount {\n        let selectedCount = 0;\n        let notSelectedCount = 0;\n\n        const callback = (node: RowNode) => {\n\n            if (this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) { return; }\n\n            if (node.isSelected()) {\n                selectedCount++;\n            } else if (!node.selectable) {\n                // don't count non-selectable nodes!\n            } else {\n                notSelectedCount++;\n            }\n        };\n\n        if (this.filteredOnly) {\n            this.gridApi.forEachNodeAfterFilter(callback);\n        } else {\n            this.gridApi.forEachNode(callback);\n        }\n\n        return {\n            notSelected: notSelectedCount,\n            selected: selectedCount\n        };\n    }\n\n    private checkRightRowModelType(): void {\n        const rowModelType = this.rowModel.getType();\n        const rowModelMatches = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        if (!rowModelMatches) {\n            console.warn(`ag-Grid: selectAllCheckbox is only available if using normal row model, you are using ${rowModelType}`);\n        }\n    }\n\n    private onCbSelectAll(): void {\n        if (this.processingEventFromCheckbox) { return; }\n        if (!this.cbSelectAllVisible) { return; }\n\n        const value = this.cbSelectAll.getValue();\n        if (value) {\n            this.selectionController.selectAllRowNodes(this.filteredOnly);\n        } else {\n            this.selectionController.deselectAllRowNodes(this.filteredOnly);\n        }\n    }\n\n    private isCheckboxSelection(): boolean {\n        let result = this.column.getColDef().headerCheckboxSelection;\n\n        if (typeof result === 'function') {\n            const func = result as (params: any) => boolean;\n            result = func({\n                column: this.column,\n                colDef: this.column.getColDef(),\n                columnApi: this.columnApi,\n                api: this.gridApi\n            });\n        }\n\n        if (result) {\n            if (this.gridOptionsWrapper.isRowModelServerSide()) {\n                console.warn('headerCheckboxSelection is not supported for Server Side Row Model');\n                return false;\n            }\n            if (this.gridOptionsWrapper.isRowModelInfinite()) {\n                console.warn('headerCheckboxSelection is not supported for Infinite Row Model');\n                return false;\n            }\n            if (this.gridOptionsWrapper.isRowModelViewport()) {\n                console.warn('headerCheckboxSelection is not supported for Viewport Row Model');\n                return false;\n            }\n            // otherwise the row model is compatible, so return true\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n}\n\ninterface SelectionCount {\n    selected: number;\n    notSelected: number;\n}"]}