{"version":3,"sources":["../../src/ts/headerRendering/headerContainer.ts"],"names":[],"mappings":"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","file":"headerContainer.js","sourcesContent":["import { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { Autowired, Context, PostConstruct } from \"../context/context\";\nimport { DragAndDropService, DropTarget } from \"../dragAndDrop/dragAndDropService\";\nimport { ColumnController } from \"../columnController/columnController\";\nimport { GridPanel } from \"../gridPanel/gridPanel\";\nimport { EventService } from \"../eventService\";\nimport { Events } from \"../events\";\nimport { HeaderRowComp, HeaderRowType } from \"./headerRowComp\";\nimport { BodyDropTarget } from \"./bodyDropTarget\";\nimport { Column } from \"../entities/column\";\nimport { ScrollVisibleService } from \"../gridPanel/scrollVisibleService\";\nimport { Component } from \"../widgets/component\";\nimport { _ } from \"../utils\";\nimport {Constants} from \"../constants\";\n\nexport class HeaderContainer {\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('context') private context: Context;\n    @Autowired('$scope') private $scope: any;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n\n    private eContainer: HTMLElement;\n    private eViewport: HTMLElement;\n\n    private headerRowComps: HeaderRowComp[] = [];\n\n    private pinned: string;\n\n    private scrollWidth: number;\n\n    private dropTarget: DropTarget;\n\n    constructor(eContainer: HTMLElement, eViewport: HTMLElement, pinned: string) {\n        this.eContainer = eContainer;\n        this.pinned = pinned;\n        this.eViewport = eViewport;\n    }\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.setupDragAndDrop(gridPanel);\n    }\n\n    public forEachHeaderElement(callback: (renderedHeaderElement: Component) => void): void {\n        this.headerRowComps.forEach(headerRowComp => headerRowComp.forEachHeaderElement(callback));\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();\n\n        // if value changes, then if not pivoting, we at least need to change the label eg from sum() to avg(),\n        // if pivoting, then the columns have changed\n        this.eventService.addEventListener(Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));\n        this.eventService.addEventListener(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));\n        this.eventService.addEventListener(Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n        this.eventService.addEventListener(Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n\n        this.eventService.addEventListener(Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));\n        this.eventService.addEventListener(Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n    }\n\n    // if row group changes, that means we may need to add aggFuncs to the column headers,\n    // if the grid goes from no aggregation (ie no grouping) to grouping\n    private onColumnRowGroupChanged(): void {\n        this.onGridColumnsChanged();\n    }\n\n    // if the agg func of a column changes, then we may need to update the agg func in columns header\n    private onColumnValueChanged(): void {\n        this.onGridColumnsChanged();\n    }\n\n    private onColumnResized(): void {\n        this.setWidthOfPinnedContainer();\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        this.setWidthOfPinnedContainer();\n    }\n\n    private onScrollVisibilityChanged(): void {\n        this.setWidthOfPinnedContainer();\n    }\n\n    private setWidthOfPinnedContainer(): void {\n        const pinningLeft = this.pinned === Constants.PINNED_LEFT;\n        const pinningRight = this.pinned === Constants.PINNED_RIGHT;\n        const controller = this.columnController;\n        const isRtl = this.gridOptionsWrapper.isEnableRtl();\n\n        if (pinningLeft || pinningRight) {\n            // size to fit all columns\n            let width = controller[pinningLeft ? 'getPinnedLeftContainerWidth' : 'getPinnedRightContainerWidth']();\n\n            // if there is a scroll showing (and taking up space, so Windows, and not iOS)\n            // in the body, then we add extra space to keep header aligned with the body,\n            // as body width fits the cols and the scrollbar\n            const addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && ((isRtl && pinningLeft) || (!isRtl && pinningRight));\n            if (addPaddingForScrollbar) {\n                width += this.scrollWidth;\n            }\n\n            _.setFixedWidth(this.eContainer, width);\n        }\n    }\n\n    public destroy(): void {\n        this.removeHeaderRowComps();\n    }\n\n    public getRowComps(): HeaderRowComp[] {\n        return this.headerRowComps;\n    }\n\n    // grid cols have changed - this also means the number of rows in the header can have\n    // changed. so we remove all the old rows and insert new ones for a complete refresh\n    private onGridColumnsChanged() {\n        this.removeAndCreateAllRowComps();\n    }\n\n    private removeAndCreateAllRowComps(): void {\n        this.removeHeaderRowComps();\n        this.createHeaderRowComps();\n    }\n\n    // we expose this for gridOptions.api.refreshHeader() to call\n    public refresh(): void {\n        this.removeAndCreateAllRowComps();\n    }\n\n    private setupDragAndDrop(gridComp: GridPanel): void {\n        const dropContainer = this.eViewport ? this.eViewport : this.eContainer;\n        const bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);\n        this.context.wireBean(bodyDropTarget);\n        bodyDropTarget.registerGridComp(gridComp);\n    }\n\n    private removeHeaderRowComps(): void {\n        this.headerRowComps.forEach(headerRowComp => {\n            headerRowComp.destroy();\n        });\n        this.headerRowComps.length = 0;\n        _.clearElement(this.eContainer);\n    }\n\n    private createHeaderRowComps(): void {\n        // if we are displaying header groups, then we have many rows here.\n        // go through each row of the header, one by one.\n        const rowCount = this.columnController.getHeaderRowCount();\n\n        for (let dept = 0; dept < rowCount; dept++) {\n            const groupRow = dept !== (rowCount - 1);\n            const type = groupRow ? HeaderRowType.COLUMN_GROUP : HeaderRowType.COLUMN;\n            const headerRowComp = new HeaderRowComp(dept, type, this.pinned, this.dropTarget);\n            this.context.wireBean(headerRowComp);\n            this.headerRowComps.push(headerRowComp);\n            headerRowComp.getGui().setAttribute('aria-rowindex', this.headerRowComps.length.toString());\n            this.eContainer.appendChild(headerRowComp.getGui());\n        }\n\n        const includeFloatingFilterRow = this.gridOptionsWrapper.isFloatingFilter() && !this.columnController.isPivotMode();\n\n        if (includeFloatingFilterRow) {\n            const headerRowComp = new HeaderRowComp(rowCount, HeaderRowType.FLOATING_FILTER, this.pinned,  this.dropTarget);\n            this.context.wireBean(headerRowComp);\n            this.headerRowComps.push(headerRowComp);\n            headerRowComp.getGui().setAttribute('aria-rowindex', this.headerRowComps.length.toString());\n            this.eContainer.appendChild(headerRowComp.getGui());\n        }\n    }\n\n}"]}