{"version":3,"sources":["../../src/ts/gridApi.ts"],"names":[],"mappings":"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","file":"gridApi.js","sourcesContent":["import { RowRenderer } from \"./rendering/rowRenderer\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { ColumnController } from \"./columnController/columnController\";\nimport { ColumnApi } from \"./columnController/columnApi\";\nimport { SelectionController } from \"./selectionController\";\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { GridPanel } from \"./gridPanel/gridPanel\";\nimport { ValueService } from \"./valueService/valueService\";\nimport { EventService } from \"./eventService\";\nimport { ColDef, ColGroupDef, IAggFunc } from \"./entities/colDef\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { Constants } from \"./constants\";\nimport { Column } from \"./entities/column\";\nimport { Autowired, Bean, Context, Optional, PostConstruct } from \"./context/context\";\nimport { GridCore } from \"./gridCore\";\nimport { IRowModel } from \"./interfaces/iRowModel\";\nimport { SortController } from \"./sortController\";\nimport { FocusedCellController } from \"./focusedCellController\";\nimport { CellRange, CellRangeParams, IRangeController } from \"./interfaces/iRangeController\";\nimport { CellPosition } from \"./entities/cellPosition\";\nimport { IClipboardService } from \"./interfaces/iClipboardService\";\nimport { IViewportDatasource } from \"./interfaces/iViewportDatasource\";\nimport { IMenuFactory } from \"./interfaces/iMenuFactory\";\nimport { CellRendererFactory } from \"./rendering/cellRendererFactory\";\nimport { IAggFuncService } from \"./interfaces/iAggFuncService\";\nimport { IFilterComp } from \"./interfaces/iFilter\";\nimport { CsvExportParams } from \"./interfaces/exportParams\";\nimport { ExcelExportParams, IExcelCreator } from \"./interfaces/iExcelCreator\";\nimport { IDatasource } from \"./interfaces/iDatasource\";\nimport { IServerSideDatasource } from \"./interfaces/iServerSideDatasource\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { ValueCache } from \"./valueService/valueCache\";\nimport { AlignedGridsService } from \"./alignedGridsService\";\nimport { AgEvent, ColumnEventType } from \"./events\";\nimport { IContextMenuFactory } from \"./interfaces/iContextMenuFactory\";\nimport { ICellRendererComp } from \"./rendering/cellRenderers/iCellRenderer\";\nimport { ICellEditorComp } from \"./interfaces/iCellEditor\";\nimport { HeaderRootComp } from \"./headerRendering/headerRootComp\";\nimport { AnimationFrameService } from \"./misc/animationFrameService\";\nimport { IServerSideRowModel } from \"./interfaces/iServerSideRowModel\";\nimport { IStatusBarService } from \"./interfaces/iStatusBarService\";\nimport { IStatusPanelComp } from \"./interfaces/iStatusPanel\";\nimport { SideBarDef } from \"./entities/sideBar\";\nimport { IChartService, ChartModel } from \"./interfaces/IChartService\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { _ } from \"./utils\";\nimport { ChartRef, ProcessChartOptionsParams } from \"./entities/gridOptions\";\nimport { ChartOptions, ChartType } from \"./interfaces/iChartOptions\";\nimport { IToolPanel } from \"./interfaces/iToolPanel\";\nimport { RowNodeTransaction } from \"./interfaces/rowNodeTransaction\";\nimport { IClientSideRowModel } from \"./interfaces/iClientSideRowModel\";\nimport { RefreshModelParams } from \"./interfaces/refreshModelParams\";\nimport { RowDataTransaction } from \"./interfaces/rowDataTransaction\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { IImmutableService } from \"./interfaces/iImmutableService\";\nimport { IInfiniteRowModel } from \"./interfaces/iInfiniteRowModel\";\nimport { ICsvCreator } from \"./interfaces/iCsvCreator\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService\";\n\nexport interface StartEditingCellParams {\n    rowIndex: number;\n    colKey: string | Column;\n    rowPinned?: string;\n    keyPress?: number;\n    charPress?: string;\n}\n\nexport interface GetCellsParams {\n    rowNodes?: RowNode[];\n    columns?: (string | Column)[];\n}\n\nexport interface RefreshCellsParams extends GetCellsParams {\n    force?: boolean;\n}\n\nexport interface FlashCellsParams extends GetCellsParams { }\n\nexport interface GetCellRendererInstancesParams extends GetCellsParams { }\n\nexport interface GetCellEditorInstancesParams extends GetCellsParams { }\n\nexport interface RedrawRowsParams {\n    rowNodes?: RowNode[];\n}\n\nexport interface CreateRangeChartParams {\n    cellRange: CellRangeParams;\n    chartType: ChartType;\n    chartPalette?: string;\n    chartContainer?: HTMLElement;\n    suppressChartRanges?: boolean;\n    aggFunc?: string | IAggFunc;\n    processChartOptions?: (params: ProcessChartOptionsParams) => ChartOptions<any>;\n}\n\nexport interface CreatePivotChartParams {\n    chartType: ChartType;\n    chartPalette?: string;\n    chartContainer?: HTMLElement;\n    processChartOptions?: (params: ProcessChartOptionsParams) => ChartOptions<any>;\n}\n\nexport interface DetailGridInfo {\n    id: string;\n    api: GridApi | null | undefined;\n    columnApi: ColumnApi | null | undefined;\n}\n\n@Bean('gridApi')\nexport class GridApi {\n\n    @Optional('immutableService') private immutableService: IImmutableService;\n    @Optional('csvCreator') private csvCreator: ICsvCreator;\n    @Optional('excelCreator') private excelCreator: IExcelCreator;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('selectionController') private selectionController: SelectionController;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('alignedGridsService') private alignedGridsService: AlignedGridsService;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('context') private context: Context;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('focusedCellController') private focusedCellController: FocusedCellController;\n    @Optional('rangeController') private rangeController: IRangeController;\n    @Optional('clipboardService') private clipboardService: IClipboardService;\n    @Optional('aggFuncService') private aggFuncService: IAggFuncService;\n    @Autowired('menuFactory') private menuFactory: IMenuFactory;\n    @Optional('contextMenuFactory') private contextMenuFactory: IContextMenuFactory;\n    @Autowired('cellRendererFactory') private cellRendererFactory: CellRendererFactory;\n    @Autowired('valueCache') private valueCache: ValueCache;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Optional('statusBarService') private statusBarService: IStatusBarService;\n    @Optional('chartService') private chartService: IChartService;\n    @Optional('undoRedoService') private undoRedoService: UndoRedoService;\n\n    private gridPanel: GridPanel;\n    private gridCore: GridCore;\n\n    private headerRootComp: HeaderRootComp;\n    private clientSideRowModel: IClientSideRowModel;\n    private infiniteRowModel: IInfiniteRowModel;\n\n    private serverSideRowModel: IServerSideRowModel;\n\n    private detailGridInfoMap: { [id: string]: DetailGridInfo } = {};\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.gridPanel = gridPanel;\n    }\n    public registerGridCore(gridCore: GridCore): void {\n        this.gridCore = gridCore;\n    }\n\n    public registerHeaderRootComp(headerRootComp: HeaderRootComp): void {\n        this.headerRootComp = headerRootComp;\n    }\n\n    @PostConstruct\n    private init(): void {\n        switch (this.rowModel.getType()) {\n            case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:\n                this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n                break;\n            case Constants.ROW_MODEL_TYPE_INFINITE:\n                this.infiniteRowModel = this.rowModel as IInfiniteRowModel;\n                break;\n            case Constants.ROW_MODEL_TYPE_SERVER_SIDE:\n                this.serverSideRowModel = this.rowModel as IServerSideRowModel;\n                break;\n        }\n    }\n\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    public __getAlignedGridService(): AlignedGridsService {\n        return this.alignedGridsService;\n    }\n\n    public addDetailGridInfo(id: string, gridInfo: DetailGridInfo): void {\n        this.detailGridInfoMap[id] = gridInfo;\n    }\n\n    public removeDetailGridInfo(id: string): void {\n        this.detailGridInfoMap[id] = undefined;\n    }\n\n    public getDetailGridInfo(id: string): DetailGridInfo {\n        return this.detailGridInfoMap[id];\n    }\n\n    public forEachDetailGridInfo(callback: (gridInfo: DetailGridInfo, index: number) => void) {\n        let index = 0;\n        _.iterateObject(this.detailGridInfoMap, (id: string, gridInfo: DetailGridInfo) => {\n            // check for undefined, as old references will still be lying around\n            if (_.exists(gridInfo)) {\n                callback(gridInfo, index);\n                index++;\n            }\n        });\n    }\n\n    public getDataAsCsv(params?: CsvExportParams): string {\n        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.getDataAsCsv')) {\n            return this.csvCreator.getDataAsCsv(params);\n        }\n    }\n\n    public exportDataAsCsv(params?: CsvExportParams): void {\n        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.exportDataAsCSv')) {\n            this.csvCreator.exportDataAsCsv(params);\n        }\n    }\n\n    public getDataAsExcel(params?: ExcelExportParams): string {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getDataAsExcel')) {\n            return this.excelCreator.getDataAsExcelXml(params);\n        }\n    }\n\n    public exportDataAsExcel(params?: ExcelExportParams): void {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.exportDataAsExcel')) {\n            this.excelCreator.exportDataAsExcel(params);\n        }\n    }\n\n    /** @deprecated */\n    public setEnterpriseDatasource(datasource: IServerSideDatasource) {\n        console.warn(`ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()`);\n        this.setServerSideDatasource(datasource);\n    }\n\n    public setServerSideDatasource(datasource: IServerSideDatasource) {\n        if (this.gridOptionsWrapper.isRowModelServerSide()) {\n            // should really have an IEnterpriseRowModel interface, so we are not casting to any\n            (this.rowModel as any).setDatasource(datasource);\n        } else {\n            console.warn(`ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '${Constants.ROW_MODEL_TYPE_SERVER_SIDE}'`);\n        }\n    }\n\n    public setDatasource(datasource: IDatasource) {\n        if (this.gridOptionsWrapper.isRowModelInfinite()) {\n            (this.rowModel as IInfiniteRowModel).setDatasource(datasource);\n        } else {\n            console.warn(`ag-Grid: you can only use a datasource when gridOptions.rowModelType is '${Constants.ROW_MODEL_TYPE_INFINITE}'`);\n        }\n    }\n\n    public setViewportDatasource(viewportDatasource: IViewportDatasource) {\n        if (this.gridOptionsWrapper.isRowModelViewport()) {\n            // this is bad coding, because it's using an interface that's exposed in the enterprise.\n            // really we should create an interface in the core for viewportDatasource and let\n            // the enterprise implement it, rather than casting to 'any' here\n            (this.rowModel as any).setViewportDatasource(viewportDatasource);\n        } else {\n            console.warn(`ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '${Constants.ROW_MODEL_TYPE_VIEWPORT}'`);\n        }\n    }\n\n    public setRowData(rowData: any[]) {\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            if (this.gridOptionsWrapper.isDeltaRowDataMode()) {\n                const [transaction, orderIdMap] = this.immutableService.createTransactionForRowData(rowData);\n                this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n                // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened\n                // to the data change event on the row node and refreshed itself.\n                this.rowRenderer.refreshFullWidthRows();\n            } else {\n                this.selectionController.reset();\n                this.clientSideRowModel.setRowData(rowData);\n            }\n        } else {\n            console.warn('cannot call setRowData unless using normal row model');\n        }\n    }\n\n    /** @deprecated */\n    public setFloatingTopRowData(rows: any[]): void {\n        console.warn('ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');\n        this.setPinnedTopRowData(rows);\n    }\n\n    /** @deprecated */\n    public setFloatingBottomRowData(rows: any[]): void {\n        console.warn('ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');\n        this.setPinnedBottomRowData(rows);\n    }\n\n    /** @deprecated */\n    public getFloatingTopRowCount(): number {\n        console.warn('ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');\n        return this.getPinnedTopRowCount();\n    }\n\n    /** @deprecated */\n    public getFloatingBottomRowCount(): number {\n        console.warn('ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');\n        return this.getPinnedBottomRowCount();\n    }\n\n    /** @deprecated */\n    public getFloatingTopRow(index: number): RowNode {\n        console.warn('ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');\n        return this.getPinnedTopRow(index);\n    }\n\n    /** @deprecated */\n    public getFloatingBottomRow(index: number): RowNode {\n        console.warn('ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');\n        return this.getPinnedBottomRow(index);\n    }\n\n    public setPinnedTopRowData(rows: any[]): void {\n        this.pinnedRowModel.setPinnedTopRowData(rows);\n    }\n\n    public setPinnedBottomRowData(rows: any[]): void {\n        this.pinnedRowModel.setPinnedBottomRowData(rows);\n    }\n\n    public getPinnedTopRowCount(): number {\n        return this.pinnedRowModel.getPinnedTopRowCount();\n    }\n\n    public getPinnedBottomRowCount(): number {\n        return this.pinnedRowModel.getPinnedBottomRowCount();\n    }\n\n    public getPinnedTopRow(index: number): RowNode {\n        return this.pinnedRowModel.getPinnedTopRow(index);\n    }\n\n    public getPinnedBottomRow(index: number): RowNode {\n        return this.pinnedRowModel.getPinnedBottomRow(index);\n    }\n\n    public setColumnDefs(colDefs: (ColDef | ColGroupDef)[], source: ColumnEventType = \"api\") {\n        this.columnController.setColumnDefs(colDefs, source);\n    }\n\n    public expireValueCache(): void {\n        this.valueCache.expire();\n    }\n\n    public getVerticalPixelRange(): { top: number, bottom: number } {\n        return this.gridPanel.getVScrollPosition();\n    }\n\n    public getHorizontalPixelRange(): { left: number, right: number } {\n        return this.gridPanel.getHScrollPosition();\n    }\n\n    public setAlwaysShowVerticalScroll(show: boolean) {\n        this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);\n    }\n\n    public refreshToolPanel(): void {\n        this.gridCore.refreshSideBar();\n    }\n\n    public refreshCells(params: RefreshCellsParams = {}): void {\n        if (Array.isArray(params)) {\n            // the old version of refreshCells() took an array of rowNodes for the first argument\n            console.warn('since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.');\n            return;\n        }\n        this.rowRenderer.refreshCells(params);\n    }\n\n    public flashCells(params: FlashCellsParams = {}): void {\n        this.rowRenderer.flashCells(params);\n    }\n\n    public redrawRows(params: RedrawRowsParams = {}): void {\n        if (params && params.rowNodes) {\n            this.rowRenderer.redrawRows(params.rowNodes);\n        } else {\n            this.rowRenderer.redrawAfterModelUpdate();\n        }\n    }\n\n    public timeFullRedraw(count = 1) {\n\n        let iterationCount = 0;\n        let totalProcessing = 0;\n        let totalReflow = 0;\n\n        const that = this;\n\n        doOneIteration();\n\n        function doOneIteration(): void {\n            const start = (new Date()).getTime();\n            that.rowRenderer.redrawAfterModelUpdate();\n            const endProcessing = (new Date()).getTime();\n            window.setTimeout(() => {\n                const endReflow = (new Date()).getTime();\n                const durationProcessing = endProcessing - start;\n                const durationReflow = endReflow - endProcessing;\n                // tslint:disable-next-line\n                console.log('duration:  processing = ' + durationProcessing + 'ms, reflow = ' + durationReflow + 'ms');\n\n                iterationCount++;\n                totalProcessing += durationProcessing;\n                totalReflow += durationReflow;\n\n                if (iterationCount < count) {\n                    // wait for 1s between tests\n                    window.setTimeout(doOneIteration, 1000);\n                } else {\n                    finish();\n                }\n\n            }, 0);\n        }\n\n        function finish(): void {\n            // tslint:disable-next-line\n            console.log('tests complete. iteration count = ' + iterationCount);\n            // tslint:disable-next-line\n            console.log('average processing = ' + (totalProcessing / iterationCount) + 'ms');\n            // tslint:disable-next-line\n            console.log('average reflow = ' + (totalReflow / iterationCount) + 'ms');\n        }\n    }\n\n    /** @deprecated */\n    public refreshView() {\n        console.warn('ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');\n        this.redrawRows();\n    }\n\n    //** @deprecated */\n    public refreshRows(rowNodes: RowNode[]): void {\n        console.warn('since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');\n        this.refreshCells({ rowNodes: rowNodes });\n    }\n\n    /** @deprecated */\n    public rowDataChanged(rows: any) {\n        console.warn('ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');\n        this.redrawRows();\n    }\n\n    /** @deprecated */\n    public softRefreshView() {\n        console.error('ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');\n    }\n\n    /** @deprecated */\n    public refreshGroupRows() {\n        console.warn('ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' +\n            'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' +\n            'not be necessary to only refresh the group rows.');\n        this.refreshCells();\n    }\n\n    public setFunctionsReadOnly(readOnly: boolean) {\n        this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);\n    }\n\n    public refreshHeader() {\n        this.headerRootComp.refreshHeader();\n        this.gridPanel.setHeaderAndFloatingHeights();\n    }\n\n    public isAnyFilterPresent(): boolean {\n        return this.filterManager.isAnyFilterPresent();\n    }\n\n    public isAdvancedFilterPresent(): boolean {\n        console.warn('ag-Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()');\n        return this.isColumnFilterPresent();\n    }\n\n    public isColumnFilterPresent(): boolean {\n        return this.filterManager.isAdvancedFilterPresent();\n    }\n\n    public isQuickFilterPresent(): boolean {\n        return this.filterManager.isQuickFilterPresent();\n    }\n\n    public getModel(): IRowModel {\n        return this.rowModel;\n    }\n\n    public setRowNodeExpanded(rowNode: RowNode, expanded: boolean): void {\n        if (rowNode) {\n            rowNode.setExpanded(expanded);\n        }\n    }\n\n    public onGroupExpandedOrCollapsed(deprecated_refreshFromIndex?: any) {\n        if (_.missing(this.clientSideRowModel)) { console.warn('ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model'); }\n        if (_.exists(deprecated_refreshFromIndex)) { console.warn('ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows'); }\n        // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n        this.clientSideRowModel.refreshModel({ step: Constants.STEP_MAP });\n    }\n\n    public refreshInMemoryRowModel(step?: string): any {\n        console.warn(`ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()`);\n        this.refreshClientSideRowModel(step);\n    }\n\n    public refreshClientSideRowModel(step?: string): any {\n        if (_.missing(this.clientSideRowModel)) { console.warn('cannot call refreshClientSideRowModel unless using normal row model'); }\n\n        let paramsStep = Constants.STEP_EVERYTHING;\n        const stepsMapped: any = {\n            group: Constants.STEP_EVERYTHING,\n            filter: Constants.STEP_FILTER,\n            map: Constants.STEP_MAP,\n            aggregate: Constants.STEP_AGGREGATE,\n            sort: Constants.STEP_SORT,\n            pivot: Constants.STEP_PIVOT\n        };\n\n        if (_.exists(step)) {\n            paramsStep = stepsMapped[step];\n        }\n        if (_.missing(paramsStep)) {\n            console.error(`ag-Grid: invalid step ${step}, available steps are ${Object.keys(stepsMapped).join(', ')}`);\n            return;\n        }\n\n        const modelParams: RefreshModelParams = {\n            step: paramsStep,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        };\n\n        this.clientSideRowModel.refreshModel(modelParams);\n    }\n\n    public isAnimationFrameQueueEmpty(): boolean {\n        return this.animationFrameService.isQueueEmpty();\n    }\n\n    public getRowNode(id: string): RowNode {\n        return this.rowModel.getRowNode(id);\n    }\n\n    public expandAll() {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('ag-Grid: cannot call expandAll unless using normal row model');\n            return;\n        }\n        this.clientSideRowModel.expandOrCollapseAll(true);\n    }\n\n    public collapseAll() {\n        if (_.missing(this.clientSideRowModel)) {\n            console.warn('ag-Grid: cannot call collapseAll unless using normal row model');\n            return;\n        }\n        this.clientSideRowModel.expandOrCollapseAll(false);\n    }\n\n    public getToolPanelInstance(id: string): IToolPanel {\n        return this.gridCore.getToolPanelInstance(id);\n    }\n\n    public addVirtualRowListener(eventName: string, rowIndex: number, callback: Function) {\n        if (typeof eventName !== 'string') {\n            console.warn('ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');\n        }\n        this.addRenderedRowListener(eventName, rowIndex, callback);\n    }\n\n    public addRenderedRowListener(eventName: string, rowIndex: number, callback: Function) {\n        if (eventName === 'virtualRowSelected') {\n            console.warn(`ag-Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node.`);\n        }\n        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);\n    }\n\n    public setQuickFilter(newFilter: any): void {\n        this.filterManager.setQuickFilter(newFilter);\n    }\n\n    public selectIndex(index: any, tryMulti: any, suppressEvents: any) {\n        console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionController.selectIndex(index, tryMulti);\n    }\n\n    public deselectIndex(index: number, suppressEvents: boolean = false) {\n        console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionController.deselectIndex(index);\n    }\n\n    public selectNode(node: RowNode, tryMulti: boolean = false, suppressEvents: boolean = false) {\n        console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });\n    }\n\n    public deselectNode(node: RowNode, suppressEvents: boolean = false) {\n        console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: false });\n    }\n\n    public selectAll() {\n        this.selectionController.selectAllRowNodes();\n    }\n\n    public deselectAll() {\n        this.selectionController.deselectAllRowNodes();\n    }\n\n    public selectAllFiltered() {\n        this.selectionController.selectAllRowNodes(true);\n    }\n\n    public deselectAllFiltered() {\n        this.selectionController.deselectAllRowNodes(true);\n    }\n\n    public recomputeAggregates(): void {\n        if (_.missing(this.clientSideRowModel)) { console.warn('cannot call recomputeAggregates unless using normal row model'); }\n        console.warn(`recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead`);\n        this.clientSideRowModel.refreshModel({ step: Constants.STEP_AGGREGATE });\n    }\n\n    public sizeColumnsToFit() {\n        this.gridPanel.sizeColumnsToFit();\n    }\n\n    public showLoadingOverlay(): void {\n        this.gridPanel.showLoadingOverlay();\n    }\n\n    public showNoRowsOverlay(): void {\n        this.gridPanel.showNoRowsOverlay();\n    }\n\n    public hideOverlay(): void {\n        this.gridPanel.hideOverlay();\n    }\n\n    public isNodeSelected(node: any) {\n        console.warn('ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');\n        return node.isSelected();\n    }\n\n    public getSelectedNodesById(): { [nodeId: number]: RowNode; } {\n        console.error('ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');\n        return null;\n    }\n\n    public getSelectedNodes(): RowNode[] {\n        return this.selectionController.getSelectedNodes();\n    }\n\n    public getSelectedRows(): any[] {\n        return this.selectionController.getSelectedRows();\n    }\n\n    public getBestCostNodeSelection() {\n        return this.selectionController.getBestCostNodeSelection();\n    }\n\n    public getRenderedNodes() {\n        return this.rowRenderer.getRenderedNodes();\n    }\n\n    public ensureColIndexVisible(index: any) {\n        console.warn('ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');\n    }\n\n    public ensureColumnVisible(key: string | Column) {\n        this.gridPanel.ensureColumnVisible(key);\n    }\n\n    // Valid values for position are bottom, middle and top\n    public ensureIndexVisible(index: any, position?: string) {\n        this.gridPanel.ensureIndexVisible(index, position);\n    }\n\n    // Valid values for position are bottom, middle and top\n    public ensureNodeVisible(comparator: any, position?: string) {\n        this.gridCore.ensureNodeVisible(comparator, position);\n    }\n\n    public forEachLeafNode(callback: (rowNode: RowNode) => void) {\n        if (_.missing(this.clientSideRowModel)) { console.warn('cannot call forEachNode unless using normal row model'); }\n        this.clientSideRowModel.forEachLeafNode(callback);\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void) {\n        this.rowModel.forEachNode(callback);\n    }\n\n    public forEachNodeAfterFilter(callback: (rowNode: RowNode, index: number) => void) {\n        if (_.missing(this.clientSideRowModel)) { console.warn('cannot call forEachNodeAfterFilter unless using normal row model'); }\n        this.clientSideRowModel.forEachNodeAfterFilter(callback);\n    }\n\n    public forEachNodeAfterFilterAndSort(callback: (rowNode: RowNode, index: number) => void) {\n        if (_.missing(this.clientSideRowModel)) { console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model'); }\n        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n    }\n\n    public getFilterApiForColDef(colDef: any): any {\n        console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');\n        return this.getFilterInstance(colDef);\n    }\n\n    public getFilterInstance(key: string | Column): IFilterComp {\n        const column = this.columnController.getPrimaryColumn(key);\n        if (column) {\n            return this.filterManager.getFilterComponent(column, 'NO_UI').resolveNow<IFilterComp>(null, filterComp => filterComp);\n        }\n    }\n\n    public getFilterApi(key: string | Column) {\n        console.warn('ag-Grid: getFilterApi is deprecated, use getFilterInstance instead');\n        return this.getFilterInstance(key);\n    }\n\n    public destroyFilter(key: string | Column) {\n        const column = this.columnController.getPrimaryColumn(key);\n        if (column) {\n            return this.filterManager.destroyFilter(column, \"filterDestroyed\");\n        }\n    }\n\n    public getStatusPanel(key: string): IStatusPanelComp {\n        if (this.statusBarService) {\n            return this.statusBarService.getStatusPanel(key);\n        }\n    }\n\n    public getColumnDef(key: string | Column) {\n        const column = this.columnController.getPrimaryColumn(key);\n        if (column) {\n            return column.getColDef();\n        } else {\n            return null;\n        }\n    }\n\n    public onFilterChanged() {\n        this.filterManager.onFilterChanged();\n    }\n\n    public onSortChanged() {\n        this.sortController.onSortChanged();\n    }\n\n    public setSortModel(sortModel: any, source: ColumnEventType = \"api\") {\n        this.sortController.setSortModel(sortModel, source);\n    }\n\n    public getSortModel() {\n        return this.sortController.getSortModel();\n    }\n\n    public setFilterModel(model: any) {\n        this.filterManager.setFilterModel(model);\n    }\n\n    public getFilterModel() {\n        return this.filterManager.getFilterModel();\n    }\n\n    public getFocusedCell(): CellPosition {\n        return this.focusedCellController.getFocusedCell();\n    }\n\n    public clearFocusedCell(): void {\n        return this.focusedCellController.clearFocusedCell();\n    }\n\n    public setFocusedCell(rowIndex: number, colKey: string | Column, floating?: string) {\n        this.focusedCellController.setFocusedCell(rowIndex, colKey, floating, true);\n    }\n\n    public setSuppressRowDrag(value: boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);\n    }\n\n    public setHeaderHeight(headerHeight: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    }\n\n    public setGridAutoHeight(gridAutoHeight: boolean) {\n        console.warn('api.setGridAutoHeight(boolean) is deprecated, please use api.setDomLayout() instead');\n        this.setDomLayout(gridAutoHeight ? 'autoHeight' : 'normal');\n    }\n\n    public setDomLayout(domLayout: string) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);\n    }\n\n    public setEnableCellTextSelection(selectable: boolean) {\n        this.gridPanel.setCellTextSelection(selectable);\n    }\n\n    public setGroupHeaderHeight(headerHeight: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    }\n\n    public setFloatingFiltersHeight(headerHeight: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);\n        this.doLayout();\n    }\n\n    public setPivotGroupHeaderHeight(headerHeight: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    }\n\n    public setPivotHeaderHeight(headerHeight: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);\n        this.doLayout();\n    }\n\n    public isSideBarVisible() {\n        return this.gridCore.isSideBarVisible();\n    }\n\n    public setSideBarVisible(show: boolean) {\n        this.gridCore.setSideBarVisible(show);\n    }\n\n    public setSideBarPosition(position: 'left' | 'right') {\n        this.gridCore.setSideBarPosition(position);\n    }\n\n    public showToolPanel(show: boolean) {\n        console.warn(`ag-grid: from v19 api.showToolPanel has been deprecated in favour of api.setSideBarVisible`);\n        this.setSideBarVisible(show);\n    }\n\n    public openToolPanel(key: string) {\n        this.gridCore.openToolPanel(key);\n    }\n\n    public closeToolPanel() {\n        this.gridCore.closeToolPanel();\n    }\n\n    public getOpenedToolPanel(): string {\n        return this.gridCore.getOpenedToolPanel();\n    }\n\n    public getSideBar(): SideBarDef {\n        return this.gridCore.getSideBar();\n    }\n\n    public setSideBar(def: SideBarDef): void {\n        return this.gridCore.setSideBar(def);\n    }\n\n    public setSuppressClipboardPaste(value: boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);\n    }\n\n    public isToolPanelShowing() {\n        return this.gridCore.isToolPanelShowing();\n    }\n\n    public doLayout() {\n        this.gridPanel.checkViewportAndScrolls();\n    }\n\n    public resetRowHeights() {\n        if (_.exists(this.clientSideRowModel)) {\n            this.clientSideRowModel.resetRowHeights();\n        }\n    }\n\n    public setGroupRemoveSingleChildren(value: boolean) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);\n    }\n\n    public setGroupRemoveLowestSingleChildren(value: boolean) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);\n    }\n\n    public onRowHeightChanged() {\n        if (_.exists(this.clientSideRowModel)) {\n            this.clientSideRowModel.onRowHeightChanged();\n        }\n    }\n\n    public getValue(colKey: string | Column, rowNode: RowNode): any {\n        let column = this.columnController.getPrimaryColumn(colKey);\n        if (_.missing(column)) {\n            column = this.columnController.getGridColumn(colKey);\n        }\n        if (_.missing(column)) {\n            return null;\n        } else {\n            return this.valueService.getValue(column, rowNode);\n        }\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        const async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addEventListener(eventType, listener, async);\n    }\n\n    public addGlobalListener(listener: Function): void {\n        const async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addGlobalListener(listener, async);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        const async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeEventListener(eventType, listener, async);\n    }\n\n    public removeGlobalListener(listener: Function): void {\n        const async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeGlobalListener(listener, async);\n    }\n\n    public dispatchEvent(event: AgEvent): void {\n        this.eventService.dispatchEvent(event);\n    }\n\n    public destroy(): void {\n        // destroy the UI first (as they use the services)\n        this.gridCore.destroy();\n        // destroy the services\n        this.context.destroy();\n    }\n\n    public resetQuickFilter(): void {\n        this.rowModel.forEachNode(node => node.quickFilterAggregateText = null);\n    }\n\n    public getRangeSelections(): any {\n        console.warn(`ag-Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\n        getCellRanges() is a bit different, please check the ag-Grid documentation.`);\n        return null;\n    }\n\n    public getCellRanges(): CellRange[] {\n        if (this.rangeController) {\n            return this.rangeController.getCellRanges();\n        } else {\n            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');\n            return null;\n        }\n    }\n\n    public camelCaseToHumanReadable(camelCase: string): string {\n        return _.camelCaseToHumanText(camelCase);\n    }\n\n    public addRangeSelection(deprecatedNoLongerUsed: any): void {\n        console.warn('ag-Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()');\n    }\n\n    public addCellRange(params: CellRangeParams): void {\n        if (!this.rangeController) { console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise'); }\n        this.rangeController.addCellRange(params);\n    }\n\n    public clearRangeSelection(): void {\n        if (!this.rangeController) { console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise'); }\n        this.rangeController.removeAllCellRanges();\n    }\n\n    public undoCellEditing(): void {\n        this.undoRedoService.undo();\n    }\n\n    public redoCellEditing(): void {\n        this.undoRedoService.redo();\n    }\n\n    public getChartModels(): ChartModel[] {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartModels') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartModels')) {\n            return this.chartService.getChartModels();\n        }\n    }\n\n    public createRangeChart(params: CreateRangeChartParams): ChartRef | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createRangeChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createRangeChart')) {\n            return this.chartService.createRangeChart(params);\n        }\n    }\n\n    public createPivotChart(params: CreatePivotChartParams): ChartRef | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createPivotChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createPivotChart')) {\n            return this.chartService.createPivotChart(params);\n        }\n    }\n\n    public copySelectedRowsToClipboard(includeHeader: boolean, columnKeys?: (string | Column)[]): void {\n        if (!this.clipboardService) { console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise'); }\n        this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);\n    }\n\n    public copySelectedRangeToClipboard(includeHeader: boolean): void {\n        if (!this.clipboardService) { console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise'); }\n        this.clipboardService.copySelectedRangeToClipboard(includeHeader);\n    }\n\n    public copySelectedRangeDown(): void {\n        if (!this.clipboardService) { console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise'); }\n        this.clipboardService.copyRangeDown();\n    }\n\n    public showColumnMenuAfterButtonClick(colKey: string | Column, buttonElement: HTMLElement): void {\n        // use grid column so works with pivot mode\n        const column = this.columnController.getGridColumn(colKey);\n        this.menuFactory.showMenuAfterButtonClick(column, buttonElement);\n    }\n\n    public showColumnMenuAfterMouseClick(colKey: string | Column, mouseEvent: MouseEvent | Touch): void {\n        // use grid column so works with pivot mode\n        const column = this.columnController.getGridColumn(colKey);\n        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);\n    }\n\n    public hidePopupMenu(): void {\n        // hide the context menu if in enterprise\n        if (this.contextMenuFactory) {\n            this.contextMenuFactory.hideActiveMenu();\n        }\n        // and hide the column menu always\n        this.menuFactory.hideActiveMenu();\n    }\n\n    public setPopupParent(ePopupParent: HTMLElement): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);\n    }\n\n    public tabToNextCell(): boolean {\n        return this.rowRenderer.tabToNextCell(false);\n    }\n\n    public tabToPreviousCell(): boolean {\n        return this.rowRenderer.tabToNextCell(true);\n    }\n\n    public getCellRendererInstances(params: GetCellRendererInstancesParams = {}): ICellRendererComp[] {\n        return this.rowRenderer.getCellRendererInstances(params);\n    }\n\n    public getCellEditorInstances(params: GetCellEditorInstancesParams = {}): ICellEditorComp[] {\n        return this.rowRenderer.getCellEditorInstances(params);\n    }\n\n    public getEditingCells(): CellPosition[] {\n        return this.rowRenderer.getEditingCells();\n    }\n\n    public stopEditing(cancel: boolean = false): void {\n        this.rowRenderer.stopEditing(cancel);\n    }\n\n    public startEditingCell(params: StartEditingCellParams): void {\n        const column = this.columnController.getGridColumn(params.colKey);\n        if (!column) {\n            console.warn(`ag-Grid: no column found for ${params.colKey}`);\n            return;\n        }\n        const cellPosition: CellPosition = {\n            rowIndex: params.rowIndex,\n            rowPinned: params.rowPinned,\n            column: column\n        };\n        const notPinned = _.missing(params.rowPinned);\n        if (notPinned) {\n            this.gridPanel.ensureIndexVisible(params.rowIndex);\n        }\n        this.rowRenderer.startEditingCell(cellPosition, params.keyPress, params.charPress);\n    }\n\n    public addAggFunc(key: string, aggFunc: IAggFunc): void {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFunc(key, aggFunc);\n        }\n    }\n\n    public addAggFuncs(aggFuncs: { [key: string]: IAggFunc }): void {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFuncs(aggFuncs);\n        }\n    }\n\n    public clearAggFuncs(): void {\n        if (this.aggFuncService) {\n            this.aggFuncService.clear();\n        }\n    }\n\n    public updateRowData(rowDataTransaction: RowDataTransaction): RowNodeTransaction {\n        let res: RowNodeTransaction = null;\n        if (this.clientSideRowModel) {\n            res = this.clientSideRowModel.updateRowData(rowDataTransaction);\n        } else if (this.infiniteRowModel) {\n            this.infiniteRowModel.updateRowData(rowDataTransaction);\n        } else {\n            console.error('ag-Grid: updateRowData() only works with ClientSideRowModel and InfiniteRowModel.');\n        }\n\n        // refresh all the full width rows\n        this.rowRenderer.refreshFullWidthRows();\n\n        // do change detection for all present cells\n        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {\n            this.rowRenderer.refreshCells();\n        }\n\n        return res;\n    }\n\n    public batchUpdateRowData(rowDataTransaction: RowDataTransaction, callback?: (res: RowNodeTransaction) => void): void {\n        if (!this.clientSideRowModel) {\n            console.error('ag-Grid: api.batchUpdateRowData() only works with ClientSideRowModel.');\n            return;\n        }\n        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);\n    }\n\n    public insertItemsAtIndex(index: number, items: any[], skipRefresh = false): void {\n        console.warn('ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });\n    }\n\n    public removeItems(rowNodes: RowNode[], skipRefresh = false): void {\n        console.warn('ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');\n        const dataToRemove: any[] = rowNodes.map(rowNode => rowNode.data);\n        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });\n    }\n\n    public addItems(items: any[], skipRefresh = false): void {\n        console.warn('ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });\n    }\n\n    public refreshVirtualPageCache(): void {\n        console.warn('ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    }\n\n    public refreshInfinitePageCache(): void {\n        console.warn('ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    }\n\n    public refreshInfiniteCache(): void {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.refreshCache();\n        } else {\n            console.warn(`ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.`);\n        }\n    }\n\n    public purgeVirtualPageCache(): void {\n        console.warn('ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfinitePageCache();\n    }\n\n    public purgeInfinitePageCache(): void {\n        console.warn('ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfiniteCache();\n    }\n\n    public purgeInfiniteCache(): void {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.purgeCache();\n        } else {\n            console.warn(`ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.`);\n        }\n    }\n\n    /** @deprecated */\n    public purgeEnterpriseCache(route?: string[]): void {\n        console.warn(`ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()`);\n        this.purgeServerSideCache(route);\n    }\n\n    public purgeServerSideCache(route?: string[]): void {\n        if (this.serverSideRowModel) {\n            this.serverSideRowModel.purgeCache(route);\n        } else {\n            console.warn(`ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.`);\n        }\n    }\n\n    public getVirtualRowCount(): number {\n        console.warn('ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');\n        return this.getInfiniteRowCount();\n    }\n\n    public getInfiniteRowCount(): number {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.getVirtualRowCount();\n        } else {\n            console.warn(`ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.`);\n        }\n    }\n\n    public isMaxRowFound(): boolean {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.isMaxRowFound();\n        } else {\n            console.warn(`ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.`);\n        }\n    }\n\n    public setVirtualRowCount(rowCount: number, maxRowFound?: boolean): void {\n        console.warn('ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');\n        this.setInfiniteRowCount(rowCount, maxRowFound);\n    }\n\n    public setInfiniteRowCount(rowCount: number, maxRowFound?: boolean): void {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.setVirtualRowCount(rowCount, maxRowFound);\n        } else {\n            console.warn(`ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.`);\n        }\n    }\n\n    public getVirtualPageState(): any {\n        console.warn('ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    }\n\n    public getInfinitePageState(): any {\n        console.warn('ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    }\n\n    public getCacheBlockState(): any {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.getBlockState();\n        } else if (this.serverSideRowModel) {\n            return this.serverSideRowModel.getBlockState();\n        } else {\n            console.warn(`ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.`);\n        }\n    }\n\n    public checkGridSize(): void {\n        this.gridPanel.setHeaderAndFloatingHeights();\n    }\n\n    public getFirstRenderedRow(): number {\n        console.warn('in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');\n        return this.getFirstDisplayedRow();\n    }\n\n    public getFirstDisplayedRow(): number {\n        return this.rowRenderer.getFirstVirtualRenderedRow();\n    }\n\n    public getLastRenderedRow(): number {\n        console.warn('in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');\n        return this.getLastDisplayedRow();\n    }\n\n    public getLastDisplayedRow(): number {\n        return this.rowRenderer.getLastVirtualRenderedRow();\n    }\n\n    public getDisplayedRowAtIndex(index: number): RowNode {\n        return this.rowModel.getRow(index);\n    }\n\n    public getDisplayedRowCount(): number {\n        return this.rowModel.getRowCount();\n    }\n\n    public paginationIsLastPageFound(): boolean {\n        return this.paginationProxy.isLastPageFound();\n    }\n\n    public paginationGetPageSize(): number {\n        return this.paginationProxy.getPageSize();\n    }\n\n    public paginationSetPageSize(size: number): void {\n        this.gridOptionsWrapper.setProperty('paginationPageSize', size);\n    }\n\n    public paginationGetCurrentPage(): number {\n        return this.paginationProxy.getCurrentPage();\n    }\n\n    public paginationGetTotalPages(): number {\n        return this.paginationProxy.getTotalPages();\n    }\n\n    public paginationGetRowCount(): number {\n        return this.paginationProxy.getMasterRowCount();\n    }\n\n    public paginationGoToNextPage(): void {\n        this.paginationProxy.goToNextPage();\n    }\n\n    public paginationGoToPreviousPage(): void {\n        this.paginationProxy.goToPreviousPage();\n    }\n\n    public paginationGoToFirstPage(): void {\n        this.paginationProxy.goToFirstPage();\n    }\n\n    public paginationGoToLastPage(): void {\n        this.paginationProxy.goToLastPage();\n    }\n\n    public paginationGoToPage(page: number): void {\n        this.paginationProxy.goToPage(page);\n    }\n}\n"]}