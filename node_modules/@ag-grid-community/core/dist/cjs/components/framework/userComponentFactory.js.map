{"version":3,"sources":["../../src/ts/components/framework/userComponentFactory.ts"],"names":[],"mappings":"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","file":"userComponentFactory.js","sourcesContent":["import { Autowired, Bean, Context, Optional } from \"../../context/context\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { FrameworkComponentWrapper } from \"./frameworkComponentWrapper\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { ColDef, ColGroupDef } from \"../../entities/colDef\";\nimport {\n    AgGridComponentFunctionInput,\n    AgGridRegisteredComponentInput,\n    RegisteredComponent,\n    RegisteredComponentSource,\n    UserComponentRegistry\n} from \"./userComponentRegistry\";\nimport { AgComponentUtils } from \"./agComponentUtils\";\nimport { ComponentMetadata, ComponentMetadataProvider } from \"./componentMetadataProvider\";\nimport { ISetFilterParams } from \"../../interfaces/iSetFilterParams\";\nimport { IRichCellEditorParams } from \"../../interfaces/iRichCellEditorParams\";\nimport { ToolPanelDef } from \"../../entities/sideBar\";\nimport { _, Promise } from \"../../utils\";\nimport { IDateComp, IDateParams } from \"../../rendering/dateComponent\";\nimport { IHeaderComp, IHeaderParams } from \"../../headerRendering/header/headerComp\";\nimport { IHeaderGroupComp, IHeaderGroupParams } from \"../../headerRendering/headerGroup/headerGroupComp\";\nimport { ICellRendererComp, ICellRendererParams } from \"../../rendering/cellRenderers/iCellRenderer\";\nimport { GroupCellRendererParams } from \"../../rendering/cellRenderers/groupCellRenderer\";\nimport { ILoadingOverlayComp } from \"../../rendering/overlays/loadingOverlayComponent\";\nimport { INoRowsOverlayComp } from \"../../rendering/overlays/noRowsOverlayComponent\";\nimport { ITooltipComp, ITooltipParams } from \"../../rendering/tooltipComponent\";\nimport { IFilterComp, IFilterParams } from \"../../interfaces/iFilter\";\nimport { IFloatingFilterComp } from \"../../filter/floating/floatingFilter\";\nimport { ICellEditorComp } from \"../../interfaces/iCellEditor\";\nimport { IToolPanelComp } from \"../../interfaces/iToolPanel\";\nimport { StatusPanelDef } from \"../../interfaces/iStatusPanel\";\n\nexport type DefinitionObject =\n    GridOptions\n    | ColDef\n    | ColGroupDef\n    | ISetFilterParams\n    | IRichCellEditorParams\n    | ToolPanelDef\n    | StatusPanelDef;\n\nexport type AgComponentPropertyInput<A extends IComponent<any>> = AgGridRegisteredComponentInput<A> | string | boolean;\n\nexport enum ComponentSource {\n    DEFAULT, REGISTERED_BY_NAME, HARDCODED\n}\n\nexport interface ComponentSelectorResult {\n    component?: string;\n    params?: any;\n}\n\n/**\n * B the business interface (ie IHeader)\n * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid\n */\nexport interface ComponentClassDef<A extends IComponent<any> & B, B> {\n    component: { new(): A } | { new(): B };\n    componentFromFramework: boolean; // true if component came from framework eg React or Angular\n    source: ComponentSource; // [Default, Registered by Name, Hard Coded]\n    paramsFromSelector: any; // Params the selector function provided, if any\n}\n\nexport interface ModifyParamsCallback { (params: any, component: IComponent<any>): void; }\n\n@Bean('userComponentFactory')\nexport class UserComponentFactory {\n\n    @Autowired(\"gridOptions\")\n    private gridOptions: GridOptions;\n\n    @Autowired(\"gridOptionsWrapper\")\n    private gridOptionsWrapper: GridOptionsWrapper;\n\n    @Autowired(\"context\")\n    private context: Context;\n\n    @Autowired(\"agComponentUtils\")\n    private agComponentUtils: AgComponentUtils;\n\n    @Autowired(\"componentMetadataProvider\")\n    private componentMetadataProvider: ComponentMetadataProvider;\n\n    @Autowired(\"userComponentRegistry\")\n    private userComponentRegistry: UserComponentRegistry;\n\n    @Optional(\"frameworkComponentWrapper\")\n    private frameworkComponentWrapper: FrameworkComponentWrapper;\n\n    public newDateComponent(params: IDateParams): Promise<IDateComp> {\n        return this.createAndInitUserComponent<IDateComp>(\n            this.gridOptions, params, \"dateComponent\", \"agDateInput\");\n    }\n\n    public newHeaderComponent(params:IHeaderParams): Promise<IHeaderComp> {\n        return this.createAndInitUserComponent<IHeaderComp>(\n            params.column.getColDef(), params, \"headerComponent\", \"agColumnHeader\");\n    }\n\n    public newHeaderGroupComponent(params:IHeaderGroupParams): Promise<IHeaderGroupComp> {\n        return this.createAndInitUserComponent(\n            params.columnGroup.getColGroupDef(), params, \"headerGroupComponent\", \"agColumnGroupHeader\");\n    }\n\n    public newFullWidthGroupRowInnerCellRenderer(params:ICellRendererParams):Promise<ICellRendererComp> {\n        return this.createAndInitUserComponent<ICellRendererComp>(\n            this.gridOptions, params, \"groupRowInnerRenderer\", null, true);\n    }\n\n    // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.\n    // so we have to pass the type in.\n    public newFullWidthCellRenderer(params: any, cellRendererType: string, cellRendererName: string):Promise<ICellRendererComp> {\n        return this.createAndInitUserComponent<ICellRendererComp>(null, params, cellRendererType, cellRendererName);\n    }\n\n    public newCellRenderer(target: ColDef | ISetFilterParams | IRichCellEditorParams, params:ICellRendererParams):Promise<ICellRendererComp> {\n        return this.createAndInitUserComponent<ICellRendererComp>(\n            target, params, \"cellRenderer\", null, true);\n    }\n\n    public newPinnedRowCellRenderer(target: ColDef | ISetFilterParams | IRichCellEditorParams, params:ICellRendererParams):Promise<ICellRendererComp> {\n        return this.createAndInitUserComponent<ICellRendererComp>(\n            target, params, \"pinnedRowCellRenderer\", null, true);\n    }\n\n    public newCellEditor(colDef: ColDef, params: any): Promise<ICellEditorComp> {\n        return this.createAndInitUserComponent (colDef, params, 'cellEditor', 'agCellEditor');\n    }\n\n    public newInnerCellRenderer(target: GroupCellRendererParams, params:ICellRendererParams):Promise<ICellRendererComp> {\n        return this.createAndInitUserComponent<ICellRendererComp>(\n            target, params, \"innerRenderer\", null);\n    }\n\n    public newLoadingOverlayComponent(params: any): Promise<ILoadingOverlayComp> {\n        return this.createAndInitUserComponent<ILoadingOverlayComp>(\n            this.gridOptions, params, \"loadingOverlayComponent\", \"agLoadingOverlay\");\n    }\n\n    public newNoRowsOverlayComponent(params: any): Promise<INoRowsOverlayComp> {\n        return this.createAndInitUserComponent<INoRowsOverlayComp>(\n            this.gridOptions, params, \"noRowsOverlayComponent\", \"agNoRowsOverlay\");\n    }\n\n    public newTooltipComponent(params: ITooltipParams): Promise<ITooltipComp> {\n        const colDef = params.colDef;\n        return this.createAndInitUserComponent<ITooltipComp>(\n            colDef, params, \"tooltipComponent\", 'agTooltipComponent');\n    }\n\n    public newFilterComponent(colDef: ColDef, params: IFilterParams, defaultFilter: string,\n                              modifyParamsCallback: ModifyParamsCallback): Promise<IFilterComp> {\n        return this.createAndInitUserComponent<IFilterComp>(\n            colDef, params, 'filter', defaultFilter, false, modifyParamsCallback);\n    }\n\n    public newFloatingFilterComponent(colDef: ColDef, params: any, defaultFloatingFilter: string): Promise<IFloatingFilterComp> {\n        return this.createAndInitUserComponent<IFloatingFilterComp>(\n            colDef, params, \"floatingFilterComponent\", defaultFloatingFilter, true);\n    }\n\n    public newToolPanelComponent(toolPanelDef: ToolPanelDef, params: any): Promise<IToolPanelComp> {\n        return this.createAndInitUserComponent(toolPanelDef, params, 'toolPanel');\n    }\n\n    public newStatusPanelComponent(def: StatusPanelDef, params: any): Promise<IToolPanelComp> {\n        return this.createAndInitUserComponent(def, params, 'statusPanel');\n    }\n\n    /**\n     * This method creates a component given everything needed to guess what sort of component needs to be instantiated\n     * It takes\n     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions\n     *      (global) or columnDef mostly.\n     *  @param paramsFromGrid: Params to be passed to the component and passed by ag-Grid. This will get merged with any params\n     *      specified by the user in the configuration\n     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:\n     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component\n     *  @param defaultComponentName: The actual name of the component to instantiate, this is usually the same as propertyName, but in\n     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify\n     *  @param optional: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no\n     *      component found, it throws an error, by default all components are MANDATORY\n     *  @param modifyParamsCallback: A chance to customise the params passed to the init method. It receives what the current\n     *  params are and the component that init is about to get called for\n     */\n    private createAndInitUserComponent<A extends IComponent<any>>(definitionObject: DefinitionObject,\n                                                          paramsFromGrid: any,\n                                                          propertyName: string,\n                                                          defaultComponentName?: string,\n\n                                                          // optional items are: FloatingFilter, CellComp (for cellRenderer)\n                                                          optional = false,\n\n                                                          // used by FilterManager only\n                                                          modifyParamsCallback?: ModifyParamsCallback\n                                                    ): Promise<A> {\n\n        if (!definitionObject) {\n            definitionObject = this.gridOptions;\n        }\n\n        // Create the component instance\n        const componentAndParams: {componentInstance: A, paramsFromSelector: any}\n            = this.createComponentInstance(definitionObject, propertyName, paramsFromGrid, defaultComponentName, optional);\n        if (!componentAndParams) { return null; }\n        const componentInstance = componentAndParams.componentInstance;\n\n        // Wire the component and call the init method with the correct params\n        const params = this.createFinalParams(definitionObject, propertyName, paramsFromGrid,\n            componentAndParams.paramsFromSelector);\n\n        this.addReactHacks(params);\n\n        // give caller chance to set any params that depend on the componentInstance (need here as the\n        // componentInstance was not available when createUserComponent was called)\n        const paramsAfterCallback = modifyParamsCallback ? modifyParamsCallback(params, componentInstance) : params;\n\n        const deferredInit: void | Promise<void> = this.initComponent(componentInstance, paramsAfterCallback);\n        if (deferredInit == null) {\n\n            // const p = new Promise<A>(resolve => {\n            //     setTimeout( ()=> {\n            //         resolve(componentInstance);\n            //     }, 1000);\n            // });\n            // return p;\n\n            return Promise.resolve(componentInstance);\n        } else {\n            const asPromise: Promise<void> = deferredInit as Promise<void>;\n            return asPromise.map(notRelevant => componentInstance);\n        }\n    }\n\n    private addReactHacks(params: any): void {\n        // a temporary fix for AG-1574\n        // AG-1715 raised to do a wider ranging refactor to improve this\n        const agGridReact = this.context.getBean('agGridReact');\n        if (agGridReact) {\n            params.agGridReact = _.cloneObject(agGridReact);\n        }\n        // AG-1716 - directly related to AG-1574 and AG-1715\n        const frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');\n        if (frameworkComponentWrapper) {\n            params.frameworkComponentWrapper = frameworkComponentWrapper;\n        }\n    }\n\n    /**\n     * This method creates a component given everything needed to guess what sort of component needs to be instantiated\n     * It takes\n     *  @param clazz: The class to instantiate,\n     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params\n     *      specified by the user in the configuration\n     *  @param modifyParamsCallback: A chance to customise the params passed to the init method. It receives what the current\n     *  params are and the component that init is about to get called for\n     */\n    public createUserComponentFromConcreteClass<P, A extends IComponent<P>>(clazz: { new(): A }, agGridParams: P): A {\n\n        const internalComponent: A = new clazz() as A;\n\n        this.initComponent(\n            internalComponent,\n            agGridParams\n        );\n\n        return internalComponent;\n    }\n\n    /**\n     * This method returns the underlying representation of the component to be created. ie for Javascript the\n     * underlying function where we should be calling new into. In case of the frameworks, the framework class\n     * object that represents the component to be created.\n     *\n     * This method is handy for different reasons, for example if you want to check if a component has a particular\n     * method implemented without having to create the component, just by inspecting the source component\n     *\n     * It takes\n     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions\n     *      (global) or columnDef mostly.\n     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:\n     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component\n     *  @param params: Params to be passed to the dynamic component function in case it needs to be\n     *      invoked\n     *  @param defaultComponentName: The name of the component to load if there is no component specified\n     */\n    public lookupComponentClassDef<A extends IComponent<any> & B, B>(\n        definitionObject: DefinitionObject,\n        propertyName: string,\n        params: any = null,\n        defaultComponentName?: string\n    ): ComponentClassDef<A, B> {\n        /**\n         * There are five things that can happen when resolving a component.\n         *  a) HardcodedFwComponent: That holder[propertyName]Framework has associated a Framework native component\n         *  b) HardcodedJsComponent: That holder[propertyName] has associate a JS component\n         *  c) hardcodedJsFunction: That holder[propertyName] has associate a JS function\n         *  d) hardcodedNameComponent: That holder[propertyName] has associate a string that represents a component to load\n         *  e) That none of the three previous are specified, then we need to use the DefaultRegisteredComponent\n         */\n        let hardcodedNameComponent: string = null;\n        let HardcodedJsComponent: { new(): A } = null;\n        let hardcodedJsFunction: AgGridComponentFunctionInput = null;\n        let HardcodedFwComponent: { new(): B } = null;\n        let componentSelectorFunc: (params: any) => ComponentSelectorResult;\n\n        if (definitionObject != null) {\n            const componentPropertyValue: AgComponentPropertyInput<IComponent<any>> = (definitionObject as any)[propertyName];\n            // for filters only, we allow 'true' for the component, which means default filter to be used\n            const usingDefaultComponent = componentPropertyValue === true;\n            if (componentPropertyValue != null && !usingDefaultComponent) {\n                if (typeof componentPropertyValue === 'string') {\n                    hardcodedNameComponent = componentPropertyValue;\n                } else if (typeof componentPropertyValue === 'boolean') {\n                    // never happens, as we test for usingDefaultComponent above,\n                    // however it's needed for the next block to compile\n                } else if (this.agComponentUtils.doesImplementIComponent(componentPropertyValue)) {\n                    HardcodedJsComponent = componentPropertyValue as { new(): A };\n                } else {\n                    hardcodedJsFunction = componentPropertyValue as AgGridComponentFunctionInput;\n                }\n            }\n            HardcodedFwComponent = (definitionObject as any)[propertyName + \"Framework\"];\n            componentSelectorFunc = (definitionObject as any)[propertyName + \"Selector\"];\n        }\n\n        /**\n         * Since we allow many types of flavors for specifying the components, let's make sure this is not an illegal\n         * combination\n         */\n\n        if (\n            (HardcodedJsComponent && HardcodedFwComponent) ||\n            (hardcodedNameComponent && HardcodedFwComponent) ||\n            (hardcodedJsFunction && HardcodedFwComponent)\n        ) {\n            throw Error(\"ag-grid: you are trying to specify: \" + propertyName + \" twice as a component.\");\n        }\n\n        if (HardcodedFwComponent && !this.frameworkComponentWrapper) {\n            throw Error(\"ag-grid: you are specifying a framework component but you are not using a framework version of ag-grid for : \" + propertyName);\n        }\n\n        if (componentSelectorFunc && (hardcodedNameComponent || HardcodedJsComponent || hardcodedJsFunction || HardcodedFwComponent)) {\n            throw Error(\"ag-grid: you can't specify both, the selector and the component of ag-grid for : \" + propertyName);\n        }\n\n        /**\n         * At this stage we are guaranteed to either have,\n         * DEPRECATED\n         * - A unique HardcodedFwComponent\n         * - A unique HardcodedJsComponent\n         * - A unique hardcodedJsFunction\n         * BY NAME- FAVOURED APPROACH\n         * - A unique hardcodedNameComponent\n         * - None of the previous, hence we revert to: RegisteredComponent\n         */\n        if (HardcodedFwComponent) {\n            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);\n            // console.warn(`${HardcodedFwComponent}`);\n            return {\n                componentFromFramework: true,\n                component: HardcodedFwComponent,\n                source: ComponentSource.HARDCODED,\n                paramsFromSelector: null\n            };\n        }\n\n        if (HardcodedJsComponent) {\n            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);\n            // console.warn(`${HardcodedJsComponent}`);\n            return {\n                componentFromFramework: false,\n                component: HardcodedJsComponent,\n                source: ComponentSource.HARDCODED,\n                paramsFromSelector: null\n            };\n        }\n\n        if (hardcodedJsFunction) {\n            // console.warn(`ag-grid: Since version 12.1.0 specifying a function directly is deprecated, you should register the component by name`);\n            // console.warn(`${hardcodedJsFunction}`);\n            return this.agComponentUtils.adaptFunction(propertyName, hardcodedJsFunction, false, ComponentSource.HARDCODED) as ComponentClassDef<A, B>;\n        }\n\n        const selectorResult = componentSelectorFunc ? componentSelectorFunc(params) : null;\n\n        let componentNameToUse: string;\n        if (selectorResult && selectorResult.component) {\n            componentNameToUse = selectorResult.component;\n        } else if (hardcodedNameComponent) {\n            componentNameToUse = hardcodedNameComponent;\n        } else {\n            componentNameToUse = defaultComponentName;\n        }\n\n        if (!componentNameToUse) { return null; }\n\n        const registeredCompClassDef = this.lookupFromRegisteredComponents(propertyName, componentNameToUse) as ComponentClassDef<A, B>;\n\n        if (!registeredCompClassDef) { return null; }\n\n        return {\n            componentFromFramework: registeredCompClassDef.componentFromFramework,\n            component: registeredCompClassDef.component,\n            source: registeredCompClassDef.source,\n            paramsFromSelector: selectorResult ? selectorResult.params : null\n        };\n    }\n\n    private lookupFromRegisteredComponents<A extends IComponent<any> & B, B>(propertyName: string,\n                                                            componentNameOpt?: string): ComponentClassDef<A, B> {\n        const componentName: string = componentNameOpt != null ? componentNameOpt : propertyName;\n\n        const registeredComponent: RegisteredComponent<A, B> = this.userComponentRegistry.retrieve(componentName);\n        if (registeredComponent == null) { return null; }\n\n        //If it is a FW it has to be registered as a component\n        if (registeredComponent.componentFromFramework) {\n            return {\n                component: registeredComponent.component as { new(): B },\n                componentFromFramework: true,\n                source: ComponentSource.REGISTERED_BY_NAME,\n                paramsFromSelector: null\n            };\n        }\n\n        //If it is JS it may be a function or a component\n        if (this.agComponentUtils.doesImplementIComponent(registeredComponent.component as AgGridRegisteredComponentInput<A>)) {\n            return {\n                component: registeredComponent.component as { new(): A },\n                componentFromFramework: false,\n                source: (registeredComponent.source == RegisteredComponentSource.REGISTERED) ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT,\n                paramsFromSelector: null\n            };\n        }\n\n        // This is a function\n        return this.agComponentUtils.adaptFunction(\n            propertyName,\n            registeredComponent.component as AgGridComponentFunctionInput,\n            registeredComponent.componentFromFramework,\n            (registeredComponent.source == RegisteredComponentSource.REGISTERED) ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT\n        );\n    }\n\n    /**\n     * Useful to check what would be the resultant params for a given object\n     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions\n     *      (global) or columnDef mostly.\n     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:\n     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component\n     *  @param paramsFromGrid: Params to be passed to the component and passed by ag-Grid. This will get merged with any params\n     *      specified by the user in the configuration\n     * @returns {any} It merges the user agGridParams with the actual params specified by the user.\n     */\n    public createFinalParams(definitionObject: DefinitionObject,\n                       propertyName: string,\n                       paramsFromGrid: any,\n                       paramsFromSelector: any = null): any {\n\n        const res: any = {};\n        _.mergeDeep(res, paramsFromGrid);\n\n        const userParams: any = definitionObject ? (definitionObject as any)[propertyName + \"Params\"] : null;\n\n        if (userParams != null) {\n            if (typeof userParams === 'function') {\n                _.mergeDeep(res, userParams(paramsFromGrid));\n            } else if (typeof userParams === 'object') {\n                _.mergeDeep(res, userParams);\n            }\n        }\n\n        _.mergeDeep(res, paramsFromSelector);\n\n        return res;\n    }\n\n    private createComponentInstance<A extends IComponent<any> & B, B>(holder: DefinitionObject,\n        propertyName: string,\n        paramsForSelector: any,\n        defaultComponentName: string,\n        optional: boolean\n    ): {componentInstance: A, paramsFromSelector: any} {\n        const componentToUse: ComponentClassDef<A, B> =\n            this.lookupComponentClassDef(holder, propertyName, paramsForSelector, defaultComponentName) as ComponentClassDef<A, B>;\n\n        const missing = !componentToUse || !componentToUse.component;\n        if (missing) {\n            // to help the user, we print out the name they are looking for, rather than the default name.\n            // i don't know why the default name was originally printed out (that doesn't help the user)\n            const overrideName = holder ? (holder as any)[propertyName] : defaultComponentName;\n            const nameToReport = overrideName ? overrideName : defaultComponentName;\n            if (!optional) { console.error(`Could not find component ${nameToReport}, did you forget to configure this component?`); }\n            return null;\n        }\n\n        let componentInstance: A;\n\n        if (componentToUse.componentFromFramework) {\n            // Using framework component\n            const FrameworkComponentRaw: { new(): B } = componentToUse.component;\n            const thisComponentConfig: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n            componentInstance = this.frameworkComponentWrapper.wrap(FrameworkComponentRaw,\n                thisComponentConfig.mandatoryMethodList,\n                thisComponentConfig.optionalMethodList,\n                defaultComponentName) as A;\n        } else {\n            // Using plain JavaScript component\n            componentInstance = new componentToUse.component() as A;\n        }\n\n        return {componentInstance: componentInstance, paramsFromSelector: componentToUse.paramsFromSelector};\n    }\n\n    private initComponent<A extends IComponent<any>>(component: A, finalParams: any): Promise<void> | void {\n        this.context.wireBean(component);\n        if (component.init == null) {\n            return;\n        } else {\n            return component.init(finalParams);\n        }\n    }\n\n}"]}