{"version":3,"sources":["../../src/ts/undoRedo/undoRedoStack.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAgBA;IAGI,wBAAY,gBAAmC;QAC3C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC7C,CAAC;IACL,qBAAC;AAAD,CANA,AAMC,IAAA;AANY,wCAAc;AAQ3B;IAAwC,sCAAc;IAIlD,4BAAY,gBAAmC,EAAE,YAAuB,EAAE,UAAqB;QAA/F,YACI,kBAAM,gBAAgB,CAAC,SAG1B;QAFG,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;;IACjC,CAAC;IACL,yBAAC;AAAD,CATA,AASC,CATuC,cAAc,GASrD;AATY,gDAAkB;AAW/B;IAOI,uBAAY,YAAqB;QAFzB,gBAAW,GAAqB,EAAE,CAAC;QAGvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,CAAC,kBAAkB,CAAC;QACnF,IAAI,CAAC,WAAW,GAAG,IAAI,KAAK,CAAiB,IAAI,CAAC,YAAY,CAAC,CAAC;IACpE,CAAC;IAEM,2BAAG,GAAV;QACI,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;IAClC,CAAC;IAEM,4BAAI,GAAX,UAAY,IAAoB;QAC5B,IAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;QACnF,IAAI,CAAC,gBAAgB,EAAE;YACnB,OAAO;SACV;QAED,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,IAAI,CAAC,YAAY,EAAE;YAC/C,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAC5B;QAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAEM,6BAAK,GAAZ;QACI,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;IA9Bc,gCAAkB,GAAG,EAAE,CAAC;IA+B3C,oBAAC;CAhCD,AAgCC,IAAA;AAhCY,sCAAa","file":"undoRedoStack.js","sourcesContent":["import {CellRange} from \"../interfaces/iRangeController\";\n\nexport interface CellValueChange {\n    rowPinned?: string;\n    rowIndex: number;\n    columnId: string;\n    oldValue: any;\n    newValue: any;\n}\n\nexport interface LastFocusedCell {\n    rowPinned?: string;\n    rowIndex: number;\n    columnId: string;\n}\n\nexport class UndoRedoAction {\n    cellValueChanges: CellValueChange[];\n\n    constructor(cellValueChanges: CellValueChange[]) {\n        this.cellValueChanges = cellValueChanges;\n    }\n}\n\nexport class FillUndoRedoAction extends UndoRedoAction {\n    initialRange: CellRange;\n    finalRange: CellRange;\n\n    constructor(cellValueChanges: CellValueChange[], initialRange: CellRange, finalRange: CellRange) {\n        super(cellValueChanges);\n        this.initialRange = initialRange;\n        this.finalRange = finalRange;\n    }\n}\n\nexport class UndoRedoStack {\n    private static DEFAULT_STACK_SIZE = 10;\n\n    private readonly maxStackSize: number;\n\n    private actionStack: UndoRedoAction[] = [];\n\n    constructor(maxStackSize?: number) {\n        this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack.DEFAULT_STACK_SIZE;\n        this.actionStack = new Array<UndoRedoAction>(this.maxStackSize);\n    }\n\n    public pop(): UndoRedoAction {\n        return this.actionStack.pop();\n    }\n\n    public push(item: UndoRedoAction): void {\n        const shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;\n        if (!shouldAddActions) {\n            return;\n        }\n\n        if (this.actionStack.length === this.maxStackSize) {\n            this.actionStack.shift();\n        }\n\n        this.actionStack.push(item);\n    }\n\n    public clear(): void {\n        this.actionStack = [];\n    }\n}\n"]}