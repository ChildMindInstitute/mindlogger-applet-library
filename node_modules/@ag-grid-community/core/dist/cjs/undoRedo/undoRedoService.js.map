{"version":3,"sources":["../../src/ts/undoRedo/undoRedoService.ts"],"names":[],"mappings":"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","file":"undoRedoService.js","sourcesContent":["import {GridOptionsWrapper} from \"../gridOptionsWrapper\";\nimport {Autowired, Bean, PostConstruct} from \"../context/context\";\nimport {EventService} from \"../eventService\";\nimport {Events} from \"../eventKeys\";\nimport {CellValueChangedEvent, FillEndEvent} from \"../events\";\nimport {FocusedCellController} from \"../focusedCellController\";\nimport {IRowModel} from \"../interfaces/iRowModel\";\nimport {GridApi} from \"../gridApi\";\nimport {PinnedRowModel} from \"../pinnedRowModel/pinnedRowModel\";\nimport {CellValueChange, FillUndoRedoAction, LastFocusedCell, UndoRedoAction, UndoRedoStack} from \"./undoRedoStack\";\nimport {RowPosition} from \"../entities/rowPosition\";\nimport {RowNode} from \"../entities/rowNode\";\nimport {Constants} from \"../constants\";\nimport {ModuleNames} from \"../modules/moduleNames\";\nimport {ModuleRegistry} from \"../modules/moduleRegistry\";\nimport {CellRange, CellRangeParams} from \"../interfaces/iRangeController\";\n\n@Bean('undoRedoService')\nexport class UndoRedoService {\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('focusedCellController') private focusedCellController: FocusedCellController;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n\n    private cellValueChanges: CellValueChange[] = [];\n\n    private undoStack: UndoRedoStack;\n    private redoStack: UndoRedoStack;\n\n    private isCellEditing = false;\n    private isRowEditing = false;\n    private isPasting = false;\n    private isFilling = false;\n\n    @PostConstruct\n    public init(): void {\n\n        if (!this.gridOptionsWrapper.isUndoRedoCellEditing()) {\n            return;\n        }\n\n        const undoRedoLimit = this.gridOptionsWrapper.getUndoRedoCellEditingLimit();\n        if (undoRedoLimit <= 0) {\n            return;\n        }\n\n        this.undoStack = new UndoRedoStack(undoRedoLimit);\n        this.redoStack = new UndoRedoStack(undoRedoLimit);\n\n        this.addRowEditingListeners();\n        this.addCellEditingListeners();\n        this.addPasteListeners();\n        this.addFillListeners();\n\n        this.eventService.addEventListener(Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);\n\n        // undo / redo is restricted to actual editing so we clear the stacks when other operations are\n        // performed that change the order of the row / cols.\n        this.eventService.addEventListener(Events.EVENT_MODEL_UPDATED, this.clearStacks);\n        this.eventService.addEventListener(Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);\n        this.eventService.addEventListener(Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearStacks);\n        this.eventService.addEventListener(Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);\n        this.eventService.addEventListener(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);\n        this.eventService.addEventListener(Events.EVENT_COLUMN_MOVED, this.clearStacks);\n        this.eventService.addEventListener(Events.EVENT_COLUMN_PINNED, this.clearStacks);\n        this.eventService.addEventListener(Events.EVENT_COLUMN_VISIBLE, this.clearStacks);\n        this.eventService.addEventListener(Events.EVENT_ROW_DRAG_END, this.clearStacks);\n    }\n\n    private onCellValueChanged = (event: CellValueChangedEvent): void => {\n        const shouldCaptureAction = this.isCellEditing || this.isRowEditing || this.isPasting || this.isFilling;\n        if (!shouldCaptureAction) {\n            return;\n        }\n\n        const {rowPinned, rowIndex, column, oldValue, value} = event;\n\n        const cellValueChange: CellValueChange = {\n            rowPinned: rowPinned,\n            rowIndex: rowIndex,\n            columnId: column.getColId(),\n            oldValue: oldValue,\n            newValue: value\n        };\n\n        this.cellValueChanges.push(cellValueChange);\n    }\n\n    private clearStacks = () => {\n        this.undoStack.clear();\n        this.redoStack.clear();\n    }\n\n    public undo() {\n        if (!this.undoStack) {\n            return;\n        }\n\n        const undoAction: UndoRedoAction = this.undoStack.pop();\n        if (!undoAction || !undoAction.cellValueChanges) {\n            return;\n        }\n\n        this.processAction(undoAction, (cellValueChange: CellValueChange) => cellValueChange.oldValue);\n\n        if (undoAction instanceof FillUndoRedoAction) {\n            this.processRangeAndCellFocus(undoAction.cellValueChanges, undoAction.initialRange);\n        } else {\n            this.processRangeAndCellFocus(undoAction.cellValueChanges);\n        }\n\n        this.redoStack.push(undoAction);\n    }\n\n    public redo() {\n        if (!this.redoStack) {\n            return;\n        }\n\n        const redoAction: UndoRedoAction = this.redoStack.pop();\n        if (!redoAction || !redoAction.cellValueChanges) {\n            return;\n        }\n\n        this.processAction(redoAction, (cellValueChange: CellValueChange) => cellValueChange.newValue);\n\n        if (redoAction instanceof FillUndoRedoAction) {\n            this.processRangeAndCellFocus(redoAction.cellValueChanges, redoAction.finalRange);\n        } else {\n            this.processRangeAndCellFocus(redoAction.cellValueChanges);\n        }\n\n        this.undoStack.push(redoAction);\n    }\n\n    private processAction(action: UndoRedoAction, valueExtractor: (cellValueChange: CellValueChange) => any) {\n        action.cellValueChanges.forEach(cellValueChange => {\n            const {rowIndex, rowPinned, columnId} = cellValueChange;\n            const rowPosition: RowPosition = {rowIndex, rowPinned};\n            const currentRow = this.getRowNode(rowPosition);\n\n            // checks if the row has been filtered out\n            if (currentRow.rowTop == null) {\n                return;\n            }\n\n            currentRow.setDataValue(columnId, valueExtractor(cellValueChange));\n        });\n    }\n\n    private processRangeAndCellFocus(cellValueChanges: CellValueChange[], range?: CellRange) {\n        if (range) {\n            const startRow = range.startRow;\n            const endRow = range.endRow;\n\n            const lastFocusedCell: LastFocusedCell = {\n                rowPinned: startRow.rowPinned,\n                rowIndex: startRow.rowIndex,\n                columnId: range.startColumn.getColId()\n            };\n\n            this.setLastFocusedCell(lastFocusedCell);\n\n            const cellRangeParams: CellRangeParams = {\n                rowStartIndex: startRow.rowIndex,\n                rowStartPinned: startRow.rowPinned,\n                rowEndIndex: endRow.rowIndex,\n                rowEndPinned: endRow.rowPinned,\n                columnStart: range.startColumn,\n                columns: range.columns\n            };\n\n            this.gridApi.addCellRange(cellRangeParams);\n\n            return;\n        }\n\n        const cellValueChange = cellValueChanges[0];\n        const {rowIndex, rowPinned} = cellValueChange;\n        const rowPosition: RowPosition = {rowIndex, rowPinned};\n        const row = this.getRowNode(rowPosition);\n\n        const lastFocusedCell: LastFocusedCell = {\n            rowPinned: cellValueChange.rowPinned,\n            rowIndex: row.rowIndex,\n            columnId: cellValueChange.columnId\n        };\n\n        this.setLastFocusedCell(lastFocusedCell);\n    }\n\n    private setLastFocusedCell(lastFocusedCell: LastFocusedCell) {\n        const {rowIndex, columnId, rowPinned} = lastFocusedCell;\n\n        this.gridApi.ensureIndexVisible(rowIndex);\n        this.gridApi.ensureColumnVisible(columnId);\n\n        if (ModuleRegistry.isRegistered(ModuleNames.RangeSelectionModule)) {\n            this.gridApi.clearRangeSelection();\n        }\n\n        this.focusedCellController.setFocusedCell(rowIndex, columnId, rowPinned, true);\n    }\n\n    private addRowEditingListeners() {\n        this.eventService.addEventListener(Events.EVENT_ROW_EDITING_STARTED, () => {\n            this.isRowEditing = true;\n        });\n\n        this.eventService.addEventListener(Events.EVENT_ROW_EDITING_STOPPED, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.isRowEditing = false;\n        });\n    }\n\n    private addCellEditingListeners() {\n        this.eventService.addEventListener(Events.EVENT_CELL_EDITING_STARTED, () => {\n            this.isCellEditing = true;\n        });\n\n        this.eventService.addEventListener(Events.EVENT_CELL_EDITING_STOPPED, () => {\n            this.isCellEditing = false;\n\n            const shouldPushAction = !this.isRowEditing && !this.isPasting && !this.isFilling;\n            if (shouldPushAction) {\n                const action = new UndoRedoAction(this.cellValueChanges);\n                this.pushActionsToUndoStack(action);\n            }\n        });\n    }\n\n    private addPasteListeners() {\n        this.eventService.addEventListener(Events.EVENT_PASTE_START, () => {\n            this.isPasting = true;\n        });\n\n        this.eventService.addEventListener(Events.EVENT_PASTE_END, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.isPasting = false;\n        });\n    }\n\n    private addFillListeners() {\n        this.eventService.addEventListener(Events.EVENT_FILL_START, () => {\n            this.isFilling = true;\n        });\n\n        this.eventService.addEventListener(Events.EVENT_FILL_END, (event: FillEndEvent) => {\n            const action = new FillUndoRedoAction(this.cellValueChanges, event.initialRange, event.finalRange);\n            this.pushActionsToUndoStack(action);\n            this.isFilling = false;\n        });\n    }\n\n    private pushActionsToUndoStack(action: UndoRedoAction) {\n        this.undoStack.push(action);\n\n        this.cellValueChanges = [];\n        this.redoStack.clear();\n    }\n\n    private getRowNode(gridRow: RowPosition): RowNode | null {\n        switch (gridRow.rowPinned) {\n            case Constants.PINNED_TOP:\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case Constants.PINNED_BOTTOM:\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n}\n"]}