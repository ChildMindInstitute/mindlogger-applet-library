{"version":3,"sources":["../../src/ts/rendering/features/setLeftFeature.ts"],"names":[],"mappings":"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","file":"setLeftFeature.js","sourcesContent":["import { ColumnGroupChild } from \"../../entities/columnGroupChild\";\nimport { Column } from \"../../entities/column\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Beans } from \"../beans\";\nimport { Constants } from \"../../constants\";\nimport { _ } from \"../../utils\";\n\nexport class SetLeftFeature extends BeanStub {\n\n    private readonly columnOrGroup: ColumnGroupChild;\n    private eCell: HTMLElement;\n    private ariaEl: HTMLElement;\n\n    private actualLeft: number;\n\n    // if we are spanning columns, this tells what columns,\n    // otherwise this is empty\n    private colsSpanning: Column[];\n\n    private beans: Beans;\n\n    private readonly printLayout: boolean;\n\n    constructor(columnOrGroup: ColumnGroupChild, eCell: HTMLElement, beans: Beans, colsSpanning?: Column[]) {\n        super();\n        this.columnOrGroup = columnOrGroup;\n        this.eCell = eCell;\n        this.ariaEl = this.eCell.querySelector('[role=columnheader]') || this.eCell;\n        this.colsSpanning = colsSpanning;\n        this.beans = beans;\n        this.printLayout = beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n    }\n\n    public setColsSpanning(colsSpanning: Column[]): void {\n        this.colsSpanning = colsSpanning;\n        this.onLeftChanged();\n    }\n\n    public getColumnOrGroup(): ColumnGroupChild {\n        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n            return _.last(this.colsSpanning);\n        }\n        return this.columnOrGroup;\n    }\n\n    public init(): void {\n        this.addDestroyableEventListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n        this.setLeftFirstTime();\n    }\n\n    private setLeftFirstTime(): void {\n        const suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();\n        const oldLeftExists = _.exists(this.columnOrGroup.getOldLeft());\n        const animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n        if (animateColumnMove) {\n            this.animateInLeft();\n        } else {\n            this.onLeftChanged();\n        }\n    }\n\n    private animateInLeft(): void {\n        const left = this.getColumnOrGroup().getLeft();\n        const oldLeft = this.getColumnOrGroup().getOldLeft();\n        this.setLeft(oldLeft);\n\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\n        // VM turn, but only one (the correct one) should get applied.\n        this.actualLeft = left;\n\n        this.beans.columnAnimationService.executeNextVMTurn(() => {\n            // test this left value is the latest one to be applied, and if not, do nothing\n            if (this.actualLeft === left) {\n                this.setLeft(left);\n            }\n        });\n    }\n\n    private onLeftChanged(): void {\n        const colOrGroup = this.getColumnOrGroup();\n        const left = colOrGroup.getLeft();\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n        this.setLeft(this.actualLeft);\n    }\n\n    private modifyLeftForPrintLayout(colOrGroup: ColumnGroupChild, leftPosition: number): number {\n        if (!this.printLayout) { return leftPosition; }\n\n        if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {\n            return leftPosition;\n        }\n\n        if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {\n            const leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();\n            const bodyWidth = this.beans.columnController.getBodyContainerWidth();\n            return leftWidth + bodyWidth + leftPosition;\n        }\n        // is in body\n        const leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();\n        return leftWidth + leftPosition;\n    }\n\n    private setLeft(value: number): void {\n        // if the value is null, then that means the column is no longer\n        // displayed. there is logic in the rendering to fade these columns\n        // out, so we don't try and change their left positions.\n        if (_.exists(value)) {\n            this.eCell.style.left = `${value}px`;\n        }\n\n        if (this.columnOrGroup instanceof Column) {\n            const colIndex = this.beans.columnController.getAllDisplayedColumns().indexOf(this.columnOrGroup);\n            this.ariaEl.setAttribute('aria-colindex', (colIndex + 1).toString());\n        } else {\n            this.ariaEl.removeAttribute('aria-colindex');\n        }\n    }\n}\n"]}