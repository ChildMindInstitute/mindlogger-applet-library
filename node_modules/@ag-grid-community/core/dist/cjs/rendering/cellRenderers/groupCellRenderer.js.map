{"version":3,"sources":["../../src/ts/rendering/cellRenderers/groupCellRenderer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,6CAA4C;AAC5C,iDAAkD;AAClD,qDAAoD;AAEpD,kDAAiD;AAEjD,4EAA2E;AAG3E,2EAAiE;AAGjE,wFAIyD;AACzD,qCAAyC;AAiBzC;IAAuC,qCAAS;IA0C5C;eACI,kBAAM,iBAAiB,CAAC,QAAQ,CAAC;IACrC,CAAC;IAEM,gCAAI,GAAX,UAAY,MAA+B;QAEvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,EAAE,EAAE;YACrD,IAAI,CAAC,iCAAiC,CAAC,MAAM,CAAC,CAAC;SAClD;QAED,IAAM,mBAAmB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACzD,0DAA0D;QAC1D,6CAA6C;QAC7C,IAAM,WAAW,GAAG,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC;QAEzC,IAAI,CAAC,WAAW,GAAG,mBAAmB,IAAI,WAAW,CAAC;QAEtD,IAAI,IAAI,CAAC,WAAW,EAAE;YAAE,OAAO;SAAE;QAEjC,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAE5B,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAEO,6DAAiC,GAAzC,UAA0C,MAA+B;QACrE,2FAA2F;QAC3F,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,EAAE;YAC1C,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;SACrB;IACL,CAAC;IAED,2EAA2E;IAC3E,2EAA2E;IAC3E,mFAAmF;IAC3E,iDAAqB,GAA7B;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,EAAE,EAAE;YAEzE,IAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,qBAAS,CAAC,WAAW,CAAC;YACpE,IAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,qBAAS,CAAC,YAAY,CAAC;YACtE,IAAM,QAAQ,GAAG,CAAC,cAAc,IAAI,CAAC,eAAe,CAAC;YAErD,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,EAAE;gBACvC,IAAI,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,EAAE;oBACvC,OAAO,CAAC,eAAe,CAAC;iBAC3B;qBAAM;oBACH,OAAO,CAAC,QAAQ,CAAC;iBACpB;aACJ;iBAAM;gBACH,IAAI,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,EAAE;oBACvC,OAAO,CAAC,cAAc,CAAC;iBAC1B;qBAAM;oBACH,OAAO,CAAC,QAAQ,CAAC;iBACpB;aACJ;SACJ;aAAM;YACH,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAEO,qCAAS,GAAjB;QACI,IAAI,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,EAAE;YAAE,OAAO;SAAE;QAEjE,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAM,OAAO,GAAY,MAAM,CAAC,IAAI,CAAC;QAErC,IAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC;QAErC,IAAM,yCAAyC,GAAG,MAAM,CAAC,OAAO,IAAI,CAAC,CAAC;QACtE,IAAI,yCAAyC,EAAE;YAC3C,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YAC3D,OAAO;SACV;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACzC;QAED,IAAI,CAAC,WAAW,GAAG,sBAAsB,GAAG,YAAY,CAAC;QACzD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAEO,mDAAuB,GAA/B,UAAgC,YAAoB,EAAE,OAAe;QACjE,SAAC,CAAC,MAAM,CAAC,cAAM,OAAA,OAAO,CAAC,IAAI,CAAC,yNAAyN,CAAC,EAAvO,CAAuO,EAAE,oCAAoC,CAAC,CAAC;QAE9R,IAAM,SAAS,GAAG,YAAY,GAAG,OAAO,CAAC;QAEzC,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,EAAE;YACvC,wCAAwC;YACxC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,YAAY,GAAG,SAAS,GAAG,IAAI,CAAC;SACvD;aAAM;YACH,8BAA8B;YAC9B,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,WAAW,GAAG,SAAS,GAAG,IAAI,CAAC;SACtD;IACL,CAAC;IAEO,uCAAW,GAAnB;QAEI,kEAAkE;QAClE,mEAAmE;QACnE,qBAAqB;QACrB,IAAM,IAAI,GAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACvC,IAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;QAEpD,IAAI,CAAC,eAAe,EAAE;YAClB,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,iBAAO,CAAC,sBAAsB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAClG,IAAI,CAAC,SAAS,EAAE,CAAC;SACpB;IACL,CAAC;IAEO,2CAAe,GAAvB;QACI,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QACpC,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC3B;aAAM,IACH,OAAO,CAAC,WAAW,EAAE;YACrB,SAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,kCAAkC,EAAE,IAAI,CAAC;YAC9D,SAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,2CAA2C,EAAE,IAAI,CAAC,EACzE;YACE,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,OAAO,CAAC,WAAW,EAAE,EAAE;gBACvB,IAAI,CAAC,aAAa,EAAE,CAAC;aACxB;SACJ;aAAM;YACH,IAAI,CAAC,cAAc,EAAE,CAAC;SACzB;IACL,CAAC;IAEO,4CAAgB,GAAxB;QACI,IAAI,WAAmB,CAAC;QACxB,IAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;QACxD,IAAI,iBAAiB,EAAE;YACnB,kFAAkF;YAClF,IAAM,WAAW,GAAQ,SAAC,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpD,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACtC,IAAI,OAAO,iBAAiB,KAAK,UAAU,EAAE;gBACzC,WAAW,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;aAChD;iBAAM,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;gBAC9C,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;aACjF;iBAAM;gBACH,OAAO,CAAC,IAAI,CAAC,iFAAiF,CAAC,CAAC;aACnG;SACJ;aAAM;YACH,WAAW,GAAG,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;SAC9C;QAED,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,WAAW,CAAC;IACxC,CAAC;IAEO,2CAAe,GAAvB;QAAA,iBA0BC;QAzBG,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC;QAE1D,gFAAgF;QAChF,IAAM,WAAW,GAAW,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;QAE5E,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QACpC,IAAM,cAAc,GAAG,WAAW,CAAC,CAAC;YAChC,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAErG,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;QAEvC,IAAI,eAA0C,CAAC;QAC/C,IAAI,MAAM,CAAC,SAAS,IAAI,IAAI,EAAE;YAC1B,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SAC/C;aAAM;YACH,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE,WAAW,CAAC,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;SACnH;QAED,6FAA6F;QAC7F,IAAI,eAAe,EAAE;YACjB,eAAe,CAAC,IAAI,CAAC,UAAC,KAAuB;gBACzC,KAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YACnC,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAEO,4CAAgB,GAAxB,UACI,uBAAgD,EAChD,gBAAwB,EAAE,iDAAiD;IAC3E,MAAW;QAEX,8GAA8G;QAC9G,4GAA4G;QAC5G,2CAA2C;QAC3C,EAAE;QACF,0GAA0G;QAC1G,0BAA0B;QAC1B,EAAE;QACF,8CAA8C;QAC9C,EAAE;QACF,yGAAyG;QACzG,sDAAsD;QACtD,oDAAoD;QAhBxD,iBAwDC;QAtCG,IAAI,mBAAmB,GAA+B,IAAI,CAAC;QAC3D,6GAA6G;QAC7G,IAAM,uBAAuB,GAAgC,IAAI,CAAC,oBAAoB;aACjF,uBAAuB,CAAC,uBAAuB,EAAE,eAAe,CAAC,CAAC;QAEvE,IAAI,uBAAuB,IAAI,uBAAuB,CAAC,SAAS,IAAI,IAAI;eACjE,uBAAuB,CAAC,MAAM,IAAI,sCAAe,CAAC,OAAO,EAAE;YAC9D,+DAA+D;YAC/D,mBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;SACzG;aAAM;YACH,gFAAgF;YAChF,IAAM,wBAAwB,GAAgC,IAAI,CAAC,oBAAoB;iBAClF,uBAAuB,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;YAC/D,IAAI,wBAAwB,IAAI,wBAAwB,CAAC,MAAM,IAAI,sCAAe,CAAC,OAAO,EAAE;gBACxF,qGAAqG;gBACrG,mBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;aAC7F;iBAAM,IAAI,wBAAwB,IAAI,wBAAwB,CAAC,MAAM,IAAI,sCAAe,CAAC,OAAO;mBAC1F,CAAC,SAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,kCAAkC,EAAE,IAAI,CAAC,CAAC,EAAE;gBACxE,wGAAwG;gBACxG,gCAAgC;gBAChC,mBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;aACrH;iBAAM;gBACH,4FAA4F;gBAC5F,mBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;aAC/E;SACJ;QACD,IAAI,mBAAmB,IAAI,IAAI,EAAE;YAC7B,mBAAmB,CAAC,IAAI,CAAC,UAAA,aAAa;gBAClC,IAAI,aAAa,IAAI,IAAI,EAAE;oBACvB,KAAI,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;oBAC7F,OAAO;iBACV;gBACD,SAAC,CAAC,6BAA6B,CAAC,mBAAmB,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;SACN;aAAM;YACH,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;SAChG;QACD,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAEO,wCAAY,GAApB,UAAqB,MAAW;QAC5B,IAAM,mBAAmB,GAA+B,IAAI,CAAC,oBAAoB,CAAC,qCAAqC,CAAE,MAAM,CAAC,CAAC;QACjI,IAAI,mBAAmB,IAAI,IAAI,EAAE;YAC7B,SAAC,CAAC,6BAA6B,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACrE;aAAM;YACH,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;SAChG;QACD,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAEO,yCAAa,GAArB;QAEI,sFAAsF;QACtF,+DAA+D;QAC/D,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;YAAE,OAAO;SAAE;QAE1C,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,cAAc,EAAE,iBAAO,CAAC,gCAAgC,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAElI,6DAA6D;QAC7D,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAEO,4CAAgB,GAAxB;QACI,IAAM,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC;QAC9D,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,gBAAgB,IAAI,CAAC,CAAC,CAAC,CAAC,MAAI,gBAAgB,MAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IACtF,CAAC;IAEO,0CAAc,GAAtB;QACI,IAAI,SAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;SACvG;IACL,CAAC;IAEO,+CAAmB,GAA3B;QACI,IAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC5C,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;YACtC,OAAO,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtC;aAAM;YACH,OAAO,cAAc,KAAK,IAAI,CAAC;SAClC;IACL,CAAC;IAEO,+CAAmB,GAA3B;QACI,IAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QACpC,IAAM,cAAc,GAAG,IAAI,CAAC,mBAAmB,EAAE;YACzC,6BAA6B;eAC1B,CAAC,OAAO,CAAC,MAAM;YAClB,iCAAiC;eAC9B,CAAC,OAAO,CAAC,SAAS;YACrB,6BAA6B;eAC1B,CAAC,OAAO,CAAC,MAAM,CAAC;QAC3B,IAAI,cAAc,EAAE;YAChB,IAAM,sBAAoB,GAAG,IAAI,uDAA0B,EAAE,CAAC;YAC9D,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,sBAAoB,CAAC,CAAC;YACjD,sBAAoB,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAC,CAAC,CAAC;YAC1E,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,sBAAoB,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1D,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,sBAAoB,CAAC,OAAO,EAAE,EAA9B,CAA8B,CAAC,CAAC;SAC7D;QAED,SAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC;IAC3E,CAAC;IAEO,gDAAoB,GAA5B;QACI,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC;QACpC,IAAM,aAAa,GAAG,SAAC,CAAC,gBAAgB,CAAC,eAAe,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QACzF,IAAM,eAAe,GAAG,SAAC,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QAC7F,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAC1C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;QAE9C,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7F,2CAA2C;QAC3C,IAAI,CAAC,2BAA2B,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACnF,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,iBAAO,CAAC,sBAAsB,EAAE,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1H,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAElC,sGAAsG;QACtG,iCAAiC;QACjC,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,cAAc,EAAE,iBAAO,CAAC,gCAAgC,EAC1F,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE/C,2DAA2D;QAC3D,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE;YAC1G,IAAI,CAAC,2BAA2B,CAAC,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC9F;IACL,CAAC;IAEO,qDAAyB,GAAjC;QACI,uEAAuE;QACvE,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,kDAAkD;QAClD,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAEO,qCAAS,GAAjB,UAAkB,KAAoB;QAClC,IAAM,eAAe,GAAG,SAAC,CAAC,YAAY,CAAC,KAAK,EAAE,qBAAS,CAAC,SAAS,CAAC,CAAC;QACnE,IAAI,eAAe,EAAE;YACjB,IAAI,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;gBAAE,OAAO;aAAE;YAEhD,IAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/F,IAAI,YAAY,EAAE;gBAAE,OAAO;aAAE;YAE7B,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;IACL,CAAC;IAEO,gDAAoB,GAA5B;QAEI,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAClC,IAAM,OAAO,GAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAE1C,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,EAAE;YACnD,IAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC;SAC3C;aAAM,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE;YAC/B,6EAA6E;YAC7E,2FAA2F;YAC3F,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC;SAC1C;aAAM;YACH,IAAM,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;YAC9C,IAAI,cAAc,EAAE;gBAChB,kGAAkG;gBAClG,gCAAgC;gBAChC,IAAI,CAAC,0BAA0B,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC;aACzF;iBAAM;gBACH,0FAA0F;gBAC1F,yFAAyF;gBACzF,IAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC;aAC3C;SACJ;QAED,IAAI,IAAI,CAAC,0BAA0B,EAAE;YACjC,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;YAC7B,OAAO,IAAI,EAAE;gBACT,IAAI,SAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;oBACpB,MAAM;iBACT;gBACD,IAAI,OAAO,CAAC,cAAc,IAAI,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE;oBACtF,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;oBAC9B,MAAM;iBACT;gBACD,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;aAC5B;SACJ;QAED,8DAA8D;QAC9D,IAAI,SAAC,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;YAChC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;SACjC;IACL,CAAC;IAEM,2CAAe,GAAtB,UAAuB,UAAsB;QACzC,IAAI,SAAC,CAAC,0BAA0B,CAAC,UAAU,CAAC,EAAE;YAAE,OAAO;SAAE;QAEzD,yDAAyD;QACzD,SAAC,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;QAEvC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAEM,4CAAgB,GAAvB,UAAwB,UAAsB;QAC1C,IAAI,SAAC,CAAC,0BAA0B,CAAC,UAAU,CAAC,EAAE;YAAE,OAAO;SAAE;QAEzD,gFAAgF;QAChF,gFAAgF;QAChF,+EAA+E;QAC/E,yEAAyE;QACzE,IAAM,kBAAkB,GAClB,SAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC;eACjD,SAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAE5D,IAAI,CAAC,kBAAkB,EAAE;YACrB,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;IACL,CAAC;IAEM,8CAAkB,GAAzB;QACI,+FAA+F;QAC/F,IAAM,OAAO,GAAY,IAAI,CAAC,cAAc,CAAC;QAE7C,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAEO,wCAAY,GAApB;QACI,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjC,IAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,OAAO,CAAC,SAAS,CAAC;QACjF,OAAO,IAAI,CAAC,0BAA0B;YAC9B,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,CAAC;IAC5E,CAAC;IAEO,sDAA0B,GAAlC;QAEI,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAEjC,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACrB,iDAAiD;YACjD,+DAA+D;YAC/D,IAAM,QAAQ,GAAG,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC3E,SAAC,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC;YAC5C,SAAC,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;SAC5C;aAAM;YACH,kCAAkC;YAClC,SAAC,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACtC,SAAC,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;SAC3C;QAED,IAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC3C,0FAA0F;QAC1F,IAAM,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,cAAc,CAAC,SAAS,CAAC;QAC9F,IAAM,aAAa,GAAG,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;QACrD,IAAM,kBAAkB,GAAG,cAAc,CAAC,MAAM,IAAI,aAAa,IAAI,qBAAqB,CAAC;QAC3F,IAAI,CAAC,mBAAmB,CAAC,cAAc,EAAE,CAAC,kBAAkB,CAAC,CAAC;QAC9D,IAAI,CAAC,mBAAmB,CAAC,0BAA0B,EAAE,kBAAkB,CAAC,CAAC;IAC7E,CAAC;IAEM,mCAAO,GAAd;QACI,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE;YAC1D,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;SACpC;IACL,CAAC;IAEM,mCAAO,GAAd;QACI,OAAO,KAAK,CAAC;IACjB,CAAC;IA3fc,0BAAQ,GACnB,gCAAgC;QAC/B,yDAAyD;QACzD,6DAA6D;QAC7D,sEAAsE;QACtE,mDAAmD;QACnD,8DAA8D;QAC/D,SAAS,CAAC;IAEmB;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;iEAAgD;IAChD;QAA/B,mBAAS,CAAC,mBAAmB,CAAC;gEAA8C;IAClD;QAA1B,mBAAS,CAAC,cAAc,CAAC;2DAAoC;IAC1B;QAAnC,mBAAS,CAAC,uBAAuB,CAAC;oEAAsD;IAC1D;QAA9B,mBAAS,CAAC,kBAAkB,CAAC;+DAA4C;IAC1C;QAA/B,mBAAS,CAAC,mBAAmB,CAAC;gEAA8C;IAC1C;QAAlC,mBAAS,CAAC,sBAAsB,CAAC;mEAAoD;IAE5D;QAAzB,kCAAW,CAAC,WAAW,CAAC;wDAAgC;IAC7B;QAA3B,kCAAW,CAAC,aAAa,CAAC;0DAAkC;IACnC;QAAzB,kCAAW,CAAC,WAAW,CAAC;wDAAgC;IAClC;QAAtB,kCAAW,CAAC,QAAQ,CAAC;qDAA6B;IACvB;QAA3B,kCAAW,CAAC,aAAa,CAAC;0DAAkC;IAuejE,wBAAC;CA9fD,AA8fC,CA9fsC,qBAAS,GA8f/C;AA9fY,8CAAiB","file":"groupCellRenderer.js","sourcesContent":["import { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { ExpressionService } from \"../../valueService/expressionService\";\nimport { EventService } from \"../../eventService\";\nimport { Constants } from \"../../constants\";\nimport { Autowired } from \"../../context/context\";\nimport { Component } from \"../../widgets/component\";\nimport { ICellRendererComp, ICellRendererParams } from \"./iCellRenderer\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { ValueFormatterService } from \"../valueFormatterService\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent\";\nimport { ColumnController } from \"../../columnController/columnController\";\nimport { Column } from \"../../entities/column\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { MouseEventService } from \"../../gridPanel/mouseEventService\";\nimport { ColDef } from \"../../entities/colDef\";\nimport {\n    ComponentClassDef,\n    ComponentSource,\n    UserComponentFactory\n} from \"../../components/framework/userComponentFactory\";\nimport { _, Promise } from \"../../utils\";\n\nexport interface GroupCellRendererParams extends ICellRendererParams {\n    pinned: string;\n    suppressPadding: boolean;\n    suppressDoubleClickExpand: boolean;\n    suppressEnterExpand: boolean;\n    footerValueGetter: any;\n    suppressCount: boolean;\n    fullWidth: boolean;\n    checkbox: any;\n    scope: any;\n\n    /** @deprecated */\n    padding: number;\n}\n\nexport class GroupCellRenderer extends Component implements ICellRendererComp {\n\n    private static TEMPLATE =\n        '<span class=\"ag-cell-wrapper\">' +\n         '<span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>' +\n         '<span class=\"ag-group-contracted\" ref=\"eContracted\"></span>' +\n         '<span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>' +\n         '<span class=\"ag-group-value\" ref=\"eValue\"></span>' +\n         '<span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>' +\n        '</span>';\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    @RefSelector('eExpanded') private eExpanded: HTMLElement;\n    @RefSelector('eContracted') private eContracted: HTMLElement;\n    @RefSelector('eCheckbox') private eCheckbox: HTMLElement;\n    @RefSelector('eValue') private eValue: HTMLElement;\n    @RefSelector('eChildCount') private eChildCount: HTMLElement;\n\n    private params: GroupCellRendererParams;\n\n    // will be true if the node was pulled down\n    private draggedFromHideOpenParents: boolean;\n\n    // this is normally the rowNode of this row, however when doing hideOpenParents, it will\n    // be the parent who's details we are actually showing if the data was pulled down.\n    private displayedGroup: RowNode;\n\n    private cellIsBlank: boolean;\n\n    // keep reference to this, so we can remove again when indent changes\n    private indentClass: string;\n\n    // this cell renderer\n    private innerCellRenderer: ICellRendererComp;\n\n    constructor() {\n        super(GroupCellRenderer.TEMPLATE);\n    }\n\n    public init(params: GroupCellRendererParams): void {\n\n        this.params = params;\n\n        if (this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {\n            this.assignBlankValueToGroupFooterCell(params);\n        }\n\n        const embeddedRowMismatch = this.isEmbeddedRowMismatch();\n        // This allows for empty strings to appear as groups since\n        // it will only return for null or undefined.\n        const cellIsEmpty = params.value == null;\n\n        this.cellIsBlank = embeddedRowMismatch || cellIsEmpty;\n\n        if (this.cellIsBlank) { return; }\n\n        this.setupDragOpenParents();\n\n        this.addExpandAndContract();\n        this.addCheckboxIfNeeded();\n        this.addValueElement();\n        this.setupIndent();\n    }\n\n    private assignBlankValueToGroupFooterCell(params: GroupCellRendererParams) {\n        // this is not ideal, but it was the only way we could get footer working for the root node\n        if (!params.value && params.node.level == -1) {\n            params.value = '';\n        }\n    }\n\n    // if we are doing embedded full width rows, we only show the renderer when\n    // in the body, or if pinning in the pinned section, or if pinning and RTL,\n    // in the right section. otherwise we would have the cell repeated in each section.\n    private isEmbeddedRowMismatch(): boolean {\n        if (this.params.fullWidth && this.gridOptionsWrapper.isEmbedFullWidthRows()) {\n\n            const pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;\n            const pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;\n            const bodyCell = !pinnedLeftCell && !pinnedRightCell;\n\n            if (this.gridOptionsWrapper.isEnableRtl()) {\n                if (this.columnController.isPinningLeft()) {\n                    return !pinnedRightCell;\n                } else {\n                    return !bodyCell;\n                }\n            } else {\n                if (this.columnController.isPinningLeft()) {\n                    return !pinnedLeftCell;\n                } else {\n                    return !bodyCell;\n                }\n            }\n        } else {\n            return false;\n        }\n    }\n\n    private setIndent(): void {\n        if (this.gridOptionsWrapper.isGroupHideOpenParents()) { return; }\n\n        const params = this.params;\n        const rowNode: RowNode = params.node;\n\n        const paddingCount = rowNode.uiLevel;\n\n        const userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;\n        if (userProvidedPaddingPixelsTheDeprecatedWay) {\n            this.setPaddingDeprecatedWay(paddingCount, params.padding);\n            return;\n        }\n\n        if (this.indentClass) {\n            this.removeCssClass(this.indentClass);\n        }\n\n        this.indentClass = 'ag-row-group-indent-' + paddingCount;\n        this.addCssClass(this.indentClass);\n    }\n\n    private setPaddingDeprecatedWay(paddingCount: number, padding: number): void {\n        _.doOnce(() => console.warn('ag-Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the ag-Grid documentation page for Themes, in particular the property $row-group-indent-size.'), 'groupCellRenderer->doDeprecatedWay');\n\n        const paddingPx = paddingCount * padding;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // if doing rtl, padding is on the right\n            this.getGui().style.paddingRight = paddingPx + 'px';\n        } else {\n            // otherwise it is on the left\n            this.getGui().style.paddingLeft = paddingPx + 'px';\n        }\n    }\n\n    private setupIndent(): void {\n\n        // only do this if an indent - as this overwrites the padding that\n        // the theme set, which will make things look 'not aligned' for the\n        // first group level.\n        const node: RowNode = this.params.node;\n        const suppressPadding = this.params.suppressPadding;\n\n        if (!suppressPadding) {\n            this.addDestroyableEventListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));\n            this.setIndent();\n        }\n    }\n\n    private addValueElement(): void {\n        const params = this.params;\n        const rowNode = this.displayedGroup;\n        if (rowNode.footer) {\n            this.createFooterCell();\n        } else if (\n            rowNode.hasChildren() ||\n            _.get(params.colDef, 'cellRendererParams.innerRenderer', null) ||\n            _.get(params.colDef, 'cellRendererParams.innerRendererFramework', null)\n        ) {\n            this.createGroupCell();\n            if (rowNode.hasChildren()) {\n                this.addChildCount();\n            }\n        } else {\n            this.createLeafCell();\n        }\n    }\n\n    private createFooterCell(): void {\n        let footerValue: string;\n        const footerValueGetter = this.params.footerValueGetter;\n        if (footerValueGetter) {\n            // params is same as we were given, except we set the value as the item to display\n            const paramsClone: any = _.cloneObject(this.params);\n            paramsClone.value = this.params.value;\n            if (typeof footerValueGetter === 'function') {\n                footerValue = footerValueGetter(paramsClone);\n            } else if (typeof footerValueGetter === 'string') {\n                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);\n            } else {\n                console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');\n            }\n        } else {\n            footerValue = 'Total ' + this.params.value;\n        }\n\n        this.eValue.innerHTML = footerValue;\n    }\n\n    private createGroupCell(): void {\n        const params = this.params;\n        const rowGroupColumn = this.displayedGroup.rowGroupColumn;\n\n        // we try and use the cellRenderer of the column used for the grouping if we can\n        const columnToUse: Column = rowGroupColumn ? rowGroupColumn : params.column;\n\n        const groupName = this.params.value;\n        const valueFormatted = columnToUse ?\n            this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;\n\n        params.valueFormatted = valueFormatted;\n\n        let rendererPromise:Promise<ICellRendererComp>;\n        if (params.fullWidth == true) {\n            rendererPromise = this.useFullWidth(params);\n        } else {\n            rendererPromise = this.useInnerRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), params);\n        }\n\n        // retain a reference to the created renderer - we'll use this later for cleanup (in destroy)\n        if (rendererPromise) {\n            rendererPromise.then((value:ICellRendererComp) => {\n                this.innerCellRenderer = value;\n            });\n        }\n    }\n\n    private useInnerRenderer(\n        groupCellRendererParams: GroupCellRendererParams,\n        groupedColumnDef: ColDef, // the column this group row is for, eg 'Country'\n        params: any\n    ): Promise<ICellRendererComp> {\n        // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country\n        // and then rating, we will use the country cell renderer for each country group row and likewise the rating\n        // cell renderer for each rating group row.\n        //\n        // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers\n        // of the grouped columns.\n        //\n        // so we check and use in the following order:\n        //\n        // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)\n        // 2) groupedColDef.cellRenderer of the grouped column\n        // 3) groupedColDef.cellRendererParams.innerRenderer\n\n        let cellRendererPromise: Promise<ICellRendererComp> = null;\n        // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer\n        const groupInnerRendererClass: ComponentClassDef<any, any> = this.userComponentFactory\n            .lookupComponentClassDef(groupCellRendererParams, \"innerRenderer\");\n\n        if (groupInnerRendererClass && groupInnerRendererClass.component != null\n            && groupInnerRendererClass.source != ComponentSource.DEFAULT) {\n            // use the renderer defined in cellRendererParams.innerRenderer\n            cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupCellRendererParams, params);\n        } else {\n            // otherwise see if we can use the cellRenderer of the column we are grouping by\n            const groupColumnRendererClass: ComponentClassDef<any, any> = this.userComponentFactory\n                .lookupComponentClassDef(groupedColumnDef, \"cellRenderer\");\n            if (groupColumnRendererClass && groupColumnRendererClass.source != ComponentSource.DEFAULT) {\n                // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it\n                cellRendererPromise = this.userComponentFactory.newCellRenderer(groupedColumnDef, params);\n            } else if (groupColumnRendererClass && groupColumnRendererClass.source == ComponentSource.DEFAULT\n                && (_.get(groupedColumnDef, 'cellRendererParams.innerRenderer', null))) {\n                // EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'\n                // AND HAS A INNER CELL RENDERER\n                cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupedColumnDef.cellRendererParams, params);\n            } else {\n                // This forces the retrieval of the default plain cellRenderer that just renders the values.\n                cellRendererPromise = this.userComponentFactory.newCellRenderer({}, params);\n            }\n        }\n        if (cellRendererPromise != null) {\n            cellRendererPromise.then(rendererToUse => {\n                if (rendererToUse == null) {\n                    this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n                    return;\n                }\n                _.bindCellRendererToHtmlElement(cellRendererPromise, this.eValue);\n            });\n        } else {\n            this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n        }\n        return cellRendererPromise;\n    }\n\n    private useFullWidth(params: any): Promise<ICellRendererComp> {\n        const cellRendererPromise: Promise<ICellRendererComp> = this.userComponentFactory.newFullWidthGroupRowInnerCellRenderer (params);\n        if (cellRendererPromise != null) {\n            _.bindCellRendererToHtmlElement(cellRendererPromise, this.eValue);\n        } else {\n            this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n        }\n        return cellRendererPromise;\n    }\n\n    private addChildCount(): void {\n\n        // only include the child count if it's included, eg if user doing custom aggregation,\n        // then this could be left out, or set to -1, ie no child count\n        if (this.params.suppressCount) { return; }\n\n        this.addDestroyableEventListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));\n\n        // filtering changes the child count, so need to cater for it\n        this.updateChildCount();\n    }\n\n    private updateChildCount(): void {\n        const allChildrenCount = this.displayedGroup.allChildrenCount;\n        this.eChildCount.innerHTML = allChildrenCount >= 0 ? `(${allChildrenCount})` : ``;\n    }\n\n    private createLeafCell(): void {\n        if (_.exists(this.params.value)) {\n            this.eValue.innerText = this.params.valueFormatted ? this.params.valueFormatted : this.params.value;\n        }\n    }\n\n    private isUserWantsSelected(): boolean {\n        const paramsCheckbox = this.params.checkbox;\n        if (typeof paramsCheckbox === 'function') {\n            return paramsCheckbox(this.params);\n        } else {\n            return paramsCheckbox === true;\n        }\n    }\n\n    private addCheckboxIfNeeded(): void {\n        const rowNode = this.displayedGroup;\n        const checkboxNeeded = this.isUserWantsSelected()\n                // footers cannot be selected\n                && !rowNode.footer\n                // pinned rows cannot be selected\n                && !rowNode.rowPinned\n                // details cannot be selected\n                && !rowNode.detail;\n        if (checkboxNeeded) {\n            const cbSelectionComponent = new CheckboxSelectionComponent();\n            this.getContext().wireBean(cbSelectionComponent);\n            cbSelectionComponent.init({rowNode: rowNode, column: this.params.column});\n            this.eCheckbox.appendChild(cbSelectionComponent.getGui());\n            this.addDestroyFunc(() => cbSelectionComponent.destroy());\n        }\n\n        _.addOrRemoveCssClass(this.eCheckbox, 'ag-invisible', !checkboxNeeded);\n    }\n\n    private addExpandAndContract(): void {\n        const params = this.params;\n        const eGroupCell = params.eGridCell;\n        const eExpandedIcon = _.createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);\n        const eContractedIcon = _.createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);\n        this.eExpanded.appendChild(eExpandedIcon);\n        this.eContracted.appendChild(eContractedIcon);\n\n        this.addDestroyableEventListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));\n        this.addDestroyableEventListener(this.eContracted, 'click', this.onExpandClicked.bind(this));\n\n        // expand / contract as the user hits enter\n        this.addDestroyableEventListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));\n        this.addDestroyableEventListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));\n        this.showExpandAndContractIcons();\n\n        // because we don't show the expand / contract when there are no children, we need to check every time\n        // the number of children change.\n        this.addDestroyableEventListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED,\n            this.onAllChildrenCountChanged.bind(this));\n\n        // if editing groups, then double click is to start editing\n        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {\n            this.addDestroyableEventListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));\n        }\n    }\n\n    private onAllChildrenCountChanged(): void {\n        // maybe if no children now, we should hide the expand / contract icons\n        this.showExpandAndContractIcons();\n        // if we have no children, this impacts the indent\n        this.setIndent();\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const enterKeyPressed = _.isKeyPressed(event, Constants.KEY_ENTER);\n        if (enterKeyPressed) {\n            if (this.params.suppressEnterExpand) { return; }\n\n            const cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);\n            if (cellEditable) { return; }\n\n            event.preventDefault();\n            this.onExpandOrContract();\n        }\n    }\n\n    private setupDragOpenParents(): void {\n\n        const column = this.params.column;\n        const rowNode: RowNode = this.params.node;\n\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            this.draggedFromHideOpenParents = false;\n        } else if (!rowNode.hasChildren()) {\n            // if we are here, and we are not a group, then we must of been dragged down,\n            // as otherwise the cell would be blank, and if cell is blank, this method is never called.\n            this.draggedFromHideOpenParents = true;\n        } else {\n            const rowGroupColumn = rowNode.rowGroupColumn;\n            if (rowGroupColumn) {\n                // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,\n                // then nothing was dragged down\n                this.draggedFromHideOpenParents = !column.isRowGroupDisplayed(rowGroupColumn.getId());\n            } else {\n                // the only way we can end up here (no column, but a group) is if we are at the root node,\n                // which only happens when 'groupIncludeTotalFooter' is true. here, we are never dragging\n                this.draggedFromHideOpenParents = false;\n            }\n        }\n\n        if (this.draggedFromHideOpenParents) {\n            let pointer = rowNode.parent;\n            while (true) {\n                if (_.missing(pointer)) {\n                    break;\n                }\n                if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {\n                    this.displayedGroup = pointer;\n                    break;\n                }\n                pointer = pointer.parent;\n            }\n        }\n\n        // if we didn't find a displayed group, set it to the row node\n        if (_.missing(this.displayedGroup)) {\n            this.displayedGroup = rowNode;\n        }\n    }\n\n    public onExpandClicked(mouseEvent: MouseEvent): void {\n        if (_.isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // so if we expand a node, it does not also get selected.\n        _.stopPropagationForAgGrid(mouseEvent);\n\n        this.onExpandOrContract();\n    }\n\n    public onCellDblClicked(mouseEvent: MouseEvent): void {\n        if (_.isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // we want to avoid acting on double click events on the expand / contract icon,\n        // as that icons already has expand / collapse functionality on it. otherwise if\n        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which\n        // is open->close->open, however double click should be open->close only.\n        const targetIsExpandIcon\n            = _.isElementInEventPath(this.eExpanded, mouseEvent)\n            || _.isElementInEventPath(this.eContracted, mouseEvent);\n\n        if (!targetIsExpandIcon) {\n            this.onExpandOrContract();\n        }\n    }\n\n    public onExpandOrContract(): void {\n        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row\n        const rowNode: RowNode = this.displayedGroup;\n\n        rowNode.setExpanded(!rowNode.expanded);\n    }\n\n    private isExpandable(): boolean {\n        const rowNode = this.params.node;\n        const reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;\n        return this.draggedFromHideOpenParents ||\n                (rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode);\n    }\n\n    private showExpandAndContractIcons(): void {\n\n        const rowNode = this.params.node;\n\n        if (this.isExpandable()) {\n            // if expandable, show one based on expand state.\n            // if we were dragged down, means our parent is always expanded\n            const expanded = this.draggedFromHideOpenParents ? true : rowNode.expanded;\n            _.setDisplayed(this.eContracted, !expanded);\n            _.setDisplayed(this.eExpanded, expanded);\n        } else {\n            // it not expandable, show neither\n            _.setDisplayed(this.eExpanded, false);\n            _.setDisplayed(this.eContracted, false);\n        }\n\n        const displayedGroup = this.displayedGroup;\n        // compensation padding for leaf nodes, so there is blank space instead of the expand icon\n        const pivotModeAndLeafGroup = this.columnController.isPivotMode() && displayedGroup.leafGroup;\n        const notExpandable = !displayedGroup.isExpandable();\n        const addLeafIndentClass = displayedGroup.footer || notExpandable || pivotModeAndLeafGroup;\n        this.addOrRemoveCssClass('ag-row-group', !addLeafIndentClass);\n        this.addOrRemoveCssClass('ag-row-group-leaf-indent', addLeafIndentClass);\n    }\n\n    public destroy() : void {\n        super.destroy();\n\n        if (this.innerCellRenderer && this.innerCellRenderer.destroy) {\n            this.innerCellRenderer.destroy();\n        }\n    }\n\n    public refresh(): boolean {\n        return false;\n    }\n}\n"]}