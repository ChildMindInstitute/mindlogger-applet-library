{"version":3,"sources":["../../src/ts/rendering/cellRenderers/iCellRenderer.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iCellRenderer.js","sourcesContent":["import { IComponent } from \"../../interfaces/iComponent\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { ColDef } from \"../../entities/colDef\";\nimport { Column } from \"../../entities/column\";\nimport { GridApi } from \"../../gridApi\";\nimport { ColumnApi } from \"../../columnController/columnApi\";\n\nexport interface ICellRendererParams {\n    value: any;\n    valueFormatted: any;\n    getValue: () => any;\n    setValue: (value: any) => void;\n    formatValue: (value: any) => any;\n    data: any;\n    node: RowNode;\n    colDef: ColDef;\n    column: Column;\n    $scope: any;\n    rowIndex: number;\n    api: GridApi;\n    columnApi: ColumnApi;\n    context: any;\n    refreshCell: () => void;\n    eGridCell: HTMLElement;\n    eParentOfValue: HTMLElement;\n    addRenderedRowListener: (eventType: string, listener: Function) => void;\n}\n\nexport interface ICellRenderer {\n    /** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n     * then the grid will refresh the cell for you. */\n    refresh(params: any): boolean;\n}\n\nexport interface ICellRendererComp extends ICellRenderer, IComponent<ICellRendererParams> {\n\n}\n\nexport interface ICellRendererFunc {\n    (params: any): HTMLElement | string;\n}"]}