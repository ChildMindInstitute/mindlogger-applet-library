{"version":3,"sources":["../../src/ts/rendering/cellRendererFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8CAAoE;AAKpE,qFAAoF;AACpF,+FAA8F;AAC9F,uEAAsE;AACtE,kCAA6B;AAG7B;IAAA;QAUY,oBAAe,GAAgE,EAAE,CAAC;IAgC9F,CAAC;4BA1CY,mBAAmB;IAapB,kCAAI,GAAZ;QACI,IAAI,CAAC,eAAe,CAAC,qBAAmB,CAAC,aAAa,CAAC,GAAG,mDAAwB,CAAC;QACnF,IAAI,CAAC,eAAe,CAAC,qBAAmB,CAAC,mBAAmB,CAAC,GAAG,6DAA6B,CAAC;QAC9F,IAAI,CAAC,eAAe,CAAC,qBAAmB,CAAC,KAAK,CAAC,GAAG,qCAAiB,CAAC;QAEpE,2CAA2C;IAC/C,CAAC;IAED,qDAAqD;IACrD,kFAAkF;IAClF,6HAA6H;IAC7H,mDAAmD;IACnD,UAAU;IACV,IAAI;IAEG,6CAAe,GAAtB,UAAuB,GAAW,EAAE,YAAwD;QACxF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;IAC7C,CAAC;IAEM,6CAAe,GAAtB,UAAuB,GAAW;QAE9B,IAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,SAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACnB,OAAO,CAAC,IAAI,CAAC,+CAA+C,GAAG,GAAG,CAAC,CAAC;YACpE,OAAO,IAAI,CAAC;SACf;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;;IAvCa,iCAAa,GAAG,cAAc,CAAC;IAC/B,uCAAmB,GAAG,mBAAmB,CAAC;IAC1C,yBAAK,GAAG,OAAO,CAAC;IAEG;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;mEAAgD;IAChD;QAA/B,mBAAS,CAAC,mBAAmB,CAAC;kEAA8C;IAClD;QAA1B,mBAAS,CAAC,cAAc,CAAC;6DAAoC;IAK9D;QADC,uBAAa;mDAOb;IAnBQ,mBAAmB;QAD/B,cAAI,CAAC,qBAAqB,CAAC;OACf,mBAAmB,CA0C/B;IAAD,0BAAC;CA1CD,AA0CC,IAAA;AA1CY,kDAAmB","file":"cellRendererFactory.js","sourcesContent":["import { Bean, PostConstruct, Autowired } from \"../context/context\";\nimport { ICellRenderer, ICellRendererFunc } from \"./cellRenderers/iCellRenderer\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { EventService } from \"../eventService\";\nimport { ExpressionService } from \"../valueService/expressionService\";\nimport { AnimateSlideCellRenderer } from \"./cellRenderers/animateSlideCellRenderer\";\nimport { AnimateShowChangeCellRenderer } from \"./cellRenderers/animateShowChangeCellRenderer\";\nimport { GroupCellRenderer } from \"./cellRenderers/groupCellRenderer\";\nimport { _ } from '../utils';\n\n@Bean('cellRendererFactory')\nexport class CellRendererFactory {\n\n    public static ANIMATE_SLIDE = 'animateSlide';\n    public static ANIMATE_SHOW_CHANGE = 'animateShowChange';\n    public static GROUP = 'group';\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('eventService') private eventService: EventService;\n\n    private cellRendererMap: {[key: string]: {new(): ICellRenderer} | ICellRendererFunc} = {};\n\n    @PostConstruct\n    private init(): void {\n        this.cellRendererMap[CellRendererFactory.ANIMATE_SLIDE] = AnimateSlideCellRenderer;\n        this.cellRendererMap[CellRendererFactory.ANIMATE_SHOW_CHANGE] = AnimateShowChangeCellRenderer;\n        this.cellRendererMap[CellRendererFactory.GROUP] = GroupCellRenderer;\n\n        // this.registerRenderersFromGridOptions();\n    }\n\n    // private registerRenderersFromGridOptions(): void {\n    //     let userProvidedCellRenderers = this.gridOptionsWrapper.getCellRenderers();\n    //     _.iterateObject(userProvidedCellRenderers, (key: string, cellRenderer: {new(): ICellRenderer} | ICellRendererFunc)=> {\n    //         this.addCellRenderer(key, cellRenderer);\n    //     });\n    // }\n\n    public addCellRenderer(key: string, cellRenderer: {new(): ICellRenderer} | ICellRendererFunc): void {\n        this.cellRendererMap[key] = cellRenderer;\n    }\n\n    public getCellRenderer(key: string): {new(): ICellRenderer} | ICellRendererFunc {\n\n        const result = this.cellRendererMap[key];\n        if (_.missing(result)) {\n            console.warn('ag-Grid: unable to find cellRenderer for key ' + key);\n            return null;\n        }\n\n        return result;\n    }\n}\n"]}