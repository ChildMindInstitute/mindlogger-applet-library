{"version":3,"sources":["../../src/ts/rendering/checkboxSelectionComponent.ts"],"names":[],"mappings":"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","file":"checkboxSelectionComponent.js","sourcesContent":["import { Component } from '../widgets/component';\nimport { RowNode } from '../entities/rowNode';\nimport { Autowired } from '../context/context';\nimport { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { Column } from '../entities/column';\nimport { Events } from '../events';\nimport { EventService } from '../eventService';\nimport { GridApi } from '../gridApi';\nimport { ColumnApi } from '../columnController/columnApi';\nimport { IsRowSelectable } from '../entities/gridOptions';\nimport { _ } from '../utils';\n\nexport class CheckboxSelectionComponent extends Component {\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n\n    private eCheckedIcon: HTMLElement;\n    private eUncheckedIcon: HTMLElement;\n    private eIndeterminateIcon: HTMLElement;\n    private checkbox: HTMLInputElement;\n\n    private rowNode: RowNode;\n    private column: Column;\n    private isRowSelectableFunc: IsRowSelectable;\n\n    constructor() {\n        super(`<span class=\"ag-selection-checkbox\"/>`);\n    }\n\n    private createAndAddIcons(): void {\n        const element = this.getGui();\n        if (this.gridOptionsWrapper.useNativeCheckboxes()) {\n            this.checkbox = document.createElement('input');\n            this.checkbox.type = 'checkbox';\n            element.appendChild(this.checkbox);\n        } else {\n            this.eCheckedIcon = _.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.column);\n            this.eUncheckedIcon = _.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.column);\n            this.eIndeterminateIcon = _.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, this.column);\n\n            element.appendChild(this.eCheckedIcon);\n            element.appendChild(this.eUncheckedIcon);\n            element.appendChild(this.eIndeterminateIcon);\n        }\n    }\n\n    private onDataChanged(): void {\n        // when rows are loaded for the second time, this can impact the selection, as a row\n        // could be loaded as already selected (if user scrolls down, and then up again).\n        this.onSelectionChanged();\n    }\n\n    private onSelectableChanged(): void {\n        this.showOrHideSelect();\n    }\n\n    private onSelectionChanged(): void {\n        const state = this.rowNode.isSelected();\n        if (this.gridOptionsWrapper.useNativeCheckboxes()) {\n            this.checkbox.checked = state === true;\n            this.checkbox.indeterminate = typeof state !== 'boolean';\n        } else {\n            _.setDisplayed(this.eCheckedIcon, state === true);\n            _.setDisplayed(this.eUncheckedIcon, state === false);\n            _.setDisplayed(this.eIndeterminateIcon, typeof state !== 'boolean');\n        }\n    }\n\n    private onCheckedClicked(): number {\n        const groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n        const updatedCount = this.rowNode.setSelectedParams({ newValue: false, groupSelectsFiltered: groupSelectsFiltered });\n        return updatedCount;\n    }\n\n    private onUncheckedClicked(event: MouseEvent): number {\n        const groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n        const updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered: groupSelectsFiltered });\n        return updatedCount;\n    }\n\n    private onIndeterminateClicked(event: MouseEvent): void {\n        const result = this.onUncheckedClicked(event);\n        if (result === 0) {\n            this.onCheckedClicked();\n        }\n    }\n\n    private onCheckboxClicked(event: MouseEvent): void {\n        if (this.checkbox.checked) {\n            this.onUncheckedClicked(event);\n        } else {\n            this.onCheckedClicked();\n        }\n    }\n\n    public init(params: any): void {\n        this.rowNode = params.rowNode;\n        this.column = params.column;\n\n        this.createAndAddIcons();\n\n        this.onSelectionChanged();\n\n        // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row\n        // would possibly get selected twice\n        this.addGuiEventListener('click', event => _.stopPropagationForAgGrid(event));\n        // likewise we don't want double click on this icon to open a group\n        this.addGuiEventListener('dblclick', event => _.stopPropagationForAgGrid(event));\n\n        if (this.gridOptionsWrapper.useNativeCheckboxes()) {\n            this.addDestroyableEventListener(this.checkbox, 'click', this.onCheckboxClicked.bind(this));\n        } else {\n            this.addDestroyableEventListener(this.eCheckedIcon, 'click', this.onCheckedClicked.bind(this));\n            this.addDestroyableEventListener(this.eUncheckedIcon, 'click', this.onUncheckedClicked.bind(this));\n            this.addDestroyableEventListener(this.eIndeterminateIcon, 'click', this.onIndeterminateClicked.bind(this));\n        }\n        this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));\n        this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));\n        this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));\n\n        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n        const checkboxVisibleIsDynamic = this.isRowSelectableFunc || this.checkboxCallbackExists();\n        if (checkboxVisibleIsDynamic) {\n            this.addDestroyableEventListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelect.bind(this));\n            this.showOrHideSelect();\n        }\n    }\n\n    private showOrHideSelect(): void {\n        // if the isRowSelectable() is not provided the row node is selectable by default\n        let selectable = this.rowNode.selectable;\n\n        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.\n        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need\n        // to call the colDef callback.\n        if (selectable && this.checkboxCallbackExists()) {\n            selectable = this.column.isCellCheckboxSelection(this.rowNode);\n        }\n\n        // show checkbox if both conditions are true\n        this.setDisplayed(selectable);\n    }\n\n    private checkboxCallbackExists(): boolean {\n        // column will be missing if groupUseEntireRow=true\n        const colDef = this.column ? this.column.getColDef() : null;\n        return colDef && typeof colDef.checkboxSelection === 'function';\n    }\n}\n"]}