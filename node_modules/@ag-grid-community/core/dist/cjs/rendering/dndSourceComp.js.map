{"version":3,"sources":["../../src/ts/rendering/dndSourceComp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAAiD;AACjD,8CAAmD;AAInD,kCAA6B;AAE7B;IAAmC,iCAAS;IASxC,uBAAY,OAAgB,EAAE,MAAc,EAAE,SAAiB,EAAE,KAAY,EAAE,KAAkB;QAAjG,YACI,kBAAM,sDAAkD,CAAC,SAM5D;QALG,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;IACvB,CAAC;IAGO,qCAAa,GAArB;QACI,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,SAAC,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC;QACrF,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEO,qCAAa,GAArB;QACI,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvE,CAAC;IAEO,mCAAW,GAAnB,UAAoB,SAAoB;QAAxC,iBA+BC;QA7BG,IAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC;QACrE,IAAM,IAAI,GAAG,SAAC,CAAC,WAAW,EAAE,CAAC;QAE7B,IAAI,CAAC,IAAI,EAAE;YACP,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACzD;QAED,2EAA2E;QAC3E,IAAM,gBAAgB,GAAG;YACrB,IAAI;gBACA,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAEnD,IAAI,IAAI,EAAE;oBACN,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;iBACpD;qBAAM;oBACH,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;oBAC7D,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;iBAC1D;aAEJ;YAAC,OAAO,CAAC,EAAE;gBACR,qEAAqE;aACxE;QACL,CAAC,CAAC;QAEF,IAAI,iBAAiB,EAAE;YACnB,iBAAiB,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAC,CAAC,CAAC;SACpE;aAAM;YACH,gBAAgB,EAAE,CAAC;SACtB;IACL,CAAC;IAEO,uCAAe,GAAvB;QACI,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IA/CD;QADC,uBAAa;sDAMb;IA2CL,oBAAC;CAnED,AAmEC,CAnEkC,qBAAS,GAmE3C;AAnEY,sCAAa","file":"dndSourceComp.js","sourcesContent":["import { Component } from \"../widgets/component\";\nimport { PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Beans } from \"./beans\";\nimport { Column } from \"../entities/column\";\nimport { _ } from \"../utils\";\n\nexport class DndSourceComp extends Component {\n\n    private readonly beans: Beans;\n\n    private readonly rowNode: RowNode;\n    private readonly column: Column;\n    private readonly cellValue: string;\n    private readonly eCell: HTMLElement;\n\n    constructor(rowNode: RowNode, column: Column, cellValue: string, beans: Beans, eCell: HTMLElement) {\n        super(`<div class=\"ag-row-drag\" draggable=\"true\"></div>`);\n        this.rowNode = rowNode;\n        this.column = column;\n        this.cellValue = cellValue;\n        this.beans = beans;\n        this.eCell = eCell;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eGui = this.getGui();\n        eGui.appendChild(_.createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null));\n        this.addDragSource();\n        this.checkVisibility();\n    }\n\n    private addDragSource(): void {\n        this.addGuiEventListener('dragstart', this.onDragStart.bind(this));\n    }\n\n    private onDragStart(dragEvent: DragEvent): void {\n\n        const providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;\n        const isIE = _.isBrowserIE();\n\n        if (!isIE) {\n            dragEvent.dataTransfer.setDragImage(this.eCell, 0, 0);\n        }\n\n        // default behaviour is to convert data to json and set into drag component\n        const defaultOnRowDrag = () => {\n            try {\n                const jsonData = JSON.stringify(this.rowNode.data);\n\n                if (isIE) {\n                    dragEvent.dataTransfer.setData('text', jsonData);\n                } else {\n                    dragEvent.dataTransfer.setData('application/json', jsonData);\n                    dragEvent.dataTransfer.setData('text/plain', jsonData);\n                }\n\n            } catch (e) {\n                // if we cannot convert the data to json, then we do not set the type\n            }\n        };\n\n        if (providedOnRowDrag) {\n            providedOnRowDrag({rowNode: this.rowNode, dragEvent: dragEvent});\n        } else {\n            defaultOnRowDrag();\n        }\n    }\n\n    private checkVisibility(): void {\n        const visible = this.column.isDndSource(this.rowNode);\n        this.setDisplayed(visible);\n    }\n}\n"]}