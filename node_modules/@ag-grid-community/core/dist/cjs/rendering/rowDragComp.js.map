{"version":3,"sources":["../../src/ts/rendering/rowDragComp.ts"],"names":[],"mappings":"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","file":"rowDragComp.js","sourcesContent":["import { Component } from \"../widgets/component\";\nimport { PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { DragItem, DragSource, DragSourceType } from \"../dragAndDrop/dragAndDropService\";\nimport { Events } from \"../eventKeys\";\nimport { Beans } from \"./beans\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Column } from \"../entities/column\";\nimport { _ } from \"../utils\";\n\nexport class RowDragComp extends Component {\n    private readonly beans: Beans;\n    private readonly rowNode: RowNode;\n    private readonly column: Column;\n    private readonly cellValue: string;\n\n    constructor(rowNode: RowNode, column: Column, cellValue: string, beans: Beans) {\n        super(`<div class=\"ag-row-drag\"></div>`);\n        this.rowNode = rowNode;\n        this.column = column;\n        this.cellValue = cellValue;\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eGui = this.getGui();\n        eGui.appendChild(_.createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null));\n        this.addDragSource();\n\n        this.checkCompatibility();\n\n        const strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ?\n            new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) :\n            new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);\n\n        this.addFeature(strategy, this.beans.context);\n    }\n\n    // returns true if all compatibility items work out\n    private checkCompatibility(): void {\n        const managed = this.beans.gridOptionsWrapper.isRowDragManaged();\n        const treeData = this.beans.gridOptionsWrapper.isTreeData();\n\n        if (treeData && managed) {\n            _.doOnce(() =>\n                console.warn('ag-Grid: If using row drag with tree data, you cannot have rowDragManaged=true'),\n                'RowDragComp.managedAndTreeData'\n            );\n        }\n    }\n\n    private addDragSource(): void {\n        const dragItem: DragItem = {\n            rowNode: this.rowNode\n        };\n\n        const dragSource: DragSource = {\n            type: DragSourceType.RowDrag,\n            eElement: this.getGui(),\n            dragItemName: this.cellValue,\n            getDragItem: () => dragItem,\n            dragStartPixels: 0\n        };\n\n        this.beans.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.beans.dragAndDropService.removeDragSource(dragSource));\n    }\n}\n\nclass VisibilityStrategy extends BeanStub {\n    private readonly parent: RowDragComp;\n    private readonly column: Column;\n    protected readonly rowNode: RowNode;\n\n    constructor(parent: RowDragComp, rowNode: RowNode, column: Column) {\n        super();\n        this.parent = parent;\n        this.column = column;\n        this.rowNode = rowNode;\n    }\n\n    protected setDisplayedOrVisible(neverDisplayed: boolean): void {\n        if (neverDisplayed) {\n            this.parent.setDisplayed(false);\n        } else {\n            const shown = this.column.isRowDrag(this.rowNode);\n            const isShownSometimes = _.isFunction(this.column.getColDef().rowDrag);\n\n            // if shown sometimes, them some rows can have drag handle while other don't,\n            // so we use setVisible to keep the handles horizontally aligned (as setVisible\n            // keeps the empty space, whereas setDisplayed looses the space)\n            if (isShownSometimes) {\n                this.parent.setDisplayed(true);\n                this.parent.setVisible(shown);\n            } else {\n                this.parent.setDisplayed(shown);\n            }\n        }\n    }\n}\n\n// when non managed, the visibility depends on suppressRowDrag property only\nclass NonManagedVisibilityStrategy extends VisibilityStrategy {\n    private readonly beans: Beans;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addDestroyableEventListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n\n// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\nclass ManagedVisibilityStrategy extends VisibilityStrategy {\n    private readonly beans: Beans;\n\n    private sortActive: boolean;\n    private filterActive: boolean;\n    private rowGroupActive: boolean;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        // we do not show the component if sort, filter or grouping is active\n\n        this.addDestroyableEventListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addDestroyableEventListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addDestroyableEventListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n\n        this.addDestroyableEventListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        this.updateSortActive();\n        this.updateFilterActive();\n        this.updateRowGroupActive();\n\n        this.workOutVisibility();\n    }\n\n    private updateRowGroupActive(): void {\n        const rowGroups = this.beans.columnController.getRowGroupColumns();\n        this.rowGroupActive = !_.missingOrEmpty(rowGroups);\n    }\n\n    private onRowGroupChanged(): void {\n        this.updateRowGroupActive();\n        this.workOutVisibility();\n    }\n\n    private updateSortActive(): void {\n        const sortModel = this.beans.sortController.getSortModel();\n        this.sortActive = !_.missingOrEmpty(sortModel);\n    }\n\n    private onSortChanged(): void {\n        this.updateSortActive();\n        this.workOutVisibility();\n    }\n\n    private updateFilterActive(): void {\n        this.filterActive = this.beans.filterManager.isAnyFilterPresent();\n    }\n\n    private onFilterChanged(): void {\n        this.updateFilterActive();\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const sortOrFilterOrGroupActive = this.sortActive || this.filterActive || this.rowGroupActive;\n        const suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n\n        const neverDisplayed = sortOrFilterOrGroupActive || suppressRowDrag;\n\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n"]}