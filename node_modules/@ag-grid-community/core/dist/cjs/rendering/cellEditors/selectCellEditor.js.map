{"version":3,"sources":["../../src/ts/rendering/cellEditors/selectCellEditor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+DAA8D;AAE9D,6CAA4C;AAC5C,iDAAkD;AAGlD,qCAAgC;AAMhC;IAAsC,oCAAc;IAQhD;QAAA,YACI,kBAAM,4EAA4E,CAAC,SAEtF;QADG,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,MAAM,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAsB,CAAC;;IAC9E,CAAC;IAEM,+BAAI,GAAX,UAAY,MAA+B;QAA3C,iBAsCC;QArCG,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,eAAe,CAAC;QAEjD,IAAI,SAAC,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YAC1B,OAAO,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;YAC/D,OAAO;SACV;QAED,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAU;YAC7B,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YAErB,IAAM,cAAc,GAAG,KAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAChG,IAAM,mBAAmB,GAAG,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC;YACpF,MAAM,CAAC,IAAI,GAAG,mBAAmB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC;YAE3D,IAAI,MAAM,CAAC,KAAK,KAAK,KAAK,EAAE;gBACxB,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;aAC1B;YACD,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,mFAAmF;QACnF,oBAAoB;QACpB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,EAAE;YAC1C,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,cAAM,OAAA,MAAM,CAAC,WAAW,EAAE,EAApB,CAAoB,CAAC,CAAC;SACxF;QAED,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,UAAC,KAAoB;YAC3E,IAAM,eAAe,GAAG,KAAK,CAAC,OAAO,KAAK,qBAAS,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,qBAAS,CAAC,QAAQ,CAAC;YACnG,IAAI,eAAe,EAAE;gBACjB,KAAK,CAAC,eAAe,EAAE,CAAC;aAC3B;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,EAAE,UAAC,KAAoB;YAC7E,KAAK,CAAC,eAAe,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,2CAAgB,GAAvB;QACI,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SACxB;IACL,CAAC;IAEM,kCAAO,GAAd;QACI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAEM,mCAAQ,GAAf;QACI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;IAC9B,CAAC;IAEM,kCAAO,GAAd;QACI,OAAO,KAAK,CAAC;IACjB,CAAC;IAhEgC;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;gEAAgD;IAC5C;QAAnC,mBAAS,CAAC,uBAAuB,CAAC;mEAAsD;IAgE7F,uBAAC;CAtED,AAsEC,CAtEqC,+BAAc,GAsEnD;AAtEY,4CAAgB","file":"selectCellEditor.js","sourcesContent":["import { PopupComponent } from \"../../widgets/popupComponent\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { Constants } from \"../../constants\";\nimport { Autowired } from \"../../context/context\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { ValueFormatterService } from \"../valueFormatterService\";\nimport { _ } from '../../utils';\n\nexport interface ISelectCellEditorParams extends ICellEditorParams {\n    values: any[];\n}\n\nexport class SelectCellEditor extends PopupComponent implements ICellEditorComp {\n\n    private focusAfterAttached: boolean;\n    private eSelect: HTMLSelectElement;\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n\n    constructor() {\n        super('<div class=\"ag-cell-edit-input\"><select class=\"ag-cell-edit-input\"/></div>');\n        this.eSelect = this.getGui().querySelector('select') as HTMLSelectElement;\n    }\n\n    public init(params: ISelectCellEditorParams) {\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        if (_.missing(params.values)) {\n            console.warn('ag-Grid: no values found for select cellEditor');\n            return;\n        }\n\n        params.values.forEach((value: any) => {\n            const option = document.createElement('option');\n            option.value = value;\n\n            const valueFormatted = this.valueFormatterService.formatValue(params.column, null, null, value);\n            const valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;\n            option.text = valueFormattedExits ? valueFormatted : value;\n\n            if (params.value === value) {\n                option.selected = true;\n            }\n            this.eSelect.appendChild(option);\n        });\n\n        // we don't want to add this if full row editing, otherwise selecting will stop the\n        // full row editing.\n        if (!this.gridOptionsWrapper.isFullRowEdit()) {\n            this.addDestroyableEventListener(this.eSelect, 'change', () => params.stopEditing());\n        }\n\n        this.addDestroyableEventListener(this.eSelect, 'keydown', (event: KeyboardEvent) => {\n            const isNavigationKey = event.keyCode === Constants.KEY_UP || event.keyCode === Constants.KEY_DOWN;\n            if (isNavigationKey) {\n                event.stopPropagation();\n            }\n        });\n\n        this.addDestroyableEventListener(this.eSelect, 'mousedown', (event: KeyboardEvent) => {\n            event.stopPropagation();\n        });\n    }\n\n    public afterGuiAttached() {\n        if (this.focusAfterAttached) {\n            this.eSelect.focus();\n        }\n    }\n\n    public focusIn(): void {\n        this.eSelect.focus();\n    }\n\n    public getValue(): any {\n        return this.eSelect.value;\n    }\n\n    public isPopup() {\n        return false;\n    }\n}"]}