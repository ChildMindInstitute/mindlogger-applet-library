{"version":3,"sources":["../../src/ts/rendering/autoHeightCalculator.ts"],"names":[],"mappings":"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","file":"autoHeightCalculator.js","sourcesContent":["import { GridPanel } from \"../gridPanel/gridPanel\";\nimport { Autowired, Bean } from \"../context/context\";\nimport { Beans } from \"./beans\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { CellComp } from \"./cellComp\";\nimport { ColumnController } from \"../columnController/columnController\";\nimport { _ } from \"../utils\";\n\n@Bean('autoHeightCalculator')\nexport class AutoHeightCalculator {\n\n    @Autowired('beans') private beans: Beans;\n    @Autowired(\"$scope\") private $scope: any;\n    @Autowired(\"columnController\") private columnController: ColumnController;\n\n    private gridPanel: GridPanel;\n\n    private eDummyContainer: HTMLElement;\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.gridPanel = gridPanel;\n    }\n\n    public getPreferredHeightForRow(rowNode: RowNode): number {\n        if (!this.eDummyContainer) {\n            this.eDummyContainer = document.createElement('div');\n\n            // so any styles on row also get applied in dummy, otherwise\n            // the content in dummy may differ to the real\n            _.addCssClass(this.eDummyContainer, 'ag-row ag-row-no-focus');\n        }\n\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        const eBodyContainer = this.gridPanel.getCenterContainer();\n        eBodyContainer.appendChild(this.eDummyContainer);\n\n        const cellComps: CellComp[] = [];\n        const autoRowHeightCols = this.columnController.getAllAutoRowHeightCols();\n        const visibleAutoRowHeightCols = autoRowHeightCols.filter(col => col.isVisible());\n\n        visibleAutoRowHeightCols.forEach(col => {\n            const cellComp = new CellComp(\n                this.$scope,\n                this.beans,\n                col,\n                rowNode,\n                null,\n                true,\n                false);\n            cellComp.setParentRow(this.eDummyContainer);\n            cellComps.push(cellComp);\n        });\n\n        const template = cellComps.map(cellComp => cellComp.getCreateTemplate()).join(' ');\n        this.eDummyContainer.innerHTML = template;\n\n        // this gets any cellComps that are using components to put the components in\n        cellComps.forEach(cellComp => cellComp.afterAttached());\n\n        // we should be able to just take the height of the row at this point, however\n        // the row isn't expanding to cover the cell heights, i don't know why, i couldn't\n        // figure it out so instead looking at the individual cells instead\n        let maxCellHeight = 0;\n        for (let i = 0; i < this.eDummyContainer.children.length; i++) {\n            const child = this.eDummyContainer.children[i] as HTMLElement;\n            if (child.offsetHeight > maxCellHeight) {\n                maxCellHeight = child.offsetHeight;\n            }\n        }\n\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(this.eDummyContainer);\n\n        cellComps.forEach(cellComp => {\n            // dunno why we need to detach first, doing it here to be consistent with code in RowComp\n            cellComp.detach();\n            cellComp.destroy();\n        });\n\n        // in case anything left over from last time\n        _.clearElement(this.eDummyContainer);\n\n        return maxCellHeight;\n    }\n}\n"]}