{"version":3,"sources":["../../src/ts/rendering/rowContainerComponent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8CAA8D;AAC9D,4DAA2D;AAC3D,kCAA6B;AAS7B;;;;GAIG;AACH;IA4BI,+BAAY,MAAmC;QAjBvC,eAAU,GAAG,CAAC,CAAC;QAGf,sBAAiB,GAAa,EAAE,CAAC;QACjC,8BAAyB,GAAe,EAAE,CAAC;QAInD,uGAAuG;QACvG,iEAAiE;QACzD,wBAAmB,GAAG,CAAC,CAAC;QAQ5B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,MAAM,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;SACnC;QACD,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC;IACxD,CAAC;IAEM,yDAAyB,GAAhC,UAAiC,sBAA8B;QAC3D,IAAI,CAAC,SAAS,GAAG,sBAAsB,CAAC;IAC5C,CAAC;IAGO,6CAAa,GAArB;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,uCAAkB,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChH,CAAC;IAEO,6CAAa,GAArB;QACI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;IAC/D,CAAC;IAEM,6CAAa,GAApB,UAAqB,MAAc;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,gBAAa,MAAM,QAAI,CAAgB,CAAC;IACjF,CAAC;IAEM,yCAAS,GAAhB,UAAiB,MAAc;QAC3B,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;YAClC,OAAO;SACV;QAED,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,GAAM,MAAM,OAAI,CAAC;QAC7C,IAAI,IAAI,CAAC,QAAQ,EAAE;YACd,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAM,MAAM,OAAI,CAAC;SAC/C;IACL,CAAC;IAEM,iDAAiB,GAAxB;QAEI,uDAAuD;QACvD,kDAAkD;QAClD,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YACrC,IAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClD,SAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YACzC,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;SACrC;QAED,sDAAsD;QACtD,sDAAsD;QACtD,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,EAAE,EAAN,CAAM,CAAC,CAAC;QACvD,IAAI,CAAC,yBAAyB,CAAC,MAAM,GAAG,CAAC,CAAC;QAE1C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAClC,CAAC;IAEM,iDAAiB,GAAxB,UAAyB,WAAmB,EACnB,QAAoB;QAEzC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,iBAAiB,GAAG,SAAC,CAAC,0BAA0B,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC/G;aAAM;YACH,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC5C;QAED,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE9C,8EAA8E;QAC9E,+EAA+E;QAC/E,kFAAkF;QAClF,iFAAiF;QACjF,6DAA6D;QAC7D,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEM,8CAAc,GAArB,UAAsB,IAAiB;QACnC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,SAAC,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAChE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SACjC;IACL,CAAC;IAEM,gDAAgB,GAAvB,UAAwB,IAAiB;QACrC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEO,+CAAe,GAAvB;QACI,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAAE,OAAO;SAAE;QAEzC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;QAC/D,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QAEpC,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;YAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,mBAAmB,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YAEhD,SAAC,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC9B,kEAAkE;YAClE,kEAAkE;YAClE,uEAAuE;YACvE,qEAAqE;YACrE,uEAAuE;YACvE,uEAAuE;YACvE,uEAAuE;YACvE,IAAI,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE;gBAC3B,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;aAC7C;SACJ;IACL,CAAC;IAEM,qDAAqB,GAA5B;QACI,IAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACjC,IAAM,kBAAkB,GAAG,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC1D,OAAO,kBAAkB,GAAG,GAAG,CAAC;IACpC,CAAC;IAjJgC;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;qEAAwC;IAwCxE;QADC,uBAAa;8DAKb;IAsGL,4BAAC;CApJD,AAoJC,IAAA;AApJY,sDAAqB","file":"rowContainerComponent.js","sourcesContent":["import { Autowired, PostConstruct } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { _ } from \"../utils\";\n\nexport interface RowContainerComponentParams {\n    eContainer: HTMLElement;\n    eViewport?: HTMLElement;\n    eWrapper?: HTMLElement;\n    hideWhenNoChildren?: boolean;\n}\n\n/**\n * There are many instances of this component covering each of the areas a row can be entered\n * eg body, pinned left, fullWidth. The component differs from others in that it's given the\n * elements, there is no template. All of the elements are part of the GridPanel.\n */\nexport class RowContainerComponent {\n\n    @Autowired('gridOptionsWrapper') gridOptionsWrapper: GridOptionsWrapper;\n\n    private readonly eContainer: HTMLElement;\n    private readonly eViewport: HTMLElement;\n    private readonly eWrapper: HTMLElement;\n\n    // full width containers only show when no children, because they float above the normal rows,\n    // it adds complexity that can be confusing when inspecting the dom when they are not needed.\n    private readonly hideWhenNoChildren: boolean;\n    private childCount = 0;\n    private visible: boolean;\n\n    private rowTemplatesToAdd: string[] = [];\n    private afterGuiAttachedCallbacks: Function[] = [];\n\n    private scrollTop: number;\n\n    // this is to cater for a 'strange behaviour' where when a panel is made visible, it is firing a scroll\n    // event which we want to ignore. see gridPanel.onAnyBodyScroll()\n    private lastMadeVisibleTime = 0;\n\n    // we ensure the rows are in the dom in the order in which they appear on screen when the\n    // user requests this via gridOptions.ensureDomOrder. this is typically used for screen readers.\n    private domOrder: boolean;\n    private lastPlacedElement: HTMLElement;\n\n    constructor(params: RowContainerComponentParams) {\n        this.eContainer = params.eContainer;\n        this.eViewport = params.eViewport;\n        if (params.eWrapper) {\n            this.eWrapper = params.eWrapper;\n        }\n        this.hideWhenNoChildren = params.hideWhenNoChildren;\n    }\n\n    public setVerticalScrollPosition(verticalScrollPosition: number): void {\n        this.scrollTop = verticalScrollPosition;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.checkDomOrder();\n        this.checkVisibility();\n        this.gridOptionsWrapper.addEventListener(GridOptionsWrapper.PROP_DOM_LAYOUT, this.checkDomOrder.bind(this));\n    }\n\n    private checkDomOrder(): void {\n        this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder();\n    }\n\n    public getRowElement(compId: number): HTMLElement {\n        return this.eContainer.querySelector(`[comp-id=\"${compId}\"]`) as HTMLElement;\n    }\n\n    public setHeight(height: number): void {\n        if (height == null) {\n            this.eContainer.style.height = '';\n            return;\n        }\n\n        this.eContainer.style.height = `${height}px`;\n        if (this.eWrapper) {\n             this.eWrapper.style.height = `${height}px`;\n        }\n    }\n\n    public flushRowTemplates(): void {\n\n        // if doing dom order, then rowTemplates will be empty,\n        // or if no rows added since last time also empty.\n        if (this.rowTemplatesToAdd.length !== 0) {\n            const htmlToAdd = this.rowTemplatesToAdd.join('');\n            _.appendHtml(this.eContainer, htmlToAdd);\n            this.rowTemplatesToAdd.length = 0;\n        }\n\n        // this only empty if no rows since last time, as when\n        // doing dom order, we still have callbacks to process\n        this.afterGuiAttachedCallbacks.forEach(func => func());\n        this.afterGuiAttachedCallbacks.length = 0;\n\n        this.lastPlacedElement = null;\n    }\n\n    public appendRowTemplate(rowTemplate: string,\n                             callback: () => void) {\n\n        if (this.domOrder) {\n            this.lastPlacedElement = _.insertTemplateWithDomOrder(this.eContainer, rowTemplate, this.lastPlacedElement);\n        } else {\n            this.rowTemplatesToAdd.push(rowTemplate);\n        }\n\n        this.afterGuiAttachedCallbacks.push(callback);\n\n        // it is important we put items in in order, so that when we open a row group,\n        // the new rows are inserted after the opened group, but before the rows below.\n        // that way, the rows below are over the new rows (as dom renders last in dom over\n        // items previous in dom), otherwise the child rows would cover the row below and\n        // that meant the user doesn't see the rows below slide away.\n        this.childCount++;\n        this.checkVisibility();\n    }\n\n    public ensureDomOrder(eRow: HTMLElement): void {\n        if (this.domOrder) {\n            _.ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n            this.lastPlacedElement = eRow;\n        }\n    }\n\n    public removeRowElement(eRow: HTMLElement): void {\n        this.eContainer.removeChild(eRow);\n        this.childCount--;\n        this.checkVisibility();\n    }\n\n    private checkVisibility(): void {\n        if (!this.hideWhenNoChildren) { return; }\n\n        const eGui = this.eViewport ? this.eViewport : this.eContainer;\n        const visible = this.childCount > 0;\n\n        if (this.visible !== visible) {\n            this.visible = visible;\n            this.lastMadeVisibleTime = new Date().getTime();\n\n            _.setDisplayed(eGui, visible);\n            // if we are showing the viewport, then the scroll is always zero,\n            // so we need to align with the other sections (ie if this is full\n            // width container, and first time showing a full width row, we need to\n            // scroll it so full width rows are show in right place alongside the\n            // body rows). without this, there was an issue with 'loading rows' for\n            // server side row model, as loading rows are full width, and they were\n            // not getting displayed in the right location when rows were expanded.\n            if (visible && this.eViewport) {\n                this.eViewport.scrollTop = this.scrollTop;\n            }\n        }\n    }\n\n    public isMadeVisibleRecently(): boolean {\n        const now = new Date().getTime();\n        const millisSinceVisible = now - this.lastMadeVisibleTime;\n        return millisSinceVisible < 500;\n    }\n}\n"]}