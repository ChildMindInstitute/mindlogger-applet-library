{"version":3,"sources":["../../src/ts/rendering/autoWidthCalculator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,8CAAqD;AAErD,iFAAgF;AAKhF;IAAA;IAuGA,CAAC;IA/FU,8CAAgB,GAAvB,UAAwB,SAAoB;QACxC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEM,oDAAsB,GAA7B,UAA8B,cAA8B;QACxD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC;IAED,yEAAyE;IACzE,uEAAuE;IACvE,gCAAgC;IAChC,gEAAgE;IACzD,wDAA0B,GAAjC,UAAkC,MAAc,EAAE,UAAoB;QAClE,IAAM,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACxD,qBAAqB;QACrB,IAAI,CAAC,WAAW,EAAE;YAAE,OAAO,CAAC,CAAC,CAAC;SAAE;QAEhC,IAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACvD,yEAAyE;QACzE,eAAe,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC;QAEzC,uEAAuE;QACvE,gDAAgD;QAChD,IAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;QAC3D,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;QAE5C,wEAAwE;QACxE,+EAA+E;QAC/E,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QAE5D,IAAI,CAAC,UAAU,EAAE;YACb,uFAAuF;YACvF,2FAA2F;YAC3F,qFAAqF;YACrF,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;SACzD;QAED,uFAAuF;QACvF,mEAAmE;QACnE,IAAM,mBAAmB,GAAG,eAAe,CAAC,WAAW,CAAC;QAExD,6DAA6D;QAC7D,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;QAE5C,8FAA8F;QAC9F,kFAAkF;QAClF,IAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;QACrE,OAAO,mBAAmB,GAAG,eAAe,CAAC;IACjD,CAAC;IAEO,oDAAsB,GAA9B,UAA+B,MAAc;QAEzC,IAAI,IAAI,GAAc,IAAI,CAAC;QAE3B,gCAAgC;QAChC,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,UAAA,aAAa;YAClD,IAAI,aAAa,YAAY,qCAAiB,EAAE;gBAC5C,IAAM,iBAAiB,GAAG,aAAa,CAAC;gBACxC,IAAI,iBAAiB,CAAC,SAAS,EAAE,KAAK,MAAM,EAAE;oBAC1C,IAAI,GAAG,iBAAiB,CAAC;iBAC5B;aACJ;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACvC,CAAC;IAEO,2DAA6B,GAArC,UAAsC,MAAc,EAAE,eAA4B;QAAlF,iBAGC;QAFG,IAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,IAAK,OAAA,KAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,eAAe,CAAC,EAA/C,CAA+C,CAAC,CAAC;IAC9E,CAAC;IAEO,gDAAkB,GAA1B,UAA2B,KAAkB,EAAE,eAA4B;QACvE,gCAAgC;QAChC,IAAM,UAAU,GAAgB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAgB,CAAC;QACrE,6FAA6F;QAC7F,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;QAC5B,2FAA2F;QAC3F,UAAU,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACrC,UAAU,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;QAC3B,mFAAmF;QACnF,mFAAmF;QACnF,mBAAmB;QACnB,IAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACnD,mFAAmF;QACnF,oBAAoB;QACpB,YAAY,CAAC,KAAK,CAAC,OAAO,GAAG,WAAW,CAAC;QAEzC,wEAAwE;QACxE,sEAAsE;QACtE,wGAAwG;QACxG,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QACrC,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC;IAnGyB;QAAzB,mBAAS,CAAC,aAAa,CAAC;4DAAkC;IAC1B;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;mEAAgD;IAHvE,mBAAmB;QAD/B,cAAI,CAAC,qBAAqB,CAAC;OACf,mBAAmB,CAuG/B;IAAD,0BAAC;CAvGD,AAuGC,IAAA;AAvGY,kDAAmB","file":"autoWidthCalculator.js","sourcesContent":["import { RowRenderer } from \"./rowRenderer\";\nimport { GridPanel } from \"../gridPanel/gridPanel\";\nimport { Column } from \"../entities/column\";\nimport { Autowired, Bean } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { HeaderWrapperComp } from \"../headerRendering/header/headerWrapperComp\";\nimport { Component } from \"../widgets/component\";\nimport { HeaderRootComp } from \"../headerRendering/headerRootComp\";\n\n@Bean('autoWidthCalculator')\nexport class AutoWidthCalculator {\n\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    private gridPanel: GridPanel;\n    private headerRootComp: HeaderRootComp;\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.gridPanel = gridPanel;\n    }\n\n    public registerHeaderRootComp(headerRootComp: HeaderRootComp): void {\n        this.headerRootComp = headerRootComp;\n    }\n\n    // this is the trick: we create a dummy container and clone all the cells\n    // into the dummy, then check the dummy's width. then destroy the dummy\n    // as we don't need it any more.\n    // drawback: only the cells visible on the screen are considered\n    public getPreferredWidthForColumn(column: Column, skipHeader?: boolean): number {\n        const eHeaderCell = this.getHeaderCellForColumn(column);\n        // cell isn't visible\n        if (!eHeaderCell) { return -1; }\n\n        const eDummyContainer = document.createElement('span');\n        // position fixed, so it isn't restricted to the boundaries of the parent\n        eDummyContainer.style.position = 'fixed';\n\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        const eBodyContainer = this.gridPanel.getCenterContainer();\n        eBodyContainer.appendChild(eDummyContainer);\n\n        // get all the cells that are currently displayed (this only brings back\n        // rendered cells, rows not rendered due to row visualisation will not be here)\n        this.putRowCellsIntoDummyContainer(column, eDummyContainer);\n\n        if (!skipHeader) {\n            // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n            // will be enough. if we consider groups, then it gets too complicated for what it's worth,\n            // as the groups can span columns and this class only considers one column at a time.\n            this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);\n        }\n\n        // at this point, all the clones are lined up vertically with natural widths. the dummy\n        // container will have a width wide enough just to fit the largest.\n        const dummyContainerWidth = eDummyContainer.offsetWidth;\n\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(eDummyContainer);\n\n        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n        // user can configure the grid to add a few more pixels after the calculated width\n        const autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();\n        return dummyContainerWidth + autoSizePadding;\n    }\n\n    private getHeaderCellForColumn(column: Column): HTMLElement {\n\n        let comp: Component = null;\n\n        // find the rendered header cell\n        this.headerRootComp.forEachHeaderElement(headerElement => {\n            if (headerElement instanceof HeaderWrapperComp) {\n                const headerWrapperComp = headerElement;\n                if (headerWrapperComp.getColumn() === column) {\n                    comp = headerWrapperComp;\n                }\n            }\n        });\n\n        return comp ? comp.getGui() : null;\n    }\n\n    private putRowCellsIntoDummyContainer(column: Column, eDummyContainer: HTMLElement): void {\n        const eCells = this.rowRenderer.getAllCellsForColumn(column);\n        eCells.forEach(eCell  => this.cloneItemIntoDummy(eCell, eDummyContainer));\n    }\n\n    private cloneItemIntoDummy(eCell: HTMLElement, eDummyContainer: HTMLElement): void {\n        // make a deep clone of the cell\n        const eCellClone: HTMLElement = eCell.cloneNode(true) as HTMLElement;\n        // the original has a fixed width, we remove this to allow the natural width based on content\n        eCellClone.style.width = '';\n        // the original has position = absolute, we need to remove this so it's positioned normally\n        eCellClone.style.position = 'static';\n        eCellClone.style.left = '';\n        // we put the cell into a containing div, as otherwise the cells would just line up\n        // on the same line, standard flow layout, by putting them into divs, they are laid\n        // out one per line\n        const eCloneParent = document.createElement('div');\n        // table-row, so that each cell is on a row. i also tried display='block', but this\n        // didn't work in IE\n        eCloneParent.style.display = 'table-row';\n\n        // the twig on the branch, the branch on the tree, the tree in the hole,\n        // the hole in the bog, the bog in the clone, the clone in the parent,\n        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n        eCloneParent.appendChild(eCellClone);\n        eDummyContainer.appendChild(eCloneParent);\n    }\n\n}\n"]}