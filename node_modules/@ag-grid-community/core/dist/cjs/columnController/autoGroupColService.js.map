{"version":3,"sources":["../../src/ts/columnController/autoGroupColService.ts"],"names":[],"mappings":"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","file":"autoGroupColService.js","sourcesContent":["import { Autowired, Bean, Context } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { ColDef } from \"../entities/colDef\";\nimport { ColumnController } from \"./columnController\";\nimport { ColumnFactory } from \"./columnFactory\";\nimport { Constants } from \"../constants\";\nimport { _ } from \"../utils\";\n\n@Bean('autoGroupColService')\nexport class AutoGroupColService {\n\n    public static GROUP_AUTO_COLUMN_BUNDLE_ID = Constants.GROUP_AUTO_COLUMN_ID;\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('context') private context: Context;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('columnFactory') private columnFactory: ColumnFactory;\n\n    public createAutoGroupColumns(rowGroupColumns: Column[]): Column[] {\n        const groupAutoColumns: Column[] = [];\n\n        const doingTreeData = this.gridOptionsWrapper.isTreeData();\n        let doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n\n        if (doingTreeData && doingMultiAutoColumn) {\n            console.warn('ag-Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');\n            doingMultiAutoColumn = false;\n        }\n\n        // if doing groupMultiAutoColumn, then we call the method multiple times, once\n        // for each column we are grouping by\n        if (doingMultiAutoColumn) {\n            rowGroupColumns.forEach((rowGroupCol: Column, index: number) => {\n                groupAutoColumns.push(this.createOneAutoGroupColumn(rowGroupCol, index));\n            });\n        } else {\n            groupAutoColumns.push(this.createOneAutoGroupColumn());\n        }\n\n        return groupAutoColumns;\n    }\n\n    // rowGroupCol and index are missing if groupMultiAutoColumn=false\n    private createOneAutoGroupColumn(rowGroupCol?: Column, index?: number): Column {\n        // if one provided by user, use it, otherwise create one\n        let defaultAutoColDef: ColDef = this.generateDefaultColDef(rowGroupCol);\n        // if doing multi, set the field\n        let colId: string;\n        if (rowGroupCol) {\n            colId = `${Constants.GROUP_AUTO_COLUMN_ID}-${rowGroupCol.getId()}`;\n        } else {\n            colId = AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID;\n        }\n\n        const userAutoColDef: ColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n        _.mergeDeep(defaultAutoColDef, userAutoColDef);\n\n        defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);\n\n        defaultAutoColDef.colId = colId;\n\n        // For tree data the filter is always allowed\n        if (!this.gridOptionsWrapper.isTreeData()) {\n            // we would only allow filter if the user has provided field or value getter. otherwise the filter\n            // would not be able to work.\n            const noFieldOrValueGetter = _.missing(defaultAutoColDef.field) && _.missing(defaultAutoColDef.valueGetter) && _.missing(defaultAutoColDef.filterValueGetter);\n            if (noFieldOrValueGetter) {\n                defaultAutoColDef.filter = false;\n            }\n        }\n\n        // if showing many cols, we don't want to show more than one with a checkbox for selection\n        if (index && index > 0) {\n            defaultAutoColDef.headerCheckboxSelection = false;\n        }\n\n        const newCol = new Column(defaultAutoColDef, null, colId, true);\n        this.context.wireBean(newCol);\n\n        return newCol;\n    }\n\n    private generateDefaultColDef(rowGroupCol?: Column): ColDef {\n        const userAutoColDef: ColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n        const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        const defaultAutoColDef: ColDef = {\n            headerName: localeTextFunc('group', 'Group')\n        };\n\n        const userHasProvidedGroupCellRenderer =\n            userAutoColDef && (userAutoColDef.cellRenderer || userAutoColDef.cellRendererFramework);\n\n        // only add the default group cell renderer if user hasn't provided one\n        if (!userHasProvidedGroupCellRenderer) {\n            defaultAutoColDef.cellRenderer = 'agGroupCellRenderer';\n        }\n\n        // we never allow moving the group column\n        // defaultAutoColDef.suppressMovable = true;\n\n        if (rowGroupCol) {\n            const rowGroupColDef = rowGroupCol.getColDef();\n            _.assign(defaultAutoColDef, {\n                // cellRendererParams.groupKey: colDefToCopy.field;\n                headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, 'header'),\n                headerValueGetter: rowGroupColDef.headerValueGetter\n            });\n\n            if (rowGroupColDef.cellRenderer) {\n                _.assign(defaultAutoColDef, {\n                    cellRendererParams:{\n                        innerRenderer: rowGroupColDef.cellRenderer,\n                        innerRendererParams: rowGroupColDef.cellRendererParams\n                    }\n                });\n            }\n\n            defaultAutoColDef.showRowGroup = rowGroupCol.getColId();\n        } else {\n            defaultAutoColDef.showRowGroup = true;\n        }\n\n        return defaultAutoColDef;\n    }\n\n}"]}