{"version":3,"sources":["../../src/ts/columnController/columnKeyCreator.ts"],"names":[],"mappings":";;;;;;;;AAAA,wGAAwG;AACxG,kFAAkF;AAClF,6EAA6E;AAC7E,gFAAgF;AAChF,kCAA6B;AAE7B;IAAA;QAEY,iBAAY,GAA6B,EAAE,CAAC;IAwCxD,CAAC;IAtCU,0CAAe,GAAtB,UAAuB,IAAc;QACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;SACrC;IACL,CAAC;IAEM,uCAAY,GAAnB,UAAoB,KAAa,EAAE,QAAgB;QAE/C,6DAA6D;QAC7D,KAAK,GAAG,SAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAEhC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,OAAO,IAAI,EAAE;YAET,IAAI,OAAO,SAAQ,CAAC;YACpB,IAAI,KAAK,EAAE;gBACP,OAAO,GAAG,KAAK,CAAC;gBAChB,IAAI,KAAK,KAAK,CAAC,EAAE;oBACb,OAAO,IAAI,GAAG,GAAG,KAAK,CAAC;iBAC1B;aACJ;iBAAM,IAAI,QAAQ,EAAE;gBACjB,OAAO,GAAG,QAAQ,CAAC;gBACnB,IAAI,KAAK,KAAK,CAAC,EAAE;oBACb,OAAO,IAAI,GAAG,GAAG,KAAK,CAAC;iBAC1B;aACJ;iBAAM;gBACH,OAAO,GAAG,EAAE,GAAG,KAAK,CAAC;aACxB;YAED,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;gBAC7B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;gBAClC,OAAO,OAAO,CAAC;aAClB;YAED,KAAK,EAAE,CAAC;SACX;IACL,CAAC;IAEL,uBAAC;AAAD,CA1CA,AA0CC,IAAA;AA1CY,4CAAgB","file":"columnKeyCreator.js","sourcesContent":["// class returns a unique id to use for the column. it checks the existing columns, and if the requested\n// id is already taken, it will start appending numbers until it gets a unique id.\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\n// if no field or id provided in the col, it will try the ids of natural numbers\nimport { _ } from \"../utils\";\n\nexport class ColumnKeyCreator {\n\n    private existingKeys: {[key: string]: boolean} = {};\n\n    public addExistingKeys(keys: string[]): void {\n        for (let i = 0; i < keys.length; i++) {\n            this.existingKeys[keys[i]] = true;\n        }\n    }\n\n    public getUniqueKey(colId: string, colField: string): string {\n\n        // in case user passed in number for colId, convert to string\n        colId = _.toStringOrNull(colId);\n\n        let count = 0;\n        while (true) {\n\n            let idToTry: string;\n            if (colId) {\n                idToTry = colId;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            } else if (colField) {\n                idToTry = colField;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            } else {\n                idToTry = '' + count;\n            }\n\n            if (!this.existingKeys[idToTry]) {\n                this.existingKeys[idToTry] = true;\n                return idToTry;\n            }\n\n            count++;\n        }\n    }\n\n}"]}