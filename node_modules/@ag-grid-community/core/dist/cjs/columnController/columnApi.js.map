{"version":3,"sources":["../../src/ts/columnController/columnApi.ts"],"names":[],"mappings":"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","file":"columnApi.js","sourcesContent":["import { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { ColumnGroupChild } from \"../entities/columnGroupChild\";\nimport { ColumnController, ColumnState } from \"./columnController\";\nimport { OriginalColumnGroup } from \"../entities/originalColumnGroup\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { Column } from \"../entities/column\";\nimport { Autowired, Bean } from \"../context/context\";\n\n@Bean('columnApi')\nexport class ColumnApi {\n\n    @Autowired('columnController') private columnController: ColumnController;\n\n    public sizeColumnsToFit(gridWidth: any): void {\n        // AG-3403 validate that gridWidth is provided because this method has the same name as\n        // a method on the grid API that takes no arguments, and it's easy to confuse the two\n        if (typeof gridWidth === \"undefined\") {\n            console.error('ag-Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)');\n        }\n        this.columnController.sizeColumnsToFit(gridWidth, 'api');\n    }\n    public setColumnGroupOpened(group: OriginalColumnGroup | string, newValue: boolean): void { this.columnController.setColumnGroupOpened(group, newValue, 'api'); }\n    public getColumnGroup(name: string, instanceId?: number): ColumnGroup { return this.columnController.getColumnGroup(name, instanceId); }\n    public getOriginalColumnGroup(name: string): OriginalColumnGroup { return this.columnController.getOriginalColumnGroup(name); }\n\n    public getDisplayNameForColumn(column: Column, location: string | null): string { return this.columnController.getDisplayNameForColumn(column, location) || ''; }\n    public getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: string): string { return this.columnController.getDisplayNameForColumnGroup(columnGroup, location) || ''; }\n\n    public getColumn(key: any): Column { return this.columnController.getPrimaryColumn(key); }\n    public setColumnState(columnState: ColumnState[]): boolean { return this.columnController.setColumnState(columnState, false, 'api'); }\n    public getColumnState(): ColumnState[] { return this.columnController.getColumnState(); }\n    public resetColumnState(): void { this.columnController.resetColumnState(false, 'api'); }\n    public getColumnGroupState(): {groupId: string, open: boolean}[] {return this.columnController.getColumnGroupState(); }\n    public setColumnGroupState(stateItems: ({groupId: string, open: boolean})[]): void {this.columnController.setColumnGroupState(stateItems, 'api'); }\n    public resetColumnGroupState(): void { this.columnController.resetColumnGroupState('api'); }\n\n    public isPinning(): boolean { return this.columnController.isPinningLeft() || this.columnController.isPinningRight(); }\n    public isPinningLeft(): boolean { return this.columnController.isPinningLeft(); }\n    public isPinningRight(): boolean { return this.columnController.isPinningRight(); }\n    public getDisplayedColAfter(col: Column): Column { return this.columnController.getDisplayedColAfter(col); }\n    public getDisplayedColBefore(col: Column): Column { return this.columnController.getDisplayedColBefore(col); }\n    public setColumnVisible(key: string | Column, visible: boolean): void { this.columnController.setColumnVisible(key, visible, 'api'); }\n    public setColumnsVisible(keys: (string | Column)[], visible: boolean): void { this.columnController.setColumnsVisible(keys, visible, 'api'); }\n    public setColumnPinned(key: string | Column, pinned: string): void { this.columnController.setColumnPinned(key, pinned, 'api'); }\n    public setColumnsPinned(keys: (string | Column)[], pinned: string): void { this.columnController.setColumnsPinned(keys, pinned, 'api'); }\n\n    public getAllColumns(): Column[] { return this.columnController.getAllPrimaryColumns(); }\n    public getAllGridColumns(): Column[] { return this.columnController.getAllGridColumns(); }\n    public getDisplayedLeftColumns(): Column[] { return this.columnController.getDisplayedLeftColumns(); }\n    public getDisplayedCenterColumns(): Column[] { return this.columnController.getDisplayedCenterColumns(); }\n    public getDisplayedRightColumns(): Column[] { return this.columnController.getDisplayedRightColumns(); }\n    public getAllDisplayedColumns(): Column[] { return this.columnController.getAllDisplayedColumns(); }\n    public getAllDisplayedVirtualColumns(): Column[] { return this.columnController.getAllDisplayedVirtualColumns(); }\n\n    public moveColumn(key: string | Column, toIndex: number): void {\n        if (typeof key === 'number') {\n            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name\n            console.warn('ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');\n            this.columnController.moveColumnByIndex(key as number, toIndex, 'api');\n        } else {\n            this.columnController.moveColumn(key, toIndex, 'api');\n        }\n    }\n    public moveColumnByIndex(fromIndex: number, toIndex: number): void { this.columnController.moveColumnByIndex(fromIndex, toIndex, 'api'); }\n    public moveColumns(columnsToMoveKeys: (string | Column)[], toIndex: number) { this.columnController.moveColumns(columnsToMoveKeys, toIndex, 'api'); }\n\n    public moveRowGroupColumn(fromIndex: number, toIndex: number): void { this.columnController.moveRowGroupColumn(fromIndex, toIndex); }\n    public setColumnAggFunc(column: Column, aggFunc: string): void { this.columnController.setColumnAggFunc(column, aggFunc); }\n    public setColumnWidth(key: string | Column, newWidth: number, finished: boolean = true): void { this.columnController.setColumnWidth(key, newWidth, false, finished); }\n    public setPivotMode(pivotMode: boolean): void { this.columnController.setPivotMode(pivotMode); }\n    public isPivotMode(): boolean { return this.columnController.isPivotMode(); }\n    public getSecondaryPivotColumn(pivotKeys: string[], valueColKey: string | Column): Column { return this.columnController.getSecondaryPivotColumn(pivotKeys, valueColKey); }\n\n    public setValueColumns(colKeys: (string | Column)[]): void { this.columnController.setValueColumns(colKeys, 'api'); }\n    public getValueColumns(): Column[] { return this.columnController.getValueColumns(); }\n    public removeValueColumn(colKey: (string | Column)): void { this.columnController.removeValueColumn(colKey, 'api'); }\n    public removeValueColumns(colKeys: (string | Column)[]): void { this.columnController.removeValueColumns(colKeys, 'api'); }\n    public addValueColumn(colKey: (string | Column)): void { this.columnController.addValueColumn(colKey, 'api'); }\n    public addValueColumns(colKeys: (string | Column)[]): void { this.columnController.addValueColumns(colKeys, 'api'); }\n\n    public setRowGroupColumns(colKeys: (string | Column)[]): void { this.columnController.setRowGroupColumns(colKeys, 'api'); }\n    public removeRowGroupColumn(colKey: string | Column): void { this.columnController.removeRowGroupColumn(colKey, 'api'); }\n    public removeRowGroupColumns(colKeys: (string | Column)[]): void { this.columnController.removeRowGroupColumns(colKeys, 'api'); }\n    public addRowGroupColumn(colKey: string | Column): void { this.columnController.addRowGroupColumn(colKey, 'api'); }\n    public addRowGroupColumns(colKeys: (string | Column)[]): void { this.columnController.addRowGroupColumns(colKeys, 'api'); }\n    public getRowGroupColumns(): Column[] { return this.columnController.getRowGroupColumns(); }\n\n    public setPivotColumns(colKeys: (string | Column)[]): void { this.columnController.setPivotColumns(colKeys, 'api'); }\n    public removePivotColumn(colKey: string | Column): void { this.columnController.removePivotColumn(colKey, 'api'); }\n    public removePivotColumns(colKeys: (string | Column)[]): void { this.columnController.removePivotColumns(colKeys, 'api'); }\n    public addPivotColumn(colKey: string | Column): void { this.columnController.addPivotColumn(colKey, 'api'); }\n    public addPivotColumns(colKeys: (string | Column)[]): void { this.columnController.addPivotColumns(colKeys, 'api'); }\n    public getPivotColumns(): Column[] { return this.columnController.getPivotColumns(); }\n\n    public getLeftDisplayedColumnGroups(): ColumnGroupChild[] { return this.columnController.getLeftDisplayedColumnGroups(); }\n    public getCenterDisplayedColumnGroups(): ColumnGroupChild[] { return this.columnController.getCenterDisplayedColumnGroups(); }\n    public getRightDisplayedColumnGroups(): ColumnGroupChild[] { return this.columnController.getRightDisplayedColumnGroups(); }\n    public getAllDisplayedColumnGroups(): ColumnGroupChild[] { return this.columnController.getAllDisplayedColumnGroups(); }\n    public autoSizeColumn(key: string | Column, skipHeader?: boolean): void {return this.columnController.autoSizeColumn(key, skipHeader, 'api'); }\n    public autoSizeColumns(keys: (string | Column)[], skipHeader?: boolean): void {return this.columnController.autoSizeColumns(keys, skipHeader, 'api'); }\n    public autoSizeAllColumns(skipHeader?: boolean): void { this.columnController.autoSizeAllColumns(skipHeader, 'api'); }\n\n    public setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[]): void { this.columnController.setSecondaryColumns(colDefs, 'api'); }\n\n    public getSecondaryColumns(): Column[] { return this.columnController.getSecondaryColumns(); }\n    public getPrimaryColumns(): Column[] { return this.columnController.getAllPrimaryColumns(); }\n\n    // below goes through deprecated items, prints message to user, then calls the new version of the same method\n\n    public columnGroupOpened(group: OriginalColumnGroup | string, newValue: boolean): void {\n        console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');\n        this.setColumnGroupOpened(group, newValue);\n    }\n    public hideColumns(colIds: any, hide: any): void {\n        console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');\n        this.columnController.setColumnsVisible(colIds, !hide, 'api');\n    }\n    public hideColumn(colId: any, hide: any): void {\n        console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');\n        this.columnController.setColumnVisible(colId, !hide, 'api');\n    }\n\n    public setState(columnState: ColumnState[]): boolean {\n        console.error('ag-Grid: setState is deprecated, use setColumnState');\n        return this.setColumnState(columnState);\n    }\n    public getState(): ColumnState[] {\n        console.error('ag-Grid: getState is deprecated, use getColumnState');\n        return this.getColumnState();\n    }\n    public resetState(): void {\n        console.error('ag-Grid: resetState is deprecated, use resetColumnState');\n        this.resetColumnState();\n    }\n\n    public getAggregationColumns(): Column[] {\n        console.error('ag-Grid: getAggregationColumns is deprecated, use getValueColumns');\n        return this.columnController.getValueColumns();\n    }\n\n    public removeAggregationColumn(colKey: (string | Column)): void {\n        console.error('ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn');\n        this.columnController.removeValueColumn(colKey, 'api');\n    }\n\n    public removeAggregationColumns(colKeys: (string | Column)[]): void {\n        console.error('ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns');\n        this.columnController.removeValueColumns(colKeys, 'api');\n    }\n\n    public addAggregationColumn(colKey: (string | Column)): void {\n        console.error('ag-Grid: addAggregationColumn is deprecated, use addValueColumn');\n        this.columnController.addValueColumn(colKey, 'api');\n    }\n\n    public addAggregationColumns(colKeys: (string | Column)[]): void {\n        console.error('ag-Grid: addAggregationColumns is deprecated, use addValueColumns');\n        this.columnController.addValueColumns(colKeys, 'api');\n    }\n\n    public setColumnAggFunction(column: Column, aggFunc: string): void {\n        console.error('ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');\n        this.columnController.setColumnAggFunc(column, aggFunc, 'api');\n    }\n\n    public getDisplayNameForCol(column: any): string {\n        console.error('ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');\n        return this.getDisplayNameForColumn(column, null);\n    }\n}"]}