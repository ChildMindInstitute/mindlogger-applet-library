{"version":3,"sources":["../../src/ts/columnController/groupInstanceIdCreator.ts"],"names":[],"mappings":";;;;;;;;AAAA,kDAAkD;AAClD,0DAA0D;AAC1D,EAAE;AACF,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,kCAAkC;AAClC,kCAAkC;AAClC,sCAAsC;AACtC;IAAA;QAEI,2EAA2E;QACnE,gBAAW,GAAQ,EAAE,CAAC;IAiBlC,CAAC;IAfU,oDAAmB,GAA1B,UAA2B,GAAW;QAClC,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,MAAc,CAAC;QACnB,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAChC,sBAAsB;YACtB,MAAM,GAAG,CAAC,CAAC;SACd;aAAM;YACH,MAAM,GAAG,UAAU,GAAG,CAAC,CAAC;SAC3B;QAED,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;QAE/B,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,6BAAC;AAAD,CApBA,AAoBC,IAAA;AApBY,wDAAsB","file":"groupInstanceIdCreator.js","sourcesContent":["// class returns unique instance id's for columns.\n// eg, the following calls (in this order) will result in:\n//\n// getInstanceIdForKey('country') => 0\n// getInstanceIdForKey('country') => 1\n// getInstanceIdForKey('country') => 2\n// getInstanceIdForKey('country') => 3\n// getInstanceIdForKey('age') => 0\n// getInstanceIdForKey('age') => 1\n// getInstanceIdForKey('country') => 4\nexport class GroupInstanceIdCreator {\n\n    // this map contains keys to numbers, so we remember what the last call was\n    private existingIds: any = {};\n\n    public getInstanceIdForKey(key: string): number {\n        const lastResult = this.existingIds[key];\n        let result: number;\n        if (typeof lastResult !== 'number') {\n            // first time this key\n            result = 0;\n        } else {\n            result = lastResult + 1;\n        }\n\n        this.existingIds[key] = result;\n\n        return result;\n    }\n\n}"]}