{"version":3,"sources":["../../src/ts/utils/promise.ts"],"names":[],"mappings":";;;;;;;;AAEA,IAAY,aAEX;AAFD,WAAY,aAAa;IACrB,+DAAW,CAAA;IAAE,yDAAQ,CAAA;AACzB,CAAC,EAFW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAExB;AAOD;IAuCI,iBAAY,QAAqC;QAtCzC,WAAM,GAAkB,aAAa,CAAC,WAAW,CAAC;QAClD,eAAU,GAAa,IAAI,CAAC;QAC5B,kBAAa,GAA2B,EAAE,CAAC;QAqC/C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/D,CAAC;IApCM,WAAG,GAAV,UAAc,SAAuB;QACjC,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;YACtB,IAAM,cAAc,GAAiB,EAAE,CAAC;YACxC,IAAI,kBAAkB,GAAW,SAAS,CAAC,MAAM,CAAC;YAClD,SAAS,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,KAAK;gBAC5B,MAAM,CAAC,IAAI,CAAC,UAAA,cAAc;oBACtB,kBAAkB,EAAE,CAAC;oBACrB,cAAc,CAAC,KAAK,CAAC,GAAG,cAAc,CAAC;oBACvC,IAAI,kBAAkB,IAAI,CAAC,EAAE;wBACzB,OAAO,CAAC,cAAqB,CAAC,CAAC;qBAClC;gBACL,CAAC,CAAC,CAAC;gBACH,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAE,uCAAuC;YACvE,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,eAAO,GAAd,UAAkB,KAAQ;QACtB,OAAO,IAAI,OAAO,CAAI,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC,CAAC;IACrD,CAAC;IAEM,gBAAQ,GAAf;QACI,IAAI,OAA2B,CAAC;QAChC,IAAM,OAAO,GAAe,IAAI,OAAO,CAAI,UAAC,OAAO;YAC/C,OAAO,GAAG,OAAO,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,OAAO;YACH,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,UAAC,KAAQ;gBACd,OAAO,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC;SACkB,CAAC;IAC5B,CAAC;IAMM,sBAAI,GAAX,UAAY,IAA2B;QACnC,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,WAAW,EAAE;YAC3C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjC;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACzB;IACL,CAAC;IAEM,8BAAY,GAAnB,UAAoB,IAA2B;QAC3C,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,WAAW,EAAE;YAC3C,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gBACjC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACjC;SACJ;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACzB;IACL,CAAC;IAEM,qBAAG,GAAV,UAAc,OAAuB;QAArC,iBAMC;QALG,OAAO,IAAI,OAAO,CAAI,UAAC,OAAO;YAC1B,KAAI,CAAC,IAAI,CAAC,UAAA,QAAQ;gBACd,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,4BAAU,GAAjB,UAAqB,kBAAqB,EAAE,UAAoC;QAC5E,IAAI,IAAI,CAAC,MAAM,IAAI,aAAa,CAAC,WAAW,EAAE;YAC1C,OAAO,kBAAkB,CAAC;SAC7B;QAED,OAAO,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvC,CAAC;IAEO,wBAAM,GAAd,UAAe,KAAQ;QACnB,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,EAAb,CAAa,CAAC,CAAC;IACxD,CAAC;IAEO,0BAAQ,GAAhB,UAAiB,MAAW;QACxB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;IACL,cAAC;AAAD,CAtFA,AAsFC,IAAA;AAtFY,0BAAO","file":"promise.js","sourcesContent":["export type ResolveAndRejectCallback<T> = (resolve: (value: T) => void, reject: (params: any) => void) => void;\n\nexport enum PromiseStatus {\n    IN_PROGRESS, RESOLVED\n}\n\nexport interface ExternalPromise<T> {\n    resolve: (value: T) => void;\n    promise: Promise<T>;\n}\n\nexport class Promise<T> {\n    private status: PromiseStatus = PromiseStatus.IN_PROGRESS;\n    private resolution: T | null = null;\n    private listOfWaiters: ((value: T) => void)[] = [];\n\n    static all<T>(toCombine: Promise<T>[]): Promise<T[]> {\n        return new Promise(resolve => {\n            const combinedValues: (T | null)[] = [];\n            let remainingToResolve: number = toCombine.length;\n            toCombine.forEach((source, index) => {\n                source.then(sourceResolved => {\n                    remainingToResolve--;\n                    combinedValues[index] = sourceResolved;\n                    if (remainingToResolve == 0) {\n                        resolve(combinedValues as any);\n                    }\n                });\n                combinedValues.push(null);  // spl todo: review with Alberto - why?\n            });\n        });\n    }\n\n    static resolve<T>(value: T): Promise<T> {\n        return new Promise<T>(resolve => resolve(value));\n    }\n\n    static external<T>(): ExternalPromise<T> {\n        let capture: (value: T) => void;\n        const promise: Promise<T> = new Promise<T>((resolve) => {\n            capture = resolve;\n        });\n        return {\n            promise: promise,\n            resolve: (value: T): void => {\n                capture(value);\n            }\n        } as ExternalPromise<T>;\n    }\n\n    constructor(callback: ResolveAndRejectCallback<T>) {\n        callback(this.onDone.bind(this), this.onReject.bind(this));\n    }\n\n    public then(func: (result: any) => void) {\n        if (this.status === PromiseStatus.IN_PROGRESS) {\n            this.listOfWaiters.push(func);\n        } else {\n            func(this.resolution);\n        }\n    }\n\n    public firstOneOnly(func: (result: any) => void) {\n        if (this.status === PromiseStatus.IN_PROGRESS) {\n            if (this.listOfWaiters.length === 0) {\n                this.listOfWaiters.push(func);\n            }\n        } else {\n            func(this.resolution);\n        }\n    }\n\n    public map<Z>(adapter: (from: T) => Z): Promise<Z> {\n        return new Promise<Z>((resolve) => {\n            this.then(unmapped => {\n                resolve(adapter(unmapped));\n            });\n        });\n    }\n\n    public resolveNow<Z>(ifNotResolvedValue: Z, ifResolved: (current: T | null) => Z): Z {\n        if (this.status == PromiseStatus.IN_PROGRESS) {\n            return ifNotResolvedValue;\n        }\n\n        return ifResolved(this.resolution);\n    }\n\n    private onDone(value: T): void {\n        this.status = PromiseStatus.RESOLVED;\n        this.resolution = value;\n        this.listOfWaiters.forEach(waiter => waiter(value));\n    }\n\n    private onReject(params: any): void {\n        console.warn('TBI');\n    }\n}"]}