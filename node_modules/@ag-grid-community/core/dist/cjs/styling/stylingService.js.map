{"version":3,"sources":["../../src/ts/styling/stylingService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,8CAAqD;AAIrD;IAAA;IAmDA,CAAC;IAhDU,8CAAqB,GAA5B,UAA6B,MAAc,EAAE,MAAuB,EAAE,iBAA8C,EAAE,oBAAkD;QACpK,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,EAAE,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;QAC/F,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;IACrE,CAAC;IAEM,0CAAiB,GAAxB,UAAyB,UAAuE,EAAE,MAAuB,EAAE,iBAA8C,EAAE,oBAAkD;QACzN,IAAI,OAAO,UAAU,KAAK,QAAQ,IAAI,UAAU,KAAK,IAAI,EAAE;YACvD,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACxC,IAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAM,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;gBACnC,IAAI,YAAY,SAAK,CAAC;gBACtB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;oBAC1B,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;iBAChE;qBAAM,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;oBACnC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC/B;gBACD,IAAI,YAAY,EAAE;oBACd,iBAAiB,CAAC,SAAS,CAAC,CAAC;iBAChC;qBAAM,IAAI,oBAAoB,EAAE;oBAC7B,oBAAoB,CAAC,SAAS,CAAC,CAAC;iBACnC;aACJ;SACJ;IACL,CAAC;IAEM,iDAAwB,GAA/B,UAAgC,MAAc,EAAE,MAAuB,EAAE,iBAA8C;QACnH,IAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QACnC,IAAI,SAAS,EAAE;YACX,IAAI,cAAc,SAAK,CAAC;YAExB,IAAI,OAAO,MAAM,CAAC,SAAS,KAAK,UAAU,EAAE;gBACxC,IAAM,aAAa,GAAG,MAAM,CAAC,SAAwD,CAAC;gBACtF,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;aAC1C;iBAAM;gBACH,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC;aACrC;YAED,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;gBACpC,iBAAiB,CAAC,cAAc,CAAC,CAAC;aACrC;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;gBACtC,cAAc,CAAC,OAAO,CAAC,UAAC,YAAoB;oBACxC,iBAAiB,CAAC,YAAY,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC;aACN;SACJ;IACL,CAAC;IAhD+B;QAA/B,mBAAS,CAAC,mBAAmB,CAAC;6DAA8C;IADpE,cAAc;QAD1B,cAAI,CAAC,gBAAgB,CAAC;OACV,cAAc,CAmD1B;IAAD,qBAAC;CAnDD,AAmDC,IAAA;AAnDY,wCAAc","file":"stylingService.js","sourcesContent":["import { CellClassParams, ColDef } from \"../entities/colDef\";\nimport { Autowired, Bean } from \"../context/context\";\nimport { ExpressionService } from \"../valueService/expressionService\";\n\n@Bean('stylingService')\nexport class StylingService {\n    @Autowired('expressionService') private expressionService: ExpressionService;\n\n    public processAllCellClasses(colDef: ColDef, params: CellClassParams, onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void) {\n        this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);\n        this.processStaticCellClasses(colDef, params, onApplicableClass);\n    }\n\n    public processClassRules(classRules: { [cssClassName: string]: (Function | string) } | undefined, params: CellClassParams, onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void) {\n        if (typeof classRules === 'object' && classRules !== null) {\n            const classNames = Object.keys(classRules);\n            for (let i = 0; i < classNames.length; i++) {\n                const className = classNames[i];\n                const rule = classRules[className];\n                let resultOfRule: any;\n                if (typeof rule === 'string') {\n                    resultOfRule = this.expressionService.evaluate(rule, params);\n                } else if (typeof rule === 'function') {\n                    resultOfRule = rule(params);\n                }\n                if (resultOfRule) {\n                    onApplicableClass(className);\n                } else if (onNotApplicableClass) {\n                    onNotApplicableClass(className);\n                }\n            }\n        }\n    }\n\n    public processStaticCellClasses(colDef: ColDef, params: CellClassParams, onApplicableClass: (className: string) => void) {\n        const cellClass = colDef.cellClass;\n        if (cellClass) {\n            let classOrClasses: any;\n\n            if (typeof colDef.cellClass === 'function') {\n                const cellClassFunc = colDef.cellClass as (cellClassParams: any) => string | string[];\n                classOrClasses = cellClassFunc(params);\n            } else {\n                classOrClasses = colDef.cellClass;\n            }\n\n            if (typeof classOrClasses === 'string') {\n                onApplicableClass(classOrClasses);\n            } else if (Array.isArray(classOrClasses)) {\n                classOrClasses.forEach((cssClassItem: string) => {\n                    onApplicableClass(cssClassItem);\n                });\n            }\n        }\n    }\n\n}"]}