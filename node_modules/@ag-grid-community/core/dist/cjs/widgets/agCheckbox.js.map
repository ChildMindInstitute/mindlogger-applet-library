{"version":3,"sources":["../../src/ts/widgets/agCheckbox.ts"],"names":[],"mappings":"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","file":"agCheckbox.js","sourcesContent":["import { Autowired } from '../context/context';\nimport { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { AgEvent } from '../events';\nimport { AgAbstractInputField } from './agAbstractInputField';\nimport { LabelAlignment } from './agAbstractLabel';\nimport { _ } from '../utils';\n\nexport interface ChangeEvent extends AgEvent {\n    selected: boolean;\n}\n\nexport class AgCheckbox extends AgAbstractInputField<HTMLInputElement, boolean> {\n    protected className = 'ag-checkbox';\n    protected nativeInputClassName = 'ag-native-checkbox';\n    protected displayTag = 'input';\n    protected inputType = 'checkbox';\n    protected labelAlignment: LabelAlignment = 'right';\n    protected iconMap: { selected: string; unselected: string; indeterminate?: string } = {\n        selected: 'checkboxChecked',\n        unselected: 'checkboxUnchecked',\n        indeterminate: 'checkboxIndeterminate'\n    };\n\n    @Autowired('gridOptionsWrapper') protected gridOptionsWrapper: GridOptionsWrapper;\n\n    private selected: boolean | undefined = false;\n    private readOnly = false;\n    private passive = false;\n    protected eIconEl: HTMLElement;\n\n    constructor() {\n        super();\n        this.setTemplate(this.TEMPLATE.replace(/%displayField%/g, this.displayTag));\n    }\n\n    protected postConstruct(): void {\n        super.postConstruct();\n        if (!this.gridOptionsWrapper.useNativeCheckboxes()) {\n            _.addCssClass(this.eInput, 'ag-hidden');\n            this.addIconsPlaceholder();\n            this.updateIcons();\n        } else {\n            _.addCssClass(this.eInput, this.nativeInputClassName);\n        }\n    }\n\n    protected addInputListeners() {\n        if (this.gridOptionsWrapper.useNativeCheckboxes()) {\n            this.addDestroyableEventListener(this.eInput, 'click', this.onCheckboxClick.bind(this));\n        } else {\n            this.addDestroyableEventListener(this.getGui(), 'click', e => this.onClick(e));\n            this.addDestroyableEventListener(this.eInput, 'change', e => this.setValue(e.target.checked, true));\n        }\n    }\n\n    public getNextValue(): boolean {\n        return this.selected === undefined ? true : !this.selected;\n    }\n\n    public setPassive(passive: boolean): void {\n        this.passive = passive;\n    }\n\n    public isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n    public setReadOnly(readOnly: boolean): void {\n        this.eInput.readOnly = readOnly;\n        this.readOnly = readOnly;\n        this.updateIcons();\n    }\n\n    public toggle(): void {\n        const nextValue = this.getNextValue();\n\n        if (this.passive) {\n            this.dispatchChange(nextValue);\n        } else {\n            this.setValue(nextValue);\n        }\n    }\n\n    public getValue(): boolean {\n        return this.isSelected();\n    }\n\n    public setValue(value: boolean | undefined, silent?: boolean): this {\n        this.setSelected(value, silent);\n        return this;\n    }\n\n    protected isSelected(): boolean {\n        return this.selected;\n    }\n\n    protected setSelected(selected?: boolean, silent?: boolean): void {\n        if (this.selected === selected) {\n            return;\n        }\n\n        this.selected = typeof selected === 'boolean' ? selected : undefined;\n        (this.eInput as HTMLInputElement).checked = this.selected;\n        (this.eInput as HTMLInputElement).indeterminate = this.selected === undefined;\n        this.updateIcons();\n\n        if (!silent) {\n            this.dispatchChange(this.selected);\n        }\n    }\n\n    protected getIconName(): string {\n        const value = this.getValue();\n        const prop = value === undefined ? 'indeterminate' : value ? 'selected' : 'unselected';\n        const readOnlyStr = this.isReadOnly() ? 'ReadOnly' : '';\n        return `${this.iconMap[prop]}${readOnlyStr}`;\n    }\n\n    protected updateIcons(): void {\n        if (!this.gridOptionsWrapper.useNativeCheckboxes()) {\n            _.clearElement(this.eIconEl);\n            this.eIconEl.appendChild(_.createIconNoSpan(this.getIconName(), this.gridOptionsWrapper, null));\n        }\n    }\n\n    private dispatchChange(selected: boolean | undefined) {\n        this.dispatchEvent({ type: AgCheckbox.EVENT_CHANGED, selected });\n    }\n\n    private addIconsPlaceholder(): void {\n        const iconDiv = document.createElement('div');\n        this.eWrapper.appendChild(iconDiv);\n        this.eIconEl = iconDiv;\n    }\n\n    private onClick(event: MouseEvent): void {\n        // if we don't set the path, then won't work in Edge, as once the <span> is removed from the dom,\n        // it's not possible to calculate the path by following the parent's chain. in other browser (eg\n        // chrome) there is event.path for this purpose, but missing in Edge.\n        _.addAgGridEventPath(event);\n\n        if (!this.readOnly) {\n            this.toggle();\n        }\n    }\n\n    private onCheckboxClick(e: MouseEvent) {\n        this.selected = (e.target as HTMLInputElement).checked;\n        this.dispatchChange(this.selected);\n    }\n}\n"]}