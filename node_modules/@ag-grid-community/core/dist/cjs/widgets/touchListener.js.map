{"version":3,"sources":["../../src/ts/widgets/touchListener.ts"],"names":[],"mappings":"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","file":"touchListener.js","sourcesContent":["import { EventService } from \"../eventService\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { _ } from \"../utils\";\nimport { AgEvent } from \"../events\";\n\nexport interface TapEvent extends AgEvent {\n    touchStart: Touch;\n}\n\nexport interface LongTapEvent extends AgEvent {\n    touchStart: Touch;\n    touchEvent: TouchEvent;\n}\n\nexport class TouchListener implements IEventEmitter {\n\n    public static EVENT_TAP = \"tap\";\n    public static EVENT_DOUBLE_TAP = \"doubleTap\";\n    public static EVENT_LONG_TAP = \"longTap\";\n\n    private static DOUBLE_TAP_MILLIS = 500;\n\n    private eElement: HTMLElement;\n\n    private destroyFuncs: Function[] = [];\n\n    private moved: boolean;\n\n    private touching = false;\n    private touchStart: Touch;\n\n    private lastTapTime: number | null;\n\n    private eventService: EventService = new EventService();\n\n    // private mostRecentTouch: Touch;\n\n    private preventMouseClick: boolean;\n\n    constructor(eElement: HTMLElement, preventMouseClick = false) {\n        this.eElement = eElement;\n        this.preventMouseClick = preventMouseClick;\n\n        const startListener = this.onTouchStart.bind(this);\n        const moveListener = this.onTouchMove.bind(this);\n        const endListener = this.onTouchEnd.bind(this);\n\n        this.eElement.addEventListener(\"touchstart\", startListener, {passive: true} as any);\n        this.eElement.addEventListener(\"touchmove\", moveListener, {passive: true} as any);\n        // we set passive=false, as we want to prevent default on this event\n        this.eElement.addEventListener(\"touchend\", endListener, {passive: false} as any);\n\n        this.destroyFuncs.push(() => {\n            this.eElement.removeEventListener(\"touchstart\", startListener, {passive: true} as any);\n            this.eElement.removeEventListener(\"touchmove\", moveListener, {passive: true} as any);\n            this.eElement.removeEventListener(\"touchend\", endListener, {passive: false} as any);\n        });\n    }\n\n    private getActiveTouch(touchList: TouchList): Touch | null {\n        for (let i = 0; i < touchList.length; i++) {\n            const matches = touchList[i].identifier === this.touchStart.identifier;\n            if (matches) {\n                return touchList[i];\n            }\n        }\n\n        return null;\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        this.eventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n\n    private onTouchStart(touchEvent: TouchEvent): void {\n        // only looking at one touch point at any time\n        if (this.touching) {\n            return;\n        }\n\n        this.touchStart = touchEvent.touches[0];\n        this.touching = true;\n\n        this.moved = false;\n\n        const touchStartCopy = this.touchStart;\n\n        window.setTimeout(() => {\n            const touchesMatch = this.touchStart === touchStartCopy;\n\n            if (this.touching && touchesMatch && !this.moved) {\n                this.moved = true;\n                const event: LongTapEvent = {\n                    type: TouchListener.EVENT_LONG_TAP,\n                    touchStart: this.touchStart,\n                    touchEvent: touchEvent\n                };\n                this.eventService.dispatchEvent(event);\n            }\n        }, 500);\n    }\n\n    private onTouchMove(touchEvent: TouchEvent): void {\n        if (!this.touching) {\n            return;\n        }\n\n        const touch = this.getActiveTouch(touchEvent.touches);\n        if (!touch) {\n            return;\n        }\n\n        const eventIsFarAway = !_.areEventsNear(touch, this.touchStart, 4);\n        if (eventIsFarAway) {\n            this.moved = true;\n        }\n    }\n\n    private onTouchEnd(touchEvent: TouchEvent): void {\n        if (!this.touching) {\n            return;\n        }\n\n        if (!this.moved) {\n            const event: TapEvent = {\n                type: TouchListener.EVENT_TAP,\n                touchStart: this.touchStart\n            };\n            this.eventService.dispatchEvent(event);\n            this.checkForDoubleTap();\n        }\n\n        // stops the tap from also been processed as a mouse click\n        if (this.preventMouseClick) {\n            touchEvent.preventDefault();\n        }\n\n        this.touching = false;\n    }\n\n    private checkForDoubleTap(): void {\n        const now = new Date().getTime();\n\n        if (this.lastTapTime && this.lastTapTime > 0) {\n            // if previous tap, see if duration is short enough to be considered double tap\n            const interval = now - this.lastTapTime;\n            if (interval > TouchListener.DOUBLE_TAP_MILLIS) {\n                // dispatch double tap event\n                const event: TapEvent = {\n                    type: TouchListener.EVENT_DOUBLE_TAP,\n                    touchStart: this.touchStart\n                };\n                this.eventService.dispatchEvent(event);\n\n                // this stops a tripple tap ending up as two double taps\n                this.lastTapTime = null;\n            } else {\n                this.lastTapTime = now;\n            }\n        } else {\n            this.lastTapTime = now;\n        }\n    }\n\n    public destroy(): void {\n        this.destroyFuncs.forEach(func => func());\n    }\n}"]}