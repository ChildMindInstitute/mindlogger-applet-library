{"version":3,"sources":["../../src/ts/widgets/agPickerField.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+DAAqD;AACrD,8CAA+C;AAE/C,qDAAoD;AACpD,kCAA6B;AAE7B;IAAkD,iCAAkB;IAApE;QAAA,qEAuCC;QAtCa,cAAQ,GACd,kUAMO,CAAC;QAKF,qBAAe,GAAY,KAAK,CAAC;QACjC,wBAAkB,GAAY,KAAK,CAAC;;IAyBlD,CAAC;IAhBa,qCAAa,GAAvB;QAAA,iBAUC;QATG,iBAAM,aAAa,WAAE,CAAC;QAEtB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE;YACpD,KAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC;SAChG;IACL,CAAC;IAEM,qCAAa,GAApB,UAAqB,KAAsB;QACvC,SAAC,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC;IAChB,CAAC;IAtBgC;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;6DAAgD;IAEzD;QAAtB,kCAAW,CAAC,QAAQ,CAAC;iDAA+B;IAC5B;QAAxB,kCAAW,CAAC,UAAU,CAAC;mDAAiC;IAC3B;QAA7B,kCAAW,CAAC,eAAe,CAAC;wDAA4B;IACjC;QAAvB,kCAAW,CAAC,SAAS,CAAC;kDAAoC;IAkB/D,oBAAC;CAvCD,AAuCC,CAvCiD,iCAAe,GAuChE;AAvCqB,sCAAa","file":"agPickerField.js","sourcesContent":["import { RefSelector } from \"./componentAnnotations\";\nimport { Autowired } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { AgAbstractField } from \"./agAbstractField\";\nimport { _ } from \"../utils\";\n\nexport abstract class AgPickerField<T, K> extends AgAbstractField<K> {\n    protected TEMPLATE =\n        `<div class=\"ag-picker-field\">\n            <label ref=\"eLabel\"></label>\n            <div ref=\"eWrapper\" class=\"ag-wrapper\">\n                <%displayField% ref=\"eDisplayField\"></%displayField%>\n                <button ref=\"eButton\" class=\"ag-picker-button\"> </button>\n            </div>\n        </div>`;\n\n    protected abstract showPicker(): void;\n    protected abstract pickerIcon: string;\n    protected value: K;\n    protected displayedPicker: boolean = false;\n    protected isDestroyingPicker: boolean = false;\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    @RefSelector('eLabel') protected eLabel: HTMLElement;\n    @RefSelector('eWrapper') protected eWrapper: HTMLElement;\n    @RefSelector('eDisplayField') protected eDisplayField: T;\n    @RefSelector('eButton') private eButton: HTMLButtonElement;\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        this.addDestroyableEventListener(this.eButton, 'click', () => {\n            this.showPicker();\n        });\n\n        if (this.pickerIcon) {\n            this.eButton.appendChild(_.createIconNoSpan(this.pickerIcon, this.gridOptionsWrapper, null));\n        }\n    }\n\n    public setInputWidth(width: number | 'flex'): this {\n        _.setElementWidth(this.eWrapper, width);\n        return this;\n    }\n}"]}