{"version":3,"sources":["../../src/ts/misc/resizeObserverService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8CAAqD;AAGrD,kCAA6B;AAG7B;IAAA;IA2DA,CAAC;IAtDU,6CAAa,GAApB,UAAqB,OAAoB,EAAE,QAAoB,EAAE,aAA0B;QAA1B,8BAAA,EAAA,kBAA0B;QACvF,gEAAgE;QAChE,IAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QACjD,iEAAiE;QACjE,0EAA0E;QAC1E,IAAM,iBAAiB,GAAG,SAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QAC9D,IAAM,wBAAwB,GAAG;YAC7B,IAAM,cAAc,GAAG,IAAK,MAAc,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAC7E,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAChC,OAAO,cAAM,OAAA,cAAc,CAAC,UAAU,EAAE,EAA3B,CAA2B,CAAC;QAC7C,CAAC,CAAC;QAEF,IAAM,WAAW,GAAG;YAEhB,iFAAiF;YACjF,IAAI,aAAa,GAAG,SAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAC3C,IAAI,cAAc,GAAG,SAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAE7C,4CAA4C;YAC5C,IAAI,OAAO,GAAG,IAAI,CAAC;YAEnB,IAAM,+BAA+B,GAAG;gBACpC,IAAI,OAAO,EAAE;oBAET,IAAM,QAAQ,GAAG,SAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;oBACxC,IAAM,SAAS,GAAG,SAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBAE1C,IAAM,OAAO,GAAG,QAAQ,KAAK,aAAa,IAAI,SAAS,KAAK,cAAc,CAAC;oBAC3E,IAAI,OAAO,EAAE;wBACT,aAAa,GAAG,QAAQ,CAAC;wBACzB,cAAc,GAAG,SAAS,CAAC;wBAC3B,QAAQ,EAAE,CAAC;qBACd;oBAED,gBAAgB,CAAC,UAAU,CAAC,+BAA+B,EAAE,aAAa,CAAC,CAAC;iBAC/E;YACL,CAAC,CAAC;YAEF,+BAA+B,EAAE,CAAC;YAElC,wDAAwD;YACxD,OAAO,cAAM,OAAA,OAAO,GAAG,KAAK,EAAf,CAAe,CAAC;QACjC,CAAC,CAAC;QAEF,IAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,+BAA+B,EAAE,CAAC;QACjF,IAAM,oBAAoB,GAAG,CAAC,CAAE,MAAc,CAAC,cAAc,CAAC;QAE9D,IAAI,oBAAoB,IAAI,CAAC,cAAc,EAAE;YACzC,OAAO,wBAAwB,EAAE,CAAC;SACrC;aAAM;YACH,OAAO,WAAW,EAAE,CAAC;SACxB;IACL,CAAC;IAvDgC;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;qEAAgD;IAC/C;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;qEAAiD;IAHxE,qBAAqB;QADjC,cAAI,CAAC,uBAAuB,CAAC;OACjB,qBAAqB,CA2DjC;IAAD,4BAAC;CA3DD,AA2DC,IAAA;AA3DY,sDAAqB","file":"resizeObserverService.js","sourcesContent":["import { Autowired, Bean } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { IFrameworkOverrides } from \"../interfaces/iFrameworkOverrides\";\nimport { _ } from \"../utils\";\n\n@Bean('resizeObserverService')\nexport class ResizeObserverService {\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('frameworkOverrides') private frameworkOverrides: IFrameworkOverrides;\n\n    public observeResize(element: HTMLElement, callback: () => void, debounceDelay: number = 50): () => void {\n        // put in variable, so available to usePolyfill() function below\n        const frameworkFactory = this.frameworkOverrides;\n        // this gets fired too often and might cause some relayout issues\n        // so we add a debounce to the callback here to avoid the flashing effect.\n        const debouncedCallback = _.debounce(callback, debounceDelay);\n        const useBrowserResizeObserver = () => {\n            const resizeObserver = new (window as any).ResizeObserver(debouncedCallback);\n            resizeObserver.observe(element);\n            return () => resizeObserver.disconnect();\n        };\n\n        const usePolyfill = () => {\n\n            // initialise to the current width and height, so first call will have no changes\n            let widthLastTime = _.offsetWidth(element);\n            let heightLastTime = _.offsetHeight(element);\n\n            // when finished, this gets turned to false.\n            let running = true;\n\n            const periodicallyCheckWidthAndHeight = () => {\n                if (running) {\n\n                    const newWidth = _.offsetWidth(element);\n                    const newHeight = _.offsetHeight(element);\n\n                    const changed = newWidth !== widthLastTime || newHeight !== heightLastTime;\n                    if (changed) {\n                        widthLastTime = newWidth;\n                        heightLastTime = newHeight;\n                        callback();\n                    }\n\n                    frameworkFactory.setTimeout(periodicallyCheckWidthAndHeight, debounceDelay);\n                }\n            };\n\n            periodicallyCheckWidthAndHeight();\n\n            // the callback function we return sets running to false\n            return () => running = false;\n        };\n\n        const suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();\n        const resizeObserverExists = !!(window as any).ResizeObserver;\n\n        if (resizeObserverExists && !suppressResize) {\n            return useBrowserResizeObserver();\n        } else {\n            return usePolyfill();\n        }\n    }\n\n}\n"]}