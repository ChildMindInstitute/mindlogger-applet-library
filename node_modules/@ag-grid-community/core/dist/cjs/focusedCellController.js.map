{"version":3,"sources":["../../src/ts/focusedCellController.ts"],"names":[],"mappings":"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","file":"focusedCellController.js","sourcesContent":["import { Bean, Autowired, PostConstruct } from \"./context/context\";\nimport { EventService } from \"./eventService\";\nimport { Column } from \"./entities/column\";\nimport { CellFocusedEvent, Events } from \"./events\";\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { ColumnApi } from \"./columnController/columnApi\";\nimport { ColumnController } from \"./columnController/columnController\";\nimport { CellPosition } from \"./entities/cellPosition\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { GridApi } from \"./gridApi\";\nimport { CellComp } from \"./rendering/cellComp\";\nimport { _ } from \"./utils\";\n\n@Bean('focusedCellController')\nexport class FocusedCellController {\n\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private focusedCellPosition: CellPosition;\n\n    @PostConstruct\n    private init(): void {\n        this.eventService.addEventListener(Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearFocusedCell.bind(this));\n        this.eventService.addEventListener(Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearFocusedCell.bind(this));\n        this.eventService.addEventListener(Events.EVENT_COLUMN_GROUP_OPENED, this.clearFocusedCell.bind(this));\n        this.eventService.addEventListener(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearFocusedCell.bind(this));\n\n        // we used to remove focus when moving column, am not sure why. so taking this out and see who complains.\n        // we can delete these three lines of code soon.\n        // this.eventService.addEventListener(Events.EVENT_COLUMN_MOVED, this.clearFocusedCell.bind(this));\n        // this.eventService.addEventListener(Events.EVENT_COLUMN_PINNED, this.clearFocusedCell.bind(this));\n        // this.eventService.addEventListener(Events.EVENT_COLUMN_VISIBLE, this.clearFocusedCell.bind(this));\n    }\n\n    public clearFocusedCell(): void {\n        this.focusedCellPosition = null;\n        this.onCellFocused(false);\n    }\n\n    public getFocusedCell(): CellPosition {\n        return this.focusedCellPosition;\n    }\n\n    // we check if the browser is focusing something, and if it is, and\n    // it's the cell we think is focused, then return the cell. so this\n    // methods returns the cell if a) we think it has focus and b) the\n    // browser thinks it has focus. this then returns nothing if we\n    // first focus a cell, then second click outside the grid, as then the\n    // grid cell will still be focused as far as the grid is concerned,\n    // however the browser focus will have moved somewhere else.\n    public getFocusCellToUseAfterRefresh(): CellPosition {\n        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh()) {\n            return null;\n        }\n\n        if (!this.focusedCellPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about\n        const browserFocusedCell = this.getGridCellForDomElement(document.activeElement);\n        if (!browserFocusedCell) {\n            return null;\n        }\n\n        return this.focusedCellPosition;\n    }\n\n    private getGridCellForDomElement(eBrowserCell: Node): CellPosition {\n\n        let ePointer = eBrowserCell;\n        while (ePointer) {\n            const cellComp = this.gridOptionsWrapper.getDomData(ePointer, CellComp.DOM_DATA_KEY_CELL_COMP) as CellComp;\n            if (cellComp) {\n                return cellComp.getCellPosition();\n            }\n            ePointer = ePointer.parentNode;\n        }\n\n        return null;\n    }\n\n    public setFocusedCell(rowIndex: number, colKey: string | Column, floating: string | undefined, forceBrowserFocus = false): void {\n        const column = _.makeNull(this.columnController.getGridColumn(colKey));\n        this.focusedCellPosition = {rowIndex: rowIndex, rowPinned: _.makeNull(floating), column: column};\n        this.onCellFocused(forceBrowserFocus);\n    }\n\n    public isCellFocused(cellPosition: CellPosition): boolean {\n        if (_.missing(this.focusedCellPosition)) { return false; }\n        return this.focusedCellPosition.column === cellPosition.column && this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);\n    }\n\n    public isRowNodeFocused(rowNode: RowNode): boolean {\n        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);\n    }\n\n    public isAnyCellFocused(): boolean {\n        return !!this.focusedCellPosition;\n    }\n\n    public isRowFocused(rowIndex: number, floating: string): boolean {\n        if (_.missing(this.focusedCellPosition)) { return false; }\n        const floatingOrNull = _.makeNull(floating);\n        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === floatingOrNull;\n    }\n\n    private onCellFocused(forceBrowserFocus: boolean): void {\n        const event: CellFocusedEvent = {\n            type: Events.EVENT_CELL_FOCUSED,\n            forceBrowserFocus: forceBrowserFocus,\n            rowIndex: null as number,\n            column: null as Column,\n            floating: null as string,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            rowPinned: null as string\n        };\n\n        if (this.focusedCellPosition) {\n            event.rowIndex = this.focusedCellPosition.rowIndex;\n            event.column = this.focusedCellPosition.column;\n            event.rowPinned = this.focusedCellPosition.rowPinned;\n        }\n\n        this.eventService.dispatchEvent(event);\n    }\n}"]}