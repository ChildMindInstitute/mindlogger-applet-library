{"version":3,"sources":["../../src/ts/interfaces/iDatasource.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iDatasource.js","sourcesContent":["/** Datasource used by both PaginationController and InfiniteRowModel */\nexport interface IDatasource {\n\n    /** If you know up front how many rows are in the dataset, set it here. Otherwise leave blank.*/\n    rowCount?: number; // only used in old server side pagination service, we can remove this, infinite\n                       // scrolling uses the grid property infiniteInitialRowCount\n\n    /** Callback the grid calls that you implement to fetch rows from the server. See below for params.*/\n    getRows(params: IGetRowsParams): void;\n\n    destroy?(): void;\n}\n\n/** Params for the above IDatasource.getRows() */\nexport interface IGetRowsParams {\n\n    /** The first row index to get. */\n    startRow: number;\n\n    /** The first row index to NOT get. */\n    endRow: number;\n\n    /** Callback to call for the result when successful. */\n    successCallback(rowsThisBlock: any[], lastRow?: number): void;\n\n    /** Callback to call when the request fails. */\n    failCallback(): void;\n\n    /** If doing server side sorting, contains the sort model */\n    sortModel: any;\n\n    /** If doing server side filtering, contains the filter model */\n    filterModel: any;\n\n    /** The grid context object */\n    context: any;\n}\n"]}