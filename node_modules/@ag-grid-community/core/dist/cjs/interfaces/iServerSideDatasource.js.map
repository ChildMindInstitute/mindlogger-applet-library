{"version":3,"sources":["../../src/ts/interfaces/iServerSideDatasource.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iServerSideDatasource.js","sourcesContent":["// we pass a VO of the column and not the column itself,\n// so the data is read to be be converted to JSON and thrown\n// over the wire\nimport { RowNode } from \"../entities/rowNode\";\nimport { ColumnVO } from \"./iColumnVO\";\n\nexport interface IServerSideGetRowsRequest {\n    // columns that are currently row grouped\n    startRow: number;\n    // columns that are currently row grouped\n    endRow: number;\n    // columns that are currently row grouped\n    rowGroupCols: ColumnVO[];\n    // columns that have aggregations on them\n    valueCols: ColumnVO[];\n    // columns that have pivot on them\n    pivotCols: ColumnVO[];\n    // defines if pivot mode is on or off\n    pivotMode: boolean;\n    // what groups the user is viewing\n    groupKeys: string[];\n    // if filtering, what the filter model is\n    filterModel: any;\n    // if sorting, what the sort model is\n    sortModel: any;\n}\n\nexport interface IServerSideGetRowsParams {\n\n    // details for the request,\n    request: IServerSideGetRowsRequest;\n\n    // the parent row node. is the RootNode (level -1) if request is top level.\n    // this is NOT part fo the request as it cannot be serialised to JSON (a rowNode has methods)\n    parentNode: RowNode;\n\n    // success callback, pass the rows back the grid asked for\n    successCallback(rowsThisPage: any[], lastRow: number): void;\n\n    // fail callback, tell the grid the call failed so it can adjust it's state\n    failCallback(): void;\n}\n\n// datasource for Server Side Row Model\nexport interface IServerSideDatasource {\n    getRows(params: IServerSideGetRowsParams): void;\n    destroy?(): void;\n}"]}