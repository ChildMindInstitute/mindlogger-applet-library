{"version":3,"sources":["../../src/ts/interfaces/iExcelCreator.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iExcelCreator.js","sourcesContent":["import { ExportParams } from \"./exportParams\";\nimport {XmlElement} from \"./iXmlFactory\";\n\n// Common\nexport interface ExcelWorksheet {\n    name: string;\n    table: ExcelTable;\n}\n\nexport interface ExcelTable {\n    columns: ExcelColumn[];\n    rows: ExcelRow[];\n}\n\nexport interface ExcelColumn {\n    min?: number;\n    max?: number;\n    width?: number;\n    s?: number;\n    hidden?: boolean;\n    bestFit?: boolean;\n}\n\nexport interface ExcelRow {\n    index?: number;\n    collapsed?: boolean;\n    hidden?: boolean;\n    height?: number;\n    outlineLevel?: number;\n    s?: number;\n    cells: ExcelCell[];\n}\n\nexport interface ExcelCell {\n    ref?: string;\n    styleId?: string;\n    data: ExcelData;\n    mergeAcross?: number;\n}\n\nexport interface ExcelData {\n    type: ExcelDataType | ExcelOOXMLDataType;\n    value: string | null;\n}\n\nexport type ExcelDataType = 'String' | \"Number\" | \"Boolean\" | \"DateTime\" | \"Error\";\n\nexport interface ExcelExportParams extends ExportParams<ExcelCell[][]> {\n    sheetName?: string;\n    suppressTextAsCDATA?:boolean;\n    exportMode?: \"xlsx\" | \"xml\";\n    rowHeight?: number;\n    headerRowHeight?: number;\n}\n\nexport interface IExcelCreator {\n    exportDataAsExcel(params?: ExcelExportParams): void;\n    getDataAsExcelXml(params?: ExcelExportParams): string;\n}\n\n// XML\nexport interface ExcelStyle {\n    id: string;\n    name?: string;\n    alignment: ExcelAlignment;\n    borders: ExcelBorders;\n    font: ExcelFont;\n    interior: ExcelInterior;\n    numberFormat: ExcelNumberFormat;\n    protection: ExcelProtection;\n    dataType?: string;\n}\n\nexport interface ExcelProtection {\n    protected: boolean;\n    hideFormula: boolean;\n}\n\nexport interface ExcelNumberFormat {\n    format: string;\n}\n\nexport interface ExcelAlignment {\n    vertical: string;\n    indent: number;\n    horizontal: string;\n    readingOrder: string;\n    rotate: number;\n    shrinkToFit: boolean;\n    verticalText: boolean;\n    wrapText: boolean;\n}\n\nexport interface ExcelBorders {\n    borderBottom: ExcelBorder;\n    borderLeft: ExcelBorder;\n    borderTop: ExcelBorder;\n    borderRight: ExcelBorder;\n}\n\nexport interface ExcelBorder {\n    lineStyle: string;\n    weight: number;\n    color: string;\n}\n\nexport interface ExcelFont {\n    bold: boolean;\n    color: string;\n    fontName: string;\n    italic: boolean;\n    outline: boolean;\n    shadow: boolean;\n    size: number;\n    strikeThrough: boolean;\n    underline: string;\n    verticalAlign: string;\n    charSet: number;\n    family: string;\n}\n\nexport interface ExcelInterior {\n    color: string;\n    pattern: string;\n    patternColor: string;\n}\n\nexport interface ExcelXMLTemplate {\n    getTemplate(styleProperties?: ExcelStyle | ExcelWorksheet | ExcelColumn | ExcelRow | ExcelCell): XmlElement;\n}\n\n// XLSX\nexport interface ExcelContentType {\n    name: 'Default' | 'Override';\n    ContentType: string;\n    Extension?: string;\n    PartName?: string;\n}\n\n/*\n * OOXML Data Types\n * (str): String\n * (s): Shared String\n * (inlineStr): Inline string\n * Note: Inline strings are placed in the `is` element instead of `v`\n * (n) Number\n * (b) Boolean\n * (d) Date\n * (e) Error\n*/\nexport type ExcelOOXMLDataType = 'str' | 's' | 'inlineStr' | 'n' | 'b' | 'd' | 'e' | 'empty';\n\nexport interface ExcelOOXMLTemplate {\n    getTemplate(config?: any, idx?: number): XmlElement;\n    convertType?(type: string): string;\n}\n\nexport interface ExcelRelationship {\n    Id: string;\n    Type: string;\n    Target: string;\n}"]}