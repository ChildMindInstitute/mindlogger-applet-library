{"version":3,"sources":["../../src/ts/interfaces/iRangeController.ts"],"names":[],"mappings":";;;;;;;;AAsCA,IAAY,aAAkC;AAA9C,WAAY,aAAa;IAAG,mDAAK,CAAA;IAAE,2DAAS,CAAA;AAAC,CAAC,EAAlC,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAAqB","file":"iRangeController.js","sourcesContent":["import { Column } from \"../entities/column\";\nimport { CellPosition } from \"../entities/cellPosition\";\nimport { GridPanel } from \"../gridPanel/gridPanel\";\nimport { RowPosition } from \"../entities/rowPosition\";\nimport { CellComp } from \"../rendering/cellComp\";\n\nexport interface IRangeController {\n    isEmpty(): boolean;\n    removeAllCellRanges(): void;\n    getCellRangeCount(cell: CellPosition): number;\n    isCellInAnyRange(cell: CellPosition): boolean;\n    isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean;\n    isLastCellOfRange(cellRange: CellRange, cell: CellPosition): boolean;\n    isContiguousRange(cellRange: CellRange): boolean;\n    isMoreThanOneCell(): boolean;\n    onDragStart(mouseEvent: MouseEvent): void;\n    onDragStop(): void;\n    onDragging(mouseEvent: MouseEvent): void;\n    getCellRanges(): CellRange[];\n    setRangeToCell(cell: CellPosition, appendRange?: boolean): void;\n    setCellRange(params: CellRangeParams): void;\n    addCellRange(params: CellRangeParams): void;\n    extendLatestRangeInDirection(key: number): CellPosition | undefined;\n    extendLatestRangeToCell(cell: CellPosition): void;\n    registerGridComp(gridPanel: GridPanel): void;\n    getRangeStartRow(cellRange: CellRange): RowPosition;\n    getRangeEndRow(cellRange: CellRange): RowPosition;\n    createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange | undefined;\n    setCellRanges(cellRanges: CellRange[]): void;\n}\n\nexport interface ISelectionHandle {\n    getGui(): HTMLElement;\n    destroy(): void;\n    getType(): string;\n    refresh(cellComp: CellComp): void;\n}\n\nexport enum CellRangeType { VALUE, DIMENSION }\n\nexport interface CellRange {\n    id?: string;\n    type?: CellRangeType;\n    startRow?: RowPosition;\n    endRow?: RowPosition;\n    columns: Column[];\n    startColumn: Column;\n}\n\nexport interface CellRangeParams {\n    rowStartIndex?: number;\n    rowStartPinned?: string;\n    rowEndIndex?: number;\n    rowEndPinned?: string;\n    columnStart?: string | Column;\n    columnEnd?: string | Column;\n    columns?: (string | Column)[];\n}\n\n/** @deprecated */\n// instead of this, we now use CellRange\nexport interface RangeSelection {\n    start: CellPosition;\n    end: CellPosition;\n    columns: Column[] | null;\n}\n\n/** @deprecated */\n// instead of this, we now use AddCellRangeParams\nexport interface AddRangeSelectionParams {\n    rowStart: number;\n    floatingStart: string;\n    rowEnd: number;\n    floatingEnd: string;\n    columnStart: string | Column;\n    columnEnd: string | Column;\n}\n"]}