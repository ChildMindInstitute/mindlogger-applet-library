{"version":3,"sources":["../../src/ts/grid.ts"],"names":[],"mappings":"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","file":"grid.js","sourcesContent":["import {GridOptions} from \"./entities/gridOptions\";\nimport {GridOptionsWrapper} from \"./gridOptionsWrapper\";\nimport {SelectionController} from \"./selectionController\";\nimport {ColumnApi} from \"./columnController/columnApi\";\nimport {ColumnController} from \"./columnController/columnController\";\nimport {RowRenderer} from \"./rendering/rowRenderer\";\nimport {HeaderRootComp} from \"./headerRendering/headerRootComp\";\nimport {FilterManager} from \"./filter/filterManager\";\nimport {ValueService} from \"./valueService/valueService\";\nimport {EventService} from \"./eventService\";\nimport {GridPanel} from \"./gridPanel/gridPanel\";\nimport {GridApi} from \"./gridApi\";\nimport {ColumnFactory} from \"./columnController/columnFactory\";\nimport {DisplayedGroupCreator} from \"./columnController/displayedGroupCreator\";\nimport {ExpressionService} from \"./valueService/expressionService\";\nimport {TemplateService} from \"./templateService\";\nimport {PopupService} from \"./widgets/popupService\";\nimport {Logger, LoggerFactory} from \"./logger\";\nimport {ColumnUtils} from \"./columnController/columnUtils\";\nimport {AutoWidthCalculator} from \"./rendering/autoWidthCalculator\";\nimport {HorizontalResizeService} from \"./headerRendering/horizontalResizeService\";\nimport {ComponentMeta, Context, ContextParams} from \"./context/context\";\nimport {GridCore} from \"./gridCore\";\nimport {StandardMenuFactory} from \"./headerRendering/standardMenu\";\nimport {DragAndDropService} from \"./dragAndDrop/dragAndDropService\";\nimport {DragService} from \"./dragAndDrop/dragService\";\nimport {SortController} from \"./sortController\";\nimport {FocusedCellController} from \"./focusedCellController\";\nimport {MouseEventService} from \"./gridPanel/mouseEventService\";\nimport {CellNavigationService} from \"./cellNavigationService\";\nimport {Events, GridReadyEvent} from \"./events\";\nimport {CellRendererFactory} from \"./rendering/cellRendererFactory\";\nimport {ValueFormatterService} from \"./rendering/valueFormatterService\";\nimport {AgCheckbox} from \"./widgets/agCheckbox\";\nimport {AgRadioButton} from \"./widgets/agRadioButton\";\nimport {VanillaFrameworkOverrides} from \"./vanillaFrameworkOverrides\";\nimport {IFrameworkOverrides} from \"./interfaces/iFrameworkOverrides\";\nimport {ScrollVisibleService} from \"./gridPanel/scrollVisibleService\";\nimport {StylingService} from \"./styling/stylingService\";\nimport {ColumnHoverService} from \"./rendering/columnHoverService\";\nimport {ColumnAnimationService} from \"./rendering/columnAnimationService\";\nimport {AutoGroupColService} from \"./columnController/autoGroupColService\";\nimport {PaginationProxy} from \"./pagination/paginationProxy\";\nimport {PaginationAutoPageSizeService} from \"./pagination/paginationAutoPageSizeService\";\nimport {IRowModel} from \"./interfaces/iRowModel\";\nimport {Constants} from \"./constants\";\nimport {ValueCache} from \"./valueService/valueCache\";\nimport {ChangeDetectionService} from \"./valueService/changeDetectionService\";\nimport {AlignedGridsService} from \"./alignedGridsService\";\nimport {UserComponentFactory} from \"./components/framework/userComponentFactory\";\nimport {AgGridRegisteredComponentInput, UserComponentRegistry} from \"./components/framework/userComponentRegistry\";\nimport {AgComponentUtils} from \"./components/framework/agComponentUtils\";\nimport {ComponentMetadataProvider} from \"./components/framework/componentMetadataProvider\";\nimport {Beans} from \"./rendering/beans\";\nimport {Environment} from \"./environment\";\nimport {AnimationFrameService} from \"./misc/animationFrameService\";\nimport {NavigationService} from \"./gridPanel/navigationService\";\nimport {MaxDivHeightScaler} from \"./rendering/maxDivHeightScaler\";\nimport {SelectableService} from \"./rowNodes/selectableService\";\nimport {AutoHeightCalculator} from \"./rendering/autoHeightCalculator\";\nimport {PaginationComp} from \"./pagination/paginationComp\";\nimport {ResizeObserverService} from \"./misc/resizeObserverService\";\nimport {TooltipManager} from \"./widgets/tooltipManager\";\nimport {OverlayWrapperComponent} from \"./rendering/overlays/overlayWrapperComponent\";\nimport {Module} from \"./interfaces/iModule\";\nimport {AgGroupComponent} from \"./widgets/agGroupComponent\";\nimport {AgDialog} from \"./widgets/agDialog\";\nimport {AgPanel} from \"./widgets/agPanel\";\nimport {AgInputTextField} from \"./widgets/agInputTextField\";\nimport {AgInputTextArea} from \"./widgets/agInputTextArea\";\nimport {AgSlider} from \"./widgets/agSlider\";\nimport {_} from \"./utils\";\nimport {AgColorPicker} from \"./widgets/agColorPicker\";\nimport {AgInputNumberField} from \"./widgets/agInputNumberField\";\nimport {AgInputRange} from \"./widgets/agInputRange\";\nimport {AgSelect} from \"./widgets/agSelect\";\nimport {AgAngleSelect} from \"./widgets/agAngleSelect\";\nimport {AgToggleButton} from \"./widgets/agToggleButton\";\nimport {DetailRowCompCache} from \"./rendering/detailRowCompCache\";\nimport {RowPositionUtils} from \"./entities/rowPosition\";\nimport {CellPositionUtils} from \"./entities/cellPosition\";\nimport {PinnedRowModel} from \"./pinnedRowModel/pinnedRowModel\";\nimport {IComponent} from \"./interfaces/iComponent\";\nimport {ModuleRegistry} from \"./modules/moduleRegistry\";\nimport {ModuleNames} from \"./modules/moduleNames\";\nimport {UndoRedoService} from \"./undoRedo/undoRedoService\";\n\nexport interface GridParams {\n    // used by Web Components\n    globalEventListener?: Function;\n\n    // these are used by ng1 only\n    $scope?: any;\n    $compile?: any;\n    quickFilterOnScope?: any;\n\n    // this allows the base frameworks (React, NG2, etc) to provide alternative cellRenderers and cellEditors\n    frameworkOverrides?: IFrameworkOverrides;\n\n    // bean instances to add to the context\n    providedBeanInstances?: { [key: string]: any };\n\n    modules?: Module[];\n}\n\nexport class Grid {\n\n    private context: Context;\n\n    protected logger: Logger;\n\n    private readonly gridOptions: GridOptions;\n\n    constructor(eGridDiv: HTMLElement, gridOptions: GridOptions, params?: GridParams) {\n\n        if (!eGridDiv) {\n            console.error('ag-Grid: no div element provided to the grid');\n            return;\n        }\n        if (!gridOptions) {\n            console.error('ag-Grid: no gridOptions provided to the grid');\n            return;\n        }\n\n        const debug = !!gridOptions.debug;\n\n        this.gridOptions = gridOptions;\n\n        const registeredModules = this.getRegisteredModules(params);\n\n        const beanClasses = this.createBeansList(registeredModules);\n        const agStackComponents = this.createAgStackComponentsList(registeredModules);\n        const providedBeanInstances = this.createProvidedBeans(eGridDiv, params);\n\n        if (!beanClasses) {\n            return;\n        } // happens when no row model found\n\n        const contextParams: ContextParams = {\n            providedBeanInstances: providedBeanInstances,\n            beanClasses: beanClasses,\n            components: agStackComponents,\n            debug: debug\n        };\n\n        this.logger = new Logger('ag-Grid', () => gridOptions.debug);\n        const contextLogger = new Logger('Context', () => contextParams.debug);\n        this.context = new Context(contextParams, contextLogger);\n\n        this.registerModuleUserComponents(registeredModules);\n\n        const gridCore = new GridCore();\n        this.context.wireBean(gridCore);\n\n        this.setColumnsAndData();\n        this.dispatchGridReadyEvent(gridOptions);\n        const isEnterprise = ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);\n        this.logger.log(`initialised successfully, enterprise = ${isEnterprise}`);\n    }\n\n    private getRegisteredModules(params: GridParams): Module[] {\n        const passedViaConstructor: Module[] = params ? params.modules : null;\n        const registered = ModuleRegistry.getRegisteredModules();\n\n        const allModules: Module[] = [];\n        const mapNames: { [name: string]: boolean } = {};\n\n        // adds to list and removes duplicates\n        function addModule(module: Module) {\n            function addIndividualModule(module: Module) {\n                if (!mapNames[module.moduleName]) {\n                    mapNames[module.moduleName] = true;\n                    allModules.push(module);\n                    ModuleRegistry.register(module);\n                }\n            }\n\n            addIndividualModule(module);\n            if (module.dependantModules) {\n                module.dependantModules.forEach(addModule);\n            }\n        }\n\n        if (passedViaConstructor) {\n            passedViaConstructor.forEach(addModule);\n        }\n\n        if (registered) {\n            registered.forEach(addModule);\n        }\n\n        return allModules;\n    }\n\n    private registerModuleUserComponents(registeredModules: Module[]): void {\n        const userComponentRegistry: UserComponentRegistry = this.context.getBean('userComponentRegistry');\n\n        const moduleUserComps: { componentName: string, componentClass: AgGridRegisteredComponentInput<IComponent<any>> }[]\n            = this.extractModuleEntity(registeredModules,\n            (module) => module.userComponents ? module.userComponents : []);\n\n        moduleUserComps.forEach(compMeta => {\n            userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);\n        });\n    }\n\n    private createProvidedBeans(eGridDiv: HTMLElement, params: GridParams): any {\n        let frameworkOverrides = params ? params.frameworkOverrides : null;\n        if (_.missing(frameworkOverrides)) {\n            frameworkOverrides = new VanillaFrameworkOverrides();\n        }\n\n        const seed = {\n            gridOptions: this.gridOptions,\n            eGridDiv: eGridDiv,\n            $scope: params ? params.$scope : null,\n            $compile: params ? params.$compile : null,\n            quickFilterOnScope: params ? params.quickFilterOnScope : null,\n            globalEventListener: params ? params.globalEventListener : null,\n            frameworkOverrides: frameworkOverrides\n        };\n        if (params && params.providedBeanInstances) {\n            _.assign(seed, params.providedBeanInstances);\n        }\n\n        return seed;\n    }\n\n    private createAgStackComponentsList(registeredModules: Module[]): any[] {\n        let components: ComponentMeta[] = [\n            {componentName: 'AgCheckbox', componentClass: AgCheckbox},\n            {componentName: 'AgRadioButton', componentClass: AgRadioButton},\n            {componentName: 'AgToggleButton', componentClass: AgToggleButton},\n            {componentName: 'AgInputTextField', componentClass: AgInputTextField},\n            {componentName: 'AgInputTextArea', componentClass: AgInputTextArea},\n            {componentName: 'AgInputNumberField', componentClass: AgInputNumberField},\n            {componentName: 'AgInputRange', componentClass: AgInputRange},\n            {componentName: 'AgSelect', componentClass: AgSelect},\n            {componentName: 'AgSlider', componentClass: AgSlider},\n            {componentName: 'AgAngleSelect', componentClass: AgAngleSelect},\n            {componentName: 'AgColorPicker', componentClass: AgColorPicker},\n            {componentName: 'AgGridComp', componentClass: GridPanel},\n            {componentName: 'AgHeaderRoot', componentClass: HeaderRootComp},\n            {componentName: 'AgPagination', componentClass: PaginationComp},\n            {componentName: 'AgOverlayWrapper', componentClass: OverlayWrapperComponent},\n            {componentName: 'AgGroupComponent', componentClass: AgGroupComponent},\n            {componentName: 'AgPanel', componentClass: AgPanel},\n            {componentName: 'AgDialog', componentClass: AgDialog}\n        ];\n\n        const moduleAgStackComps = this.extractModuleEntity(registeredModules,\n            (module) => module.agStackComponents ? module.agStackComponents : []);\n\n        components = components.concat(moduleAgStackComps);\n\n        return components;\n    }\n\n    private createBeansList(registeredModules: Module[]): any[] {\n\n        const rowModelClass = this.getRowModelClass(registeredModules);\n        if (!rowModelClass) {\n            return undefined;\n        }\n\n        // beans should only contain SERVICES, it should NEVER contain COMPONENTS\n\n        const beans = [\n            rowModelClass, Beans, RowPositionUtils, CellPositionUtils,\n            PaginationAutoPageSizeService, GridApi, UserComponentRegistry, AgComponentUtils,\n            ComponentMetadataProvider, ResizeObserverService, UserComponentFactory,\n            MaxDivHeightScaler, AutoHeightCalculator, CellRendererFactory, HorizontalResizeService,\n            PinnedRowModel, DragService, DisplayedGroupCreator, EventService, GridOptionsWrapper, PopupService,\n            SelectionController, FilterManager, ColumnController, PaginationProxy, RowRenderer, ExpressionService,\n            ColumnFactory, TemplateService, AlignedGridsService,\n            NavigationService, ValueCache, ValueService, LoggerFactory, ColumnUtils, AutoWidthCalculator,\n            StandardMenuFactory, DragAndDropService, ColumnApi, FocusedCellController, MouseEventService, Environment,\n            CellNavigationService, ValueFormatterService, StylingService, ScrollVisibleService, SortController,\n            ColumnHoverService, ColumnAnimationService, SelectableService, AutoGroupColService,\n            ChangeDetectionService, AnimationFrameService, TooltipManager, DetailRowCompCache, UndoRedoService\n        ];\n\n        const moduleBeans = this.extractModuleEntity(registeredModules, (module) => module.beans ? module.beans : []);\n        beans.push(...moduleBeans);\n\n        // check for duplicates, as different modules could include the same beans that\n        // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community\n        const beansNoDuplicates: any[] = [];\n        beans.forEach(bean => {\n            if (beansNoDuplicates.indexOf(bean) < 0) {\n                beansNoDuplicates.push(bean);\n            }\n        });\n\n        return beansNoDuplicates;\n    }\n\n    private extractModuleEntity(moduleEntities: any[], extractor: (module: any) => any) {\n        return [].concat(...moduleEntities.map(extractor));\n    }\n\n    private setColumnsAndData(): void {\n\n        const gridOptionsWrapper: GridOptionsWrapper = this.context.getBean('gridOptionsWrapper');\n        const columnController: ColumnController = this.context.getBean('columnController');\n        const columnDefs = gridOptionsWrapper.getColumnDefs();\n\n        if (_.exists(columnDefs)) {\n            columnController.setColumnDefs(columnDefs, \"gridInitializing\");\n        }\n\n        const rowModel: IRowModel = this.context.getBean('rowModel');\n        rowModel.start();\n    }\n\n    private dispatchGridReadyEvent(gridOptions: GridOptions): void {\n        const eventService: EventService = this.context.getBean('eventService');\n        const readyEvent: GridReadyEvent = {\n            type: Events.EVENT_GRID_READY,\n            api: gridOptions.api,\n            columnApi: gridOptions.columnApi\n        };\n        eventService.dispatchEvent(readyEvent);\n    }\n\n    private getRowModelClass(registeredModules: Module[]): any {\n        let rowModelType = this.gridOptions.rowModelType;\n\n        //TODO: temporary measure before 'enterprise' is completely removed (similar handling in gridOptionsWrapper is also required)\n        if (rowModelType === 'enterprise') {\n            console.warn(`ag-Grid: enterprise rowModel deprecated. Should now be called server side row model instead.`);\n            rowModelType = Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n        }\n\n        if (rowModelType === 'normal') {\n            console.warn(`ag-Grid: normal rowModel deprecated. Should now be called client side row model instead.`);\n            rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        }\n\n        // default to client side\n        if (!rowModelType) {\n            rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        }\n\n        const rowModelClasses: { [name: string]: { new(): IRowModel } } = {};\n        registeredModules.forEach(module => {\n            _.iterateObject(module.rowModels, (key: string, value: { new(): IRowModel }) => {\n                rowModelClasses[key] = value;\n            });\n        });\n\n        const rowModelClass = rowModelClasses[rowModelType];\n        if (_.exists(rowModelClass)) {\n            return rowModelClass;\n        } else {\n            if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {\n                console.error(`ag-Grid: Row Model \"Infinite\" not found. Please ensure the `\n                    + `InfiniteRowModelModule is loaded using: import '@ag-grid-community/infinite-row-model';`);\n            }\n            console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);\n            if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {\n                console.error(`ag-Grid: Row Model \"Viewport\" not found. For this row model to work you must ` +\n                    `a) be using ag-Grid Enterprise and ` +\n                    `b) ensure ViewportRowModelModule is ` +\n                    `loaded using: import '@ag-grid-enterprise/viewport-row-model;`);\n            }\n            if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {\n                console.error(`ag-Grid: Row Model \"Server Side\" not found. For this row model to work you must ` +\n                    `a) be using ag-Grid Enterprise and ` +\n                    `b) ensure ServerSideRowModelModule is ` +\n                    `loaded using: import '@ag-grid-enterprise/server-server-side-row-model';`);\n            }\n            if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n                console.error(`ag-Grid: Row Model \"Client Side\" not found. Please ensure the `\n                    + `ClientSideRowModelModule is loaded using: import '@ag-grid-community/client-side-row-model';`);\n            }\n            return undefined;\n        }\n    }\n\n    public destroy(): void {\n        this.gridOptions.api.destroy();\n    }\n\n}\n"]}