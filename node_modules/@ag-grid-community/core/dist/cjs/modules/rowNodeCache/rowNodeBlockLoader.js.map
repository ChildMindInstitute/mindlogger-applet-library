{"version":3,"sources":["../../src/ts/modules/rowNodeCache/rowNodeBlockLoader.ts"],"names":[],"mappings":"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","file":"rowNodeBlockLoader.js","sourcesContent":["import { RowNodeBlock } from \"./rowNodeBlock\";\nimport { Logger, LoggerFactory } from \"../../logger\";\nimport { Qualifier } from \"../../context/context\";\nimport { _ } from \"../../utils\";\nimport {IRowNodeBlock} from \"../../interfaces/iRowNodeBlock\";\n\nexport class RowNodeBlockLoader {\n\n    private readonly maxConcurrentRequests: number;\n\n    private readonly checkBlockToLoadDebounce: () => void;\n\n    private activeBlockLoadsCount = 0;\n\n    private blocks: IRowNodeBlock[] = [];\n\n    private logger: Logger;\n\n    private active = true;\n\n    constructor(maxConcurrentRequests: number, blockLoadDebounceMillis: number | undefined) {\n        this.maxConcurrentRequests = maxConcurrentRequests;\n\n        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {\n            this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);\n        }\n    }\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('RowNodeBlockLoader');\n    }\n\n    public addBlock(block: IRowNodeBlock): void {\n        this.blocks.push(block);\n    }\n\n    public removeBlock(block: IRowNodeBlock): void {\n        _.removeFromArray(this.blocks, block);\n    }\n\n    public destroy(): void {\n        this.active = false;\n    }\n\n    public loadComplete(): void {\n        this.activeBlockLoadsCount--;\n    }\n\n    public checkBlockToLoad(): void {\n        if (this.checkBlockToLoadDebounce) {\n            this.checkBlockToLoadDebounce();\n        } else {\n            this.performCheckBlocksToLoad();\n        }\n    }\n\n    private performCheckBlocksToLoad(): void {\n        if (!this.active) { return; }\n\n        this.printCacheStatus();\n\n        if (this.activeBlockLoadsCount >= this.maxConcurrentRequests) {\n            this.logger.log(`checkBlockToLoad: max loads exceeded`);\n            return;\n        }\n\n        let blockToLoad: IRowNodeBlock | null = null;\n        this.blocks.forEach(block => {\n            if (block.getState() === RowNodeBlock.STATE_DIRTY) {\n                blockToLoad = block;\n            }\n        });\n\n        if (blockToLoad) {\n            blockToLoad!.load();\n            this.activeBlockLoadsCount++;\n            this.logger.log(`checkBlockToLoad: loading page ${blockToLoad!.getBlockNumber()}`);\n            this.printCacheStatus();\n        } else {\n            this.logger.log(`checkBlockToLoad: no pages to load`);\n        }\n    }\n\n    public getBlockState(): any {\n        const result: any = {};\n        this.blocks.forEach((block: RowNodeBlock) => {\n            const nodeIdPrefix = block.getNodeIdPrefix();\n            const stateItem = {\n                blockNumber: block.getBlockNumber(),\n                startRow: block.getStartRow(),\n                endRow: block.getEndRow(),\n                pageStatus: block.getState()\n            };\n            if (_.exists(nodeIdPrefix)) {\n                result[nodeIdPrefix + block.getBlockNumber()] = stateItem;\n            } else {\n                result[block.getBlockNumber()] = stateItem;\n            }\n        });\n        return result;\n    }\n\n    private printCacheStatus(): void {\n\n        if (this.logger.isLogging()) {\n            this.logger.log(`printCacheStatus: activePageLoadsCount = ${this.activeBlockLoadsCount},`\n                + ` blocks = ${JSON.stringify(this.getBlockState())}`);\n        }\n    }\n\n    public isLoading(): boolean {\n        return this.activeBlockLoadsCount > 0;\n    }\n}\n"]}