{"version":3,"sources":["../../src/ts/filter/provided/simpleFilter.ts"],"names":[],"mappings":"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","file":"simpleFilter.js","sourcesContent":["import {IDoesFilterPassParams, IFilterOptionDef, ProvidedFilterModel} from \"../../interfaces/iFilter\";\nimport {RefSelector} from \"../../widgets/componentAnnotations\";\nimport {OptionsFactory} from \"./optionsFactory\";\nimport {IProvidedFilterParams, ProvidedFilter} from \"./providedFilter\";\nimport {_} from \"../../utils\";\n\nexport interface ISimpleFilterParams extends IProvidedFilterParams {\n    filterOptions?: (IFilterOptionDef | string) [];\n    defaultOption?: string;\n    suppressAndOrCondition?: boolean;\n}\n\nexport interface ISimpleFilterModel extends ProvidedFilterModel {\n    type: string;\n}\n\nexport interface ICombinedSimpleModel<M extends ISimpleFilterModel> extends ProvidedFilterModel {\n    operator: string;\n    condition1: M;\n    condition2: M;\n}\n\nexport enum ConditionPosition {One, Two}\n\nconst DEFAULT_TRANSLATIONS: {[name: string]: string} = {\n    loadingOoo:'Loading...',\n    empty: 'Choose One',\n    equals:'Equals',\n    notEqual:'Not equal',\n    lessThan:'Less than',\n    greaterThan:'Greater than',\n    inRange:'In range',\n    lessThanOrEqual:'Less than or equals',\n    greaterThanOrEqual:'Greater than or equals',\n    filterOoo:'Filter...',\n    contains:'Contains',\n    notContains:'Not contains',\n    startsWith: 'Starts with',\n    endsWith: 'Ends with',\n    searchOoo: 'Search...',\n    selectAll: 'Select All',\n    applyFilter: 'Apply Filter',\n    clearFilter: 'Clear Filter',\n    andCondition: 'AND',\n    orCondition: 'OR'\n};\n\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values\n */\nexport abstract class SimpleFilter<M extends ISimpleFilterModel> extends ProvidedFilter {\n\n    public static EMPTY = 'empty';\n    public static EQUALS = 'equals';\n    public static NOT_EQUAL = 'notEqual';\n    public static LESS_THAN = 'lessThan';\n    public static LESS_THAN_OR_EQUAL = 'lessThanOrEqual';\n    public static GREATER_THAN = 'greaterThan';\n    public static GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';\n    public static IN_RANGE = 'inRange';\n\n    public static CONTAINS = 'contains';\n    public static NOT_CONTAINS = 'notContains';\n    public static STARTS_WITH = 'startsWith';\n    public static ENDS_WITH = 'endsWith';\n\n    @RefSelector('eOptions1')\n    private eType1: HTMLSelectElement;\n\n    @RefSelector('eOptions2')\n    private eType2: HTMLSelectElement;\n\n    @RefSelector('eJoinOperatorAnd')\n    private eJoinOperatorAnd: HTMLInputElement;\n\n    @RefSelector('eJoinOperatorOr')\n    private eJoinOperatorOr: HTMLInputElement;\n\n    @RefSelector('eCondition2Body')\n    private eCondition2Body: HTMLElement;\n\n    @RefSelector('eJoinOperatorPanel')\n    private eJoinOperatorPanel: HTMLElement;\n\n    private allowTwoConditions: boolean;\n\n    private simpleFilterParams: ISimpleFilterParams;\n\n    protected optionsFactory: OptionsFactory;\n\n    protected abstract getDefaultFilterOptions(): string[];\n\n    // gets called once during initialisation, to build up the html template\n    protected abstract createValueTemplate(position: ConditionPosition): string;\n\n    // returns true in the row passes the said condition\n    protected abstract individualConditionPasses(params: IDoesFilterPassParams, type:ISimpleFilterModel): boolean;\n\n    // returns true if the UI represents a working filter, eg all parts are filled out.\n    // eg if text filter and textfield blank then returns false.\n    protected abstract isConditionUiComplete(position: ConditionPosition): boolean;\n\n    // filter uses this to know if new model is different from previous model, ie if filter has changed\n    protected abstract areSimpleModelsEqual(a: ISimpleFilterModel, b: ISimpleFilterModel): boolean;\n\n    // returns the type selected from the drop down. base classes use this.\n    protected abstract getFilterType(): string;\n\n    // after floating filter changes, this sets the 'value' section. this is implemented by the base class\n    // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.\n    protected abstract setValueFromFloatingFilter(value: string): void;\n\n    // getModel() calls this to create the two conditions. if only one condition,\n    // the result is returned by getModel(), otherwise is called twice and both results\n    // returned in a CombinedFilter object.\n    protected abstract createCondition(position: ConditionPosition): M;\n\n    // puts model values into the UI\n    protected abstract setConditionIntoUi(model: ISimpleFilterModel, position: ConditionPosition): void;\n\n    // returns true if this type requires a 'from' field, eg any filter that requires at least one text value\n    protected showValueFrom(type: string): boolean {\n        return !this.doesFilterHaveHiddenInput(type) && type !== SimpleFilter.EMPTY;\n    }\n\n    // returns true if this type requires a 'to' field, currently only 'range' returns true\n    protected showValueTo(type: string): boolean {\n        return type === SimpleFilter.IN_RANGE;\n    }\n\n    // floating filter calls this when user applies filter from floating filter\n    public onFloatingFilterChanged(type: string, value: any): void {\n        this.setValueFromFloatingFilter(value);\n        this.setTypeFromFloatingFilter(type);\n        this.onUiChanged(true);\n    }\n\n    protected setTypeFromFloatingFilter(type: string): void {\n        this.eType1.value = type;\n        this.eType2.value = null;\n        this.eJoinOperatorAnd.checked = true;\n    }\n\n    public getModelFromUi(): M | ICombinedSimpleModel<M> {\n        if (!this.isConditionUiComplete(ConditionPosition.One)) { return null; }\n\n        if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {\n            const res: ICombinedSimpleModel<M> = {\n                filterType: this.getFilterType(),\n                operator: this.getJoinOperator(),\n                condition1: this.createCondition(ConditionPosition.One),\n                condition2: this.createCondition(ConditionPosition.Two)\n            };\n            return res;\n        } else {\n            const res: M = this.createCondition(ConditionPosition.One);\n            return res;\n        }\n    }\n\n    protected getCondition1Type(): string {\n        return this.eType1.value;\n    }\n\n    protected getCondition2Type(): string {\n        return this.eType2.value;\n    }\n\n    protected getJoinOperator(): string {\n        return this.eJoinOperatorOr.checked ? 'OR' : 'AND';\n    }\n\n    protected areModelsEqual(a: M | ICombinedSimpleModel<M>, b: M | ICombinedSimpleModel<M>): boolean {\n        // both are missing\n        if (!a && !b) { return true; }\n\n        // one is missing, other present\n        if ((!a && b) || (a && !b)) { return false; }\n\n        // one is combined, the other is not\n        const aIsSimple = !(a as any).operator;\n        const bIsSimple = !(b as any).operator;\n        const oneSimpleOneCombined = (!aIsSimple && bIsSimple) || (aIsSimple && !bIsSimple);\n        if (oneSimpleOneCombined) { return false; }\n\n        let res: boolean;\n\n        // otherwise both present, so compare\n        if (aIsSimple) {\n            const aSimple = a as M;\n            const bSimple = b as M;\n\n            res = this.areSimpleModelsEqual(aSimple, bSimple);\n        } else {\n            const aCombined = a as ICombinedSimpleModel<M>;\n            const bCombined = b as ICombinedSimpleModel<M>;\n\n            res = aCombined.operator === bCombined.operator\n                && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1)\n                && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);\n        }\n\n        return res;\n    }\n\n    protected setModelIntoUi(model: ISimpleFilterModel | ICombinedSimpleModel<M>): void {\n\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            const orChecked = combinedModel.operator === 'OR';\n            this.eJoinOperatorAnd.checked = !orChecked;\n            this.eJoinOperatorOr.checked = orChecked;\n\n            this.eType1.value = combinedModel.condition1.type;\n            this.eType2.value = combinedModel.condition2.type;\n\n            this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);\n            this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);\n\n        } else {\n            const simpleModel = model as ISimpleFilterModel;\n\n            this.eJoinOperatorAnd.checked = true;\n            this.eJoinOperatorOr.checked = false;\n\n            this.eType1.value = simpleModel.type;\n            this.eType2.value = this.optionsFactory.getDefaultOption();\n\n            this.setConditionIntoUi(simpleModel as M, ConditionPosition.One);\n            this.setConditionIntoUi(null, ConditionPosition.Two);\n        }\n\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        const model = this.getModel();\n\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            const firstResult = this.individualConditionPasses(params, combinedModel.condition1);\n            const secondResult = this.individualConditionPasses(params, combinedModel.condition2);\n\n            if (combinedModel.operator === 'AND') {\n                return firstResult && secondResult;\n            } else {\n                return firstResult || secondResult;\n            }\n\n        } else {\n            const simpleModel = model as ISimpleFilterModel;\n            const result = this.individualConditionPasses(params, simpleModel);\n            return result;\n        }\n    }\n\n    protected setParams(params: ISimpleFilterParams): void {\n        super.setParams(params);\n\n        this.simpleFilterParams = params;\n\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params, this.getDefaultFilterOptions());\n\n        this.allowTwoConditions = !params.suppressAndOrCondition;\n\n        this.putOptionsIntoDropdown();\n        this.addChangedListeners();\n    }\n\n    private putOptionsIntoDropdown(): void {\n        const filterOptions = this.optionsFactory.getFilterOptions();\n\n        filterOptions.forEach(option => {\n            const createOption = () => {\n                const key = (typeof option === 'string') ? option : option.displayKey;\n                const localName = this.translate(key);\n\n                const eOption = document.createElement(`option`);\n                eOption.text = localName;\n                eOption.value = key;\n\n                return eOption;\n            };\n            this.eType1.add(createOption());\n            this.eType2.add(createOption());\n        });\n\n        const readOnly = filterOptions.length <= 1;\n        this.eType1.disabled = readOnly;\n        this.eType2.disabled = readOnly;\n    }\n\n    public isAllowTwoConditions(): boolean {\n        return this.allowTwoConditions;\n    }\n\n    protected createBodyTemplate(): string {\n        const optionsTemplate1 = `<select class=\"ag-filter-select\" ref=\"eOptions1\"></select>`;\n        const valueTemplate1 = this.createValueTemplate(ConditionPosition.One);\n\n        const optionsTemplate2 = `<select class=\"ag-filter-select\" ref=\"eOptions2\"></select>`;\n        const valueTemplate2 = this.createValueTemplate(ConditionPosition.Two);\n\n        const uniqueGroupId = 'ag-simple-filter-and-or-' + this.getCompId();\n\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        const andOrTemplate =\n            `<div class=\"ag-filter-condition\" ref=\"eJoinOperatorPanel\">\n                    <label>\n                        <input ref=\"eJoinOperatorAnd\" type=\"radio\" class=\"and\" name=\"${uniqueGroupId}\" value=\"AND\")} checked=\"checked\" />\n                        ${translate('andCondition', 'AND')}\n                    </label>\n                    <label>\n                        <input ref=\"eJoinOperatorOr\" type=\"radio\" class=\"or\" name=\"${uniqueGroupId}\" value=\"OR\" />\n                        ${translate('orCondition', 'OR')}\n                    </label>\n                </div>`;\n\n        const template =\n               `${optionsTemplate1}\n                ${valueTemplate1}\n                ${andOrTemplate}\n                ${optionsTemplate2}\n                ${valueTemplate2}`;\n\n        return template;\n    }\n\n    protected updateUiVisibility(): void {\n        const firstConditionComplete = this.isConditionUiComplete(ConditionPosition.One);\n        const showSecondFilter = this.allowTwoConditions && firstConditionComplete;\n        _.setDisplayed(this.eCondition2Body, showSecondFilter);\n        _.setDisplayed(this.eType2, showSecondFilter);\n        _.setDisplayed(this.eJoinOperatorPanel, showSecondFilter);\n    }\n\n    protected resetUiToDefaults(): void {\n        this.eJoinOperatorAnd.checked = true;\n\n        const defaultOption = this.optionsFactory.getDefaultOption();\n        this.eType1.value = defaultOption;\n        this.eType2.value = defaultOption;\n    }\n\n    public translate(toTranslate: string): string {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        let defaultTranslation = DEFAULT_TRANSLATIONS[toTranslate];\n\n        if (!defaultTranslation && this.optionsFactory.getCustomOption(toTranslate)) {\n            defaultTranslation = this.optionsFactory.getCustomOption(toTranslate).displayName;\n        }\n\n        return translate(toTranslate, defaultTranslation);\n    }\n\n    public addChangedListeners() {\n        const listener = () => this.onUiChanged();\n        this.addDestroyableEventListener(this.eType1, \"change\", listener);\n        this.addDestroyableEventListener(this.eType2, \"change\", listener);\n        this.addDestroyableEventListener(this.eJoinOperatorOr, \"change\", listener);\n        this.addDestroyableEventListener(this.eJoinOperatorAnd, \"change\", listener);\n    }\n\n    protected doesFilterHaveHiddenInput(filterType: string) {\n        const customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        return customFilterOption && customFilterOption.hideFilterInput;\n    }\n\n}\n"]}