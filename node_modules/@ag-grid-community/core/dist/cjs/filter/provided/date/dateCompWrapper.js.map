{"version":3,"sources":["../../src/ts/filter/provided/date/dateCompWrapper.ts"],"names":[],"mappings":";;;;;;;;AAMA;+FAC+F;AAC/F;IAQI,yBAAY,oBAA0C,EAAE,mBAAgC,EAAE,OAAoB;QAA9G,iBAwBC;QA1BO,UAAK,GAAG,IAAI,CAAC;QAIjB,oBAAoB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAE,UAAA,QAAQ;YAErE,0EAA0E;YAC1E,IAAI,CAAC,KAAI,CAAC,KAAK,EAAE;gBACb,IAAI,QAAQ,CAAC,OAAO,EAAE;oBAClB,QAAQ,CAAC,OAAO,EAAE,CAAC;iBACtB;gBACD,OAAO;aACV;YAED,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;YAEvC,IAAI,QAAQ,CAAC,gBAAgB,EAAE;gBAC3B,QAAQ,CAAC,gBAAgB,EAAE,CAAC;aAC/B;YAED,IAAI,KAAI,CAAC,SAAS,EAAE;gBAChB,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;aACpC;QACL,CAAC,CAAC,CAAC;IAEP,CAAC;IAEM,iCAAO,GAAd;QACI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;YACxC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;SAC3B;IACL,CAAC;IAEM,iCAAO,GAAd;QACI,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;SAClC;aAAM;YACH,OAAO,IAAI,CAAC,SAAS,CAAC;SACzB;IACL,CAAC;IAEM,iCAAO,GAAd,UAAe,KAAW;QACtB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAChC;aAAM;YACH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SAC1B;IACL,CAAC;IAEL,sBAAC;AAAD,CAzDA,AAyDC,IAAA;AAzDY,0CAAe","file":"dateCompWrapper.js","sourcesContent":["// removes the complexity of async component creation from the date panel. while the component does not\n// exist, the wrapper keeps the value that was set and returns this value when queried. when the component\n// is finally created, it gets the temp value if set.\nimport { IDateComp, IDateParams } from \"../../../rendering/dateComponent\";\nimport { UserComponentFactory } from \"../../../components/framework/userComponentFactory\";\n\n/** Provides sync access to async component. Date component can be lazy created - this class encapsulates\n * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */\nexport class DateCompWrapper {\n\n    private dateComp: IDateComp;\n\n    private tempValue: Date;\n\n    private alive = true;\n\n    constructor(userComponentFactory: UserComponentFactory, dateComponentParams: IDateParams, eParent: HTMLElement) {\n\n        userComponentFactory.newDateComponent(dateComponentParams).then (dateComp => {\n\n            // because async, check the filter still exists after component comes back\n            if (!this.alive) {\n                if (dateComp.destroy) {\n                    dateComp.destroy();\n                }\n                return;\n            }\n\n            this.dateComp = dateComp;\n            eParent.appendChild(dateComp.getGui());\n\n            if (dateComp.afterGuiAttached) {\n                dateComp.afterGuiAttached();\n            }\n\n            if (this.tempValue) {\n                dateComp.setDate(this.tempValue);\n            }\n        });\n\n    }\n\n    public destroy(): void {\n        this.alive = false;\n        if (this.dateComp && this.dateComp.destroy) {\n            this.dateComp.destroy();\n        }\n    }\n\n    public getDate(): Date {\n        if (this.dateComp) {\n            return this.dateComp.getDate();\n        } else {\n            return this.tempValue;\n        }\n    }\n\n    public setDate(value: Date): void {\n        if (this.dateComp) {\n            this.dateComp.setDate(value);\n        } else {\n            this.tempValue = value;\n        }\n    }\n\n}\n"]}