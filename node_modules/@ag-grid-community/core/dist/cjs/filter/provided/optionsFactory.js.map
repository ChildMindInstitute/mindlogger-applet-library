{"version":3,"sources":["../../src/ts/filter/provided/optionsFactory.ts"],"names":[],"mappings":";;;;;;;;AAIA,0EAA0E;AAC1E;IAAA;QAEc,wBAAmB,GAAuC,EAAE,CAAC;IA8D3E,CAAC;IAxDU,6BAAI,GAAX,UAAY,MAA2B,EAAE,cAAwB;QAC7D,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,cAAc,CAAC;QAClF,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAEM,yCAAgB,GAAvB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEO,yCAAgB,GAAxB;QAAA,iBAoBC;QAnBG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YAAE,OAAO;SAAE;QAEpC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,YAAY;YACnC,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;gBAAE,OAAO;aAAE;YACjD,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;gBAC1B,OAAO,CAAC,IAAI,CAAC,wEAAwE,CAAC,CAAC;gBACvF,OAAO;aACV;YACD,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;gBAC3B,OAAO,CAAC,IAAI,CAAC,yEAAyE,CAAC,CAAC;gBACxF,OAAO;aACV;YACD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE;gBACpB,OAAO,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAC;gBACjF,OAAO;aACV;YAED,KAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;QACrE,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,0CAAiB,GAAzB,UAA0B,MAA2B;QACjD,IAAI,MAAM,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;SAC7C;aAAM,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,EAAE;YACvC,IAAM,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;gBACvC,IAAI,CAAC,aAAa,GAAG,iBAAiB,CAAC;aAC1C;iBAAM,IAAI,iBAAiB,CAAC,UAAU,EAAE;gBACrC,IAAI,CAAC,aAAa,GAAG,iBAAiB,CAAC,UAAU,CAAC;aACrD;iBAAM;gBACH,OAAO,CAAC,IAAI,CAAC,gFAAgF,CAAC,CAAC;aAClG;SACJ;aAAM;YACH,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;SACzD;IACL,CAAC;IAEM,yCAAgB,GAAvB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEM,wCAAe,GAAtB,UAAuB,IAAY;QAC/B,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IACL,qBAAC;AAAD,CAhEA,AAgEC,IAAA;AAhEY,wCAAc","file":"optionsFactory.js","sourcesContent":["import { IFilterOptionDef, IFilterParams } from \"../../interfaces/iFilter\";\nimport { IScalarFilterParams } from \"./scalerFilter\";\nimport { ISimpleFilterParams } from \"./simpleFilter\";\n\n/* Common logic for options, used by both filters and floating filters. */\nexport class OptionsFactory {\n\n    protected customFilterOptions: {[name: string]: IFilterOptionDef} = {};\n\n    protected filterOptions: (IFilterOptionDef | string) [];\n\n    protected defaultOption: string;\n\n    public init(params: IScalarFilterParams, defaultOptions: string[]): void {\n        this.filterOptions = params.filterOptions ? params.filterOptions : defaultOptions;\n        this.mapCustomOptions();\n        this.selectDefaultItem(params);\n    }\n\n    public getFilterOptions(): (IFilterOptionDef | string) [] {\n        return this.filterOptions;\n    }\n\n    private mapCustomOptions(): void {\n        if (!this.filterOptions) { return; }\n\n        this.filterOptions.forEach(filterOption => {\n            if (typeof filterOption === 'string') { return; }\n            if (!filterOption.displayKey) {\n                console.warn(\"ag-Grid: ignoring FilterOptionDef as it doesn't contain a 'displayKey'\");\n                return;\n            }\n            if (!filterOption.displayName) {\n                console.warn(\"ag-Grid: ignoring FilterOptionDef as it doesn't contain a 'displayName'\");\n                return;\n            }\n            if (!filterOption.test) {\n                console.warn(\"ag-Grid: ignoring FilterOptionDef as it doesn't contain a 'test'\");\n                return;\n            }\n\n            this.customFilterOptions[filterOption.displayKey] = filterOption;\n        });\n    }\n\n    private selectDefaultItem(params: ISimpleFilterParams): void {\n        if (params.defaultOption) {\n            this.defaultOption = params.defaultOption;\n        } else if (this.filterOptions.length >= 1) {\n            const firstFilterOption = this.filterOptions[0];\n            if (typeof firstFilterOption === 'string') {\n                this.defaultOption = firstFilterOption;\n            } else if (firstFilterOption.displayKey) {\n                this.defaultOption = firstFilterOption.displayKey;\n            } else {\n                console.warn(`ag-Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'`);\n            }\n        } else {\n            console.warn('ag-Grid: no filter options for filter');\n        }\n    }\n\n    public getDefaultOption(): string {\n        return this.defaultOption;\n    }\n\n    public getCustomOption(name: string): IFilterOptionDef {\n        return this.customFilterOptions[name];\n    }\n}\n"]}