{"version":3,"sources":["../../src/ts/filter/provided/number/numberFloatingFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiE;AACjE,gDAA+C;AAC/C,2FAA0F;AAE1F;IAA0C,wCAAuB;IAAjE;;IAsBA,CAAC;IApBa,sDAAuB,GAAjC;QACI,OAAO,2BAAY,CAAC,sBAAsB,CAAC;IAC/C,CAAC;IAES,gDAAiB,GAA3B,UAA4B,SAA4B;QAEpD,IAAM,OAAO,GAAG,SAAS,CAAC,IAAI,IAAI,2BAAY,CAAC,QAAQ,CAAC;QAExD,IAAI,OAAO,EAAE;YACT,OAAU,SAAS,CAAC,MAAM,SAAI,SAAS,CAAC,QAAU,CAAC;SACtD;aAAM;YACH,+CAA+C;YAC/C,IAAI,SAAS,CAAC,MAAM,IAAI,IAAI,EAAE;gBAC1B,OAAO,KAAG,SAAS,CAAC,MAAQ,CAAC;aAChC;iBAAM;gBACH,OAAO,KAAG,SAAS,CAAC,IAAM,CAAC;aAC9B;SACJ;IACL,CAAC;IAEL,2BAAC;AAAD,CAtBA,AAsBC,CAtByC,iDAAuB,GAsBhE;AAtBY,oDAAoB","file":"numberFloatingFilter.js","sourcesContent":["import { NumberFilter, NumberFilterModel } from \"./numberFilter\";\nimport { SimpleFilter } from \"../simpleFilter\";\nimport { TextInputFloatingFilter } from \"../../floating/provided/textInputFloatingFilter\";\n\nexport class NumberFloatingFilter extends TextInputFloatingFilter {\n\n    protected getDefaultFilterOptions(): string[] {\n        return NumberFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected conditionToString(condition: NumberFilterModel): string {\n\n        const isRange = condition.type == SimpleFilter.IN_RANGE;\n\n        if (isRange) {\n            return `${condition.filter}-${condition.filterTo}`;\n        } else {\n            // cater for when the type doesn't need a value\n            if (condition.filter != null) {\n                return `${condition.filter}`;\n            } else {\n                return `${condition.type}`;\n            }\n        }\n    }\n\n}\n"]}