{"version":3,"sources":["../../src/ts/filter/provided/providedFilter.ts"],"names":[],"mappings":"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","file":"providedFilter.js","sourcesContent":["import { Component } from \"../../widgets/component\";\nimport { ProvidedFilterModel, IDoesFilterPassParams, IFilterComp, IFilterParams } from \"../../interfaces/iFilter\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { _ } from \"../../utils\";\nimport { IRowModel } from \"../../interfaces/iRowModel\";\nimport { Constants } from \"../../constants\";\n\nexport interface IProvidedFilterParams extends IFilterParams {\n    clearButton?: boolean;\n    resetButton?: boolean;\n    applyButton?: boolean;\n    newRowsAction?: string;\n    debounceMs?: number;\n}\n\n/**\n * Contains common logic to all provided filters (apply button, clear button, etc).\n * All the filters that come with ag-Grid extend this class. User filters do not\n * extend this class.\n */\nexport abstract class ProvidedFilter extends Component implements IFilterComp {\n\n    private static NEW_ROWS_ACTION_KEEP = 'keep';\n    private static NEW_ROWS_ACTION_CLEAR = 'clear';\n\n    private newRowsActionKeep: boolean;\n\n    // each level in the hierarchy will save params with the appropriate type for that level.\n    private providedFilterParams: IProvidedFilterParams;\n\n    private applyActive: boolean;\n\n    @RefSelector('eButtonsPanel')\n    private eButtonsPanel: HTMLElement;\n\n    @RefSelector('eFilterBodyWrapper')\n    protected eFilterBodyWrapper: HTMLElement;\n\n    @RefSelector('eClearButton')\n    private eClearButton: HTMLElement;\n\n    @RefSelector('eResetButton')\n    private eResetButton: HTMLElement;\n\n    @RefSelector('eApplyButton')\n    private eApplyButton: HTMLElement;\n\n    @Autowired('gridOptionsWrapper')\n    protected gridOptionsWrapper: GridOptionsWrapper;\n\n    @Autowired('rowModel')\n    protected rowModel: IRowModel;\n\n    // part of IFilter interface, hence public\n    public abstract doesFilterPass(params: IDoesFilterPassParams): boolean;\n\n    protected abstract updateUiVisibility(): void;\n\n    protected abstract createBodyTemplate(): string;\n    protected abstract resetUiToDefaults(): void;\n\n    protected abstract setModelIntoUi(model: ProvidedFilterModel): void;\n    protected abstract areModelsEqual(a: ProvidedFilterModel, b: ProvidedFilterModel): boolean;\n\n    public abstract getModelFromUi(): ProvidedFilterModel | null;\n\n    // after the user hits 'apply' the model gets copied to here. this is then the model that we use for\n    // all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.\n    // this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is\n    // inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter\n    // (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter\n    // not active) then this appliedModel will be null/undefined.\n    private appliedModel: ProvidedFilterModel;\n\n    // a debounce of the onBtApply method\n    private onBtApplyDebounce: () => void;\n\n    /** @deprecated */\n    public onFilterChanged(): void {\n        console.warn(`ag-Grid: you should not call onFilterChanged() directly on the filter, please call\n        gridApi.onFilterChanged() instead. onFilterChanged is not part of the exposed filter interface (it was\n        a method that existed on an old version of the filters that was not intended for public use.`);\n        this.providedFilterParams.filterChangedCallback();\n    }\n\n    public isFilterActive(): boolean {\n        // filter is active if we have a valid applied model\n        return !!this.appliedModel;\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        const templateString = this.createTemplate();\n        this.setTemplate(templateString);\n    }\n\n    public init(params: IFilterParams): void {\n        this.setParams(params);\n        this.resetUiToDefaults();\n        this.updateUiVisibility();\n        this.setupOnBtApplyDebounce();\n    }\n\n    protected setParams(params: IProvidedFilterParams): void {\n        this.providedFilterParams = params;\n\n\n        this.applyActive = ProvidedFilter.isUseApplyButton(params);\n\n        if (params.newRowsAction === ProvidedFilter.NEW_ROWS_ACTION_KEEP) {\n            this.newRowsActionKeep = true;\n        } else if (params.newRowsAction === ProvidedFilter.NEW_ROWS_ACTION_CLEAR) {\n            this.newRowsActionKeep = false;\n        } else {\n            // the default for SSRM and IRM is 'keep', for CSRM and VRM teh default is 'clear'\n            const rowModelType = this.rowModel.getType();\n            const modelsForKeep = [Constants.ROW_MODEL_TYPE_SERVER_SIDE, Constants.ROW_MODEL_TYPE_INFINITE];\n            this.newRowsActionKeep = modelsForKeep.indexOf(rowModelType) >= 0;\n        }\n\n        _.setDisplayed(this.eApplyButton, this.applyActive);\n        // we do not bind onBtApply here because onBtApply() has a parameter, and it is not the event. if we\n        // just applied, the event would get passed as the second parameter, which we do not want.\n        this.addDestroyableEventListener(this.eApplyButton, \"click\", () => this.onBtApply());\n\n        const clearActive = params.clearButton === true;\n        _.setDisplayed(this.eClearButton, clearActive);\n        this.addDestroyableEventListener(this.eClearButton, \"click\", () => this.onBtClear());\n\n        const resetActive = params.resetButton === true;\n        _.setDisplayed(this.eResetButton, resetActive);\n        this.addDestroyableEventListener(this.eResetButton, \"click\", () => this.onBtReset());\n\n        const anyButtonVisible: boolean = this.applyActive || clearActive || resetActive;\n        _.setDisplayed(this.eButtonsPanel, anyButtonVisible);\n    }\n\n    // subclasses can override this to provide alternative debounce defaults\n    protected getDefaultDebounceMs(): number {\n        return 0;\n    }\n\n    private setupOnBtApplyDebounce(): void {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());\n        this.onBtApplyDebounce = _.debounce(this.onBtApply.bind(this), debounceMs);\n    }\n\n    public getModel(): ProvidedFilterModel {\n        return this.appliedModel;\n    }\n\n    public setModel(model: ProvidedFilterModel): void {\n        if (model) {\n            this.setModelIntoUi(model);\n        } else {\n            this.resetUiToDefaults();\n        }\n        this.updateUiVisibility();\n\n        // we set the model from the gui, rather than the provided model,\n        // so the model is consistent. eg handling of null/undefined will be the same,\n        // of if model is case insensitive, then casing is removed.\n        this.applyModel();\n    }\n\n    private onBtClear() {\n        this.resetUiToDefaults();\n        this.updateUiVisibility();\n        this.onUiChanged();\n    }\n\n    private onBtReset() {\n        this.onBtClear();\n        this.onBtApply();\n    }\n\n    // returns true if the new model is different to the old model\n    public applyModel(): boolean {\n        const oldAppliedModel = this.appliedModel;\n        this.appliedModel = this.getModelFromUi();\n\n        // models can be same if user pasted same content into text field, or maybe just changed the case\n        // and it's a case insensitive filter\n        const newModelDifferent = !this.areModelsEqual(this.appliedModel, oldAppliedModel);\n        return newModelDifferent;\n    }\n\n    private onBtApply(afterFloatingFilter = false) {\n        const newModelDifferent = this.applyModel();\n        if (newModelDifferent) {\n            // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change\n            // came from floating filter\n            this.providedFilterParams.filterChangedCallback({afterFloatingFilter: afterFloatingFilter});\n        }\n    }\n\n    public onNewRowsLoaded() {\n        if (!this.newRowsActionKeep) {\n            this.resetUiToDefaults();\n            this.appliedModel = null;\n        }\n    }\n\n    // called by set filter\n    protected isNewRowsActionKeep(): boolean {\n        return this.newRowsActionKeep;\n    }\n\n    protected onUiChanged(afterFloatingFilter = false): void {\n        this.updateUiVisibility();\n        this.providedFilterParams.filterModifiedCallback();\n\n        // applyNow=true for floating filter changes, we always act on these immediately\n        if (afterFloatingFilter) {\n            this.onBtApply(true);\n        // otherwise if no apply button, we apply (but debounce for time delay)\n        } else if (!this.applyActive) {\n            this.onBtApplyDebounce();\n        }\n    }\n\n    private createTemplate(): string {\n\n        const body = this.createBodyTemplate();\n\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        return `<div>\n                    <div class='ag-filter-body-wrapper' ref=\"eFilterBodyWrapper\">${body}</div>\n                    <div class=\"ag-filter-apply-panel\" ref=\"eButtonsPanel\">\n                        <button type=\"button\" ref=\"eClearButton\">${translate('clearFilter', 'Clear Filter')}</button>\n                        <button type=\"button\" ref=\"eResetButton\">${translate('resetFilter', 'Reset Filter')}</button>\n                        <button type=\"button\" ref=\"eApplyButton\">${translate('applyFilter', 'Apply Filter')}</button>\n                    </div>\n                </div>`;\n    }\n\n    // static, as used by floating filter also\n    public static getDebounceMs(params: IProvidedFilterParams, debounceDefault: number): number {\n        const applyActive = ProvidedFilter.isUseApplyButton(params);\n        if (applyActive) {\n            if (params.debounceMs != null) {\n                console.warn('ag-Grid: debounceMs is ignored when applyButton = true');\n            }\n            return 0;\n        }\n        return params.debounceMs != null ? params.debounceMs : debounceDefault;\n    }\n\n    // static, as used by floating filter also\n    public static isUseApplyButton(params: IProvidedFilterParams): boolean {\n        if ((params as any).apply && !params.applyButton) {\n            console.warn('ag-Grid: as of ag-Grid v21, filterParams.apply is now filterParams.applyButton, please change to applyButton');\n            params.applyButton = true;\n        }\n\n        return params.applyButton === true;\n    }\n}\n"]}