{"version":3,"sources":["../../src/ts/filter/provided/scalerFilter.ts"],"names":[],"mappings":"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","file":"scalerFilter.js","sourcesContent":["import { SimpleFilter, ISimpleFilterParams, ISimpleFilterModel } from \"./simpleFilter\";\nimport { IDoesFilterPassParams } from \"../../interfaces/iFilter\";\n\n/** @deprecated in v21*/\nexport interface NullComparator {\n    equals?: boolean;\n    lessThan?: boolean;\n    greaterThan?: boolean;\n}\n\nexport interface IScalarFilterParams extends ISimpleFilterParams {\n    inRangeInclusive?: boolean;\n    includeBlanksInEquals?: boolean;\n    includeBlanksInLessThan?: boolean;\n    includeBlanksInGreaterThan?: boolean;\n\n    /** @deprecated in v21*/\n    nullComparator?: NullComparator;\n}\n\nexport interface Comparator<T> {\n    (left: T, right: T): number;\n}\n\nexport abstract class ScalerFilter<M extends ISimpleFilterModel, T> extends SimpleFilter<M> {\n\n    static readonly DEFAULT_NULL_COMPARATOR: NullComparator = {\n        equals: false,\n        lessThan: false,\n        greaterThan: false\n    };\n\n    private scalarFilterParams: IScalarFilterParams;\n\n    protected abstract comparator(): Comparator<T>;\n\n    // because the date and number filter models have different attribute names, we have to map\n    protected abstract mapRangeFromModel(filterModel: ISimpleFilterModel): {from: T, to: T};\n\n    protected setParams(params: IScalarFilterParams): void {\n        super.setParams(params);\n        this.scalarFilterParams = params;\n        this.checkDeprecatedParams();\n    }\n\n    private checkDeprecatedParams(): void {\n        if (this.scalarFilterParams.nullComparator) {\n            console.warn('ag-Grid: Since v21.0, the property filterParams.nullComparator is deprecated. ' +\n                'Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and ' +\n                'filterParams.includeBlanksInGreaterThan instead.');\n            this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;\n            this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;\n            this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;\n        }\n    }\n\n    private nullComparator(selectedOption: string, filterValue: T, gridValue: T): number {\n        if (gridValue == null) {\n            const nullValue = this.canNullsPassFilter(selectedOption);\n\n            if (selectedOption === ScalerFilter.EMPTY) {\n                return 0;\n            }\n\n            if (selectedOption === ScalerFilter.EQUALS) {\n                return nullValue ? 0 : 1;\n            }\n\n            if (selectedOption === ScalerFilter.GREATER_THAN) {\n                return nullValue ? 1 : -1;\n            }\n\n            if (selectedOption === ScalerFilter.GREATER_THAN_OR_EQUAL) {\n                return nullValue ? 1 : -1;\n            }\n\n            if (selectedOption === ScalerFilter.LESS_THAN_OR_EQUAL) {\n                return nullValue ? -1 : 1;\n            }\n\n            if (selectedOption === ScalerFilter.LESS_THAN) {\n                return nullValue ? -1 : 1;\n            }\n\n            if (selectedOption === ScalerFilter.NOT_EQUAL) {\n                return nullValue ? 1 : 0;\n            }\n        }\n\n        const actualComparator: Comparator<T> = this.comparator();\n        return actualComparator(filterValue, gridValue);\n    }\n\n    private canNullsPassFilter(type: string): boolean {\n        switch (type) {\n            case SimpleFilter.GREATER_THAN:\n            case SimpleFilter.GREATER_THAN_OR_EQUAL:\n                return this.scalarFilterParams.includeBlanksInGreaterThan;\n\n            case SimpleFilter.LESS_THAN:\n            case SimpleFilter.LESS_THAN_OR_EQUAL:\n                return this.scalarFilterParams.includeBlanksInLessThan;\n\n            case SimpleFilter.EQUALS:\n                return this.scalarFilterParams.includeBlanksInEquals;\n        }\n    }\n\n    protected individualConditionPasses(params: IDoesFilterPassParams, filterModel: ISimpleFilterModel) {\n\n        const cellValue: any = this.scalarFilterParams.valueGetter(params.node);\n\n        const range = this.mapRangeFromModel(filterModel);\n\n        const filterValue = range.from;\n        const filterValueTo = range.to;\n        const filterType = filterModel.type;\n\n        const customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        if (customFilterOption) {\n            // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n            if (filterValue != null || customFilterOption.hideFilterInput) {\n                return customFilterOption.test(filterValue, cellValue);\n            }\n        }\n\n        // why this? looks like logic that should be in parent class????\n        // if (filterValue == null) {\n        //     return type === FilterConditionType.MAIN ? true : this.conditionValue === 'AND';\n        // }\n\n        const compareResult = this.nullComparator(filterType, filterValue, cellValue);\n\n        if (filterType === ScalerFilter.EQUALS) {\n            return compareResult === 0;\n        }\n\n        if (filterType === ScalerFilter.GREATER_THAN) {\n            return compareResult > 0;\n        }\n\n        if (filterType === ScalerFilter.GREATER_THAN_OR_EQUAL) {\n            return compareResult >= 0;\n        }\n\n        if (filterType === ScalerFilter.LESS_THAN_OR_EQUAL) {\n            return compareResult <= 0;\n        }\n\n        if (filterType === ScalerFilter.LESS_THAN) {\n            return compareResult < 0;\n        }\n\n        if (filterType === ScalerFilter.NOT_EQUAL) {\n            return compareResult != 0;\n        }\n\n        // From now on the type is a range and rawFilterValues must be an array!\n        const compareToResult = this.nullComparator(filterType, filterValueTo, cellValue);\n        if (filterType === ScalerFilter.IN_RANGE) {\n            if (!this.scalarFilterParams.inRangeInclusive) {\n                return compareResult > 0 && compareToResult < 0;\n            } else {\n                return compareResult >= 0 && compareToResult <= 0;\n            }\n        }\n\n        throw new Error('Unexpected type of filter: ' + filterType);\n    }\n}"]}