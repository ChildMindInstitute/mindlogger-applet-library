{"version":3,"sources":["../../src/ts/filter/provided/text/textFloatingFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,2CAA2D;AAC3D,2FAA0F;AAE1F;IAAwC,sCAAuB;IAA/D;;IAgBA,CAAC;IAda,8CAAiB,GAA3B,UAA4B,SAA0B;QAClD,+EAA+E;QAC/E,oDAAoD;QACpD,IAAI,SAAS,CAAC,MAAM,IAAI,IAAI,EAAE;YAC1B,OAAO,KAAG,SAAS,CAAC,MAAQ,CAAC;SAChC;aAAM;YACH,OAAO,KAAG,SAAS,CAAC,IAAM,CAAC;SAC9B;IACL,CAAC;IAES,oDAAuB,GAAjC;QACI,OAAO,uBAAU,CAAC,sBAAsB,CAAC;IAC7C,CAAC;IAEL,yBAAC;AAAD,CAhBA,AAgBC,CAhBuC,iDAAuB,GAgB9D;AAhBY,gDAAkB","file":"textFloatingFilter.js","sourcesContent":["import { TextFilter, TextFilterModel } from \"./textFilter\";\nimport { TextInputFloatingFilter } from \"../../floating/provided/textInputFloatingFilter\";\n\nexport class TextFloatingFilter extends TextInputFloatingFilter {\n\n    protected conditionToString(condition: TextFilterModel): string {\n        // it's not possible to have 'in range' for string, so no need to check for it.\n        // also cater for when the type doesn't need a value\n        if (condition.filter != null) {\n            return `${condition.filter}`;\n        } else {\n            return `${condition.type}`;\n        }\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n}\n"]}