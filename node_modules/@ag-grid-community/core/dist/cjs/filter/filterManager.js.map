{"version":3,"sources":["../../src/ts/filter/filterManager.ts"],"names":[],"mappings":"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","file":"filterManager.js","sourcesContent":["import {_, ExternalPromise, Promise} from \"../utils\";\nimport {GridOptionsWrapper} from \"../gridOptionsWrapper\";\nimport {PopupService} from \"../widgets/popupService\";\nimport {ValueService} from \"../valueService/valueService\";\nimport {ColumnController} from \"../columnController/columnController\";\nimport {ColumnApi} from \"../columnController/columnApi\";\nimport {RowNode} from \"../entities/rowNode\";\nimport {Column} from \"../entities/column\";\nimport {Autowired, Bean, Context, PostConstruct, PreDestroy} from \"../context/context\";\nimport {IRowModel} from \"../interfaces/iRowModel\";\nimport {EventService} from \"../eventService\";\nimport {ColumnEventType, Events, FilterChangedEvent, FilterModifiedEvent, FilterOpenedEvent} from \"../events\";\nimport {IDoesFilterPassParams, IFilterComp, IFilterParams} from \"../interfaces/iFilter\";\nimport {ColDef, GetQuickFilterTextParams} from \"../entities/colDef\";\nimport {GridApi} from \"../gridApi\";\nimport {UserComponentFactory} from \"../components/framework/userComponentFactory\";\nimport {GridCore} from \"../gridCore\";\nimport {ModuleNames} from \"../modules/moduleNames\";\nimport {ModuleRegistry} from \"../modules/moduleRegistry\";\n\nexport type FilterRequestSource = 'COLUMN_MENU' | 'TOOLBAR' | 'NO_UI';\n\n@Bean('filterManager')\nexport class FilterManager {\n\n    @Autowired('$compile') private $compile: any;\n    @Autowired('$scope') private $scope: any;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('popupService') private popupService: PopupService;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('context') private context: Context;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    public static QUICK_FILTER_SEPARATOR = '\\n';\n\n    private allFilters: {[p: string]: FilterWrapper} = {};\n    private quickFilter: string = null;\n    private quickFilterParts: string[] = null;\n\n    private advancedFilterPresent: boolean;\n    private externalFilterPresent: boolean;\n\n    private gridCore: GridCore;\n\n    // this is true when the grid is processing the filter change. this is used by the cell comps, so that they\n    // don't flash when data changes due to filter changes. there is no need to flash when filter changes as the\n    // user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where\n    // this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)\n    // 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.\n    private processingFilterChange = false;\n    private allowShowChangeAfterFilter: boolean;\n\n    public registerGridCore(gridCore: GridCore): void {\n        this.gridCore = gridCore;\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.eventService.addEventListener(Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));\n        this.eventService.addEventListener(Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));\n\n        this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());\n        this.setQuickFilterParts();\n\n        this.allowShowChangeAfterFilter = this.gridOptionsWrapper.isAllowShowChangeAfterFilter();\n\n        // check this here, in case there is a filter from the start\n        this.checkExternalFilter();\n    }\n\n    private setQuickFilterParts(): void {\n        if (this.quickFilter) {\n             this.quickFilterParts = this.quickFilter.split(' ');\n        } else {\n            this.quickFilterParts = null;\n        }\n    }\n\n    public setFilterModel(model: any) {\n        const allPromises: Promise<IFilterComp> [] = [];\n        if (model) {\n            // mark the filters as we set them, so any active filters left over we stop\n            const modelKeys = Object.keys(model);\n            _.iterateObject(this.allFilters, (colId: string, filterWrapper: FilterWrapper) => {\n                _.removeFromArray(modelKeys, colId);\n                const newModel = model[colId];\n                this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel);\n                allPromises.push(filterWrapper.filterPromise);\n            });\n            // at this point, processedFields contains data for which we don't have a filter working yet\n            modelKeys.forEach(colId => {\n                const column = this.columnController.getPrimaryColumn(colId);\n                if (!column) {\n                    console.warn('Warning ag-grid setFilterModel - no column found for colId ' + colId);\n                    return;\n                }\n                const filterWrapper = this.getOrCreateFilterWrapper(column, 'NO_UI');\n                this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]);\n                allPromises.push(filterWrapper.filterPromise);\n            });\n        } else {\n            _.iterateObject(this.allFilters, (key, filterWrapper: FilterWrapper) => {\n                this.setModelOnFilterWrapper(filterWrapper.filterPromise, null);\n                allPromises.push(filterWrapper.filterPromise);\n            });\n        }\n        Promise.all(allPromises).then(whatever => {\n            this.onFilterChanged();\n        });\n    }\n\n    private setModelOnFilterWrapper(filterPromise: Promise<IFilterComp>, newModel: any) {\n        filterPromise.then(filter => {\n            if (typeof filter.setModel !== 'function') {\n                console.warn('Warning ag-grid - filter missing setModel method, which is needed for setFilterModel');\n                return;\n            }\n            filter.setModel(newModel);\n        });\n    }\n\n    public getFilterModel(): any {\n        const result = {} as any;\n        _.iterateObject(this.allFilters, function(key: any, filterWrapper: FilterWrapper) {\n            // because user can provide filters, we provide useful error checking and messages\n            const filterPromise: Promise<IFilterComp> = filterWrapper.filterPromise;\n            const filter = filterPromise.resolveNow(null, filter => filter);\n            if (filter == null) { return null; }\n\n            if (typeof filter.getModel !== 'function') {\n                console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');\n                return;\n            }\n            const model = filter.getModel();\n            if (_.exists(model)) {\n                result[key] = model;\n            }\n        });\n        return result;\n    }\n\n    // returns true if any advanced filter (ie not quick filter) active\n    public isAdvancedFilterPresent() {\n        return this.advancedFilterPresent;\n    }\n\n    // called by:\n    // 1) onFilterChanged()\n    // 2) onNewRowsLoaded()\n    private setAdvancedFilterPresent() {\n        let atLeastOneActive = false;\n\n        _.iterateObject(this.allFilters, function(key, filterWrapper: FilterWrapper) {\n            if (filterWrapper.filterPromise.resolveNow(false, filter => filter.isFilterActive())) {\n                atLeastOneActive = true;\n            }\n        });\n\n        this.advancedFilterPresent = atLeastOneActive;\n    }\n\n    private updateFilterFlagInColumns(source: ColumnEventType, additionalEventAttributes?: any): void {\n        _.iterateObject(this.allFilters, function(key, filterWrapper: FilterWrapper) {\n            const filterActive = filterWrapper.filterPromise.resolveNow(false, filter => filter.isFilterActive());\n            filterWrapper.column.setFilterActive(filterActive, source, additionalEventAttributes);\n        });\n    }\n\n    // returns true if quickFilter or advancedFilter\n    public isAnyFilterPresent(): boolean {\n        return this.isQuickFilterPresent() || this.advancedFilterPresent || this.externalFilterPresent;\n    }\n\n    private doesFilterPass(node: RowNode, filterToSkip?: any) {\n        const data = node.data;\n        const colKeys = Object.keys(this.allFilters);\n        for (let i = 0, l = colKeys.length; i < l; i++) { // critical code, don't use functional programming\n            const colId = colKeys[i];\n            const filterWrapper: FilterWrapper = this.allFilters[colId];\n\n            // if no filter, always pass\n            if (filterWrapper === undefined) {\n                continue;\n            }\n\n            const filter: IFilterComp = filterWrapper.filterPromise.resolveNow(undefined, filter => filter);\n\n            // if filter not yet there, continue\n            if (filter === undefined) {\n                continue;\n            }\n\n            if (filter === filterToSkip) {\n                continue;\n            }\n\n            // don't bother with filters that are not active\n            if (!filter.isFilterActive()) {\n                continue;\n            }\n\n            if (!filter.doesFilterPass) { // because users can do custom filters, give nice error message\n                console.error('Filter is missing method doesFilterPass');\n            }\n            const params: IDoesFilterPassParams = {\n                node: node,\n                data: data\n            };\n            if (!filter.doesFilterPass(params)) {\n                return false;\n            }\n        }\n        // all filters passed\n        return true;\n    }\n\n    private parseQuickFilter(newFilter: string): string {\n        if (_.missing(newFilter) || newFilter === \"\") {\n            return null;\n        }\n\n        if (!this.gridOptionsWrapper.isRowModelDefault()) {\n            console.warn('ag-grid: quick filtering only works with the Client-side Row Model');\n            return null;\n        }\n\n        return newFilter.toUpperCase();\n    }\n\n    // returns true if it has changed (not just same value again)\n    public setQuickFilter(newFilter: any): void {\n        const parsedFilter = this.parseQuickFilter(newFilter);\n        if (this.quickFilter !== parsedFilter) {\n            this.quickFilter = parsedFilter;\n            this.setQuickFilterParts();\n            this.onFilterChanged();\n        }\n    }\n\n    private checkExternalFilter(): void {\n        this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();\n    }\n\n    public onFilterChanged(additionalEventAttributes?: any): void {\n        this.setAdvancedFilterPresent();\n        this.updateFilterFlagInColumns(\"filterChanged\", additionalEventAttributes);\n        this.checkExternalFilter();\n\n        _.iterateObject(this.allFilters, function(key, filterWrapper: FilterWrapper) {\n            filterWrapper.filterPromise.then(filter => {\n                if (filter.onAnyFilterChanged) {\n                    filter.onAnyFilterChanged();\n                }\n            });\n        });\n\n        const filterChangedEvent: FilterChangedEvent = {\n            type: Events.EVENT_FILTER_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        if (additionalEventAttributes) {\n            _.mergeDeep(filterChangedEvent, additionalEventAttributes);\n        }\n\n        // because internal events are not async in ag-grid, when the dispatchEvent\n        // method comes back, we know all listeners have finished executing.\n        this.processingFilterChange = true;\n\n        this.eventService.dispatchEvent(filterChangedEvent);\n\n        this.processingFilterChange = false;\n    }\n\n    public isSuppressFlashingCellsBecauseFiltering(): boolean {\n        if (this.allowShowChangeAfterFilter) {\n            // if user has elected to always flash cell changes, then return false always\n            return false;\n        } else {\n            // otherwise we suppress flashing changes when filtering\n            return this.processingFilterChange;\n        }\n    }\n\n    public isQuickFilterPresent(): boolean {\n        return this.quickFilter !== null;\n    }\n\n    public doesRowPassOtherFilters(filterToSkip: any, node: any): boolean {\n        return this.doesRowPassFilter(node, filterToSkip);\n    }\n\n    private doesRowPassQuickFilterNoCache(node: RowNode, filterPart: string): boolean {\n        const columns = this.columnController.getAllColumnsForQuickFilter();\n        let filterPasses = false;\n        columns.forEach(column => {\n            if (filterPasses) { return; }\n            const part = this.getQuickFilterTextForColumn(column, node);\n            if (_.exists(part)) {\n                if (part.indexOf(filterPart) >= 0) {\n                    filterPasses = true;\n                }\n            }\n        });\n        return filterPasses;\n    }\n\n    private doesRowPassQuickFilterCache(node: any, filterPart: string): boolean {\n        if (!node.quickFilterAggregateText) {\n            this.aggregateRowForQuickFilter(node);\n        }\n        const filterPasses = node.quickFilterAggregateText.indexOf(filterPart) >= 0;\n        return filterPasses;\n    }\n\n    private doesRowPassQuickFilter(node: any): boolean {\n\n        let filterPasses = true;\n        const usingCache = this.gridOptionsWrapper.isCacheQuickFilter();\n\n        this.quickFilterParts.forEach(filterPart => {\n            const partPasses = usingCache ?\n                this.doesRowPassQuickFilterCache(node, filterPart) : this.doesRowPassQuickFilterNoCache(node, filterPart);\n\n            // each part must pass, if any fails, then the whole filter fails\n            if (!partPasses) {\n                filterPasses = false;\n            }\n        });\n\n        return filterPasses;\n    }\n\n    public doesRowPassFilter(node: any, filterToSkip?: any): boolean {\n\n        // the row must pass ALL of the filters, so if any of them fail,\n        // we return true. that means if a row passes the quick filter,\n        // but fails the column filter, it fails overall\n\n        // first up, check quick filter\n        if (this.isQuickFilterPresent()) {\n            if (!this.doesRowPassQuickFilter(node)) {\n                return false;\n            }\n        }\n\n        // secondly, give the client a chance to reject this row\n        if (this.externalFilterPresent) {\n            if (!this.gridOptionsWrapper.doesExternalFilterPass(node)) {\n                return false;\n            }\n        }\n\n        // lastly, check our internal advanced filter\n        if (this.advancedFilterPresent) {\n            if (!this.doesFilterPass(node, filterToSkip)) {\n                return false;\n            }\n        }\n\n        // got this far, all filters pass\n        return true;\n    }\n\n    private getQuickFilterTextForColumn(column: Column, rowNode: RowNode): string {\n        const value = this.valueService.getValue(column, rowNode, true);\n\n        let valueAfterCallback: any;\n        const colDef = column.getColDef();\n        if (column.getColDef().getQuickFilterText) {\n            const params: GetQuickFilterTextParams = {\n                value: value,\n                node: rowNode,\n                data: rowNode.data,\n                column: column,\n                colDef: colDef,\n                context: this.gridOptionsWrapper.getContext()\n            };\n            valueAfterCallback = column.getColDef().getQuickFilterText(params);\n        } else {\n            valueAfterCallback = value;\n        }\n\n        if (_.exists(valueAfterCallback)) {\n            return valueAfterCallback.toString().toUpperCase();\n        } else {\n            return null;\n        }\n    }\n\n    private aggregateRowForQuickFilter(node: RowNode) {\n        const stringParts: string[] = [];\n        const columns = this.columnController.getAllColumnsForQuickFilter();\n        columns.forEach(column => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n            if (_.exists(part)) {\n                stringParts.push(part);\n            }\n        });\n        node.quickFilterAggregateText = stringParts.join(FilterManager.QUICK_FILTER_SEPARATOR);\n    }\n\n    private onNewRowsLoaded(source: ColumnEventType) {\n        _.iterateObject(this.allFilters, function(key, filterWrapper: FilterWrapper) {\n            filterWrapper.filterPromise.then(filter => {\n                if (filter.onNewRowsLoaded) {\n                    filter.onNewRowsLoaded();\n                }\n            });\n        });\n        this.updateFilterFlagInColumns(source);\n        this.setAdvancedFilterPresent();\n    }\n\n    private createValueGetter(column: Column) {\n        return (node: RowNode) => {\n            return this.valueService.getValue(column, node, true);\n        };\n    }\n\n    public getFilterComponent(column: Column, source: FilterRequestSource): Promise<IFilterComp> {\n        const filterWrapper = this.getOrCreateFilterWrapper(column, source);\n        return filterWrapper.filterPromise;\n    }\n\n    public isFilterActive(column: Column): boolean {\n        const filterWrapper: FilterWrapper = this.cachedFilter(column);\n        if (filterWrapper) {\n            return filterWrapper.filterPromise.resolveNow(false, filter => filter.isFilterActive());\n        } else {\n            return false;\n        }\n    }\n\n    public getOrCreateFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper {\n        let filterWrapper: FilterWrapper = this.cachedFilter(column);\n\n        if (!filterWrapper) {\n            filterWrapper = this.createFilterWrapper(column, source);\n            this.allFilters[column.getColId()] = filterWrapper;\n        } else {\n            if (source !== 'NO_UI') {\n                this.putIntoGui(filterWrapper, source);\n            }\n        }\n\n        return filterWrapper;\n    }\n\n    public cachedFilter(column: Column): FilterWrapper {\n        return this.allFilters[column.getColId()];\n    }\n\n    private createFilterInstance(column: Column, $scope: any): Promise<IFilterComp> {\n        let defaultFilter: string = 'agTextColumnFilter';\n\n        if (ModuleRegistry.isRegistered(ModuleNames.SetFilterModule)) {\n            defaultFilter = 'agSetColumnFilter';\n        }\n\n        const sanitisedColDef: ColDef = _.cloneObject(column.getColDef());\n\n        let filterInstance: IFilterComp;\n\n        const params = this.createFilterParams(column, sanitisedColDef, $scope);\n        params.filterChangedCallback = this.onFilterChanged.bind(this);\n        params.filterModifiedCallback = () => {\n            const event: FilterModifiedEvent = {\n                type: Events.EVENT_FILTER_MODIFIED,\n                api: this.gridApi,\n                columnApi: this.columnApi,\n                column: column,\n                filterInstance: filterInstance\n            };\n            this.eventService.dispatchEvent(event);\n        };\n\n        // we modify params in a callback as we need the filter instance, and this isn't available\n        // when creating the params above\n        const modifyParamsCallback = (params: any, filter: IFilterComp) => _.assign(params, {\n            doesRowPassOtherFilter: this.doesRowPassOtherFilters.bind(this, filter),\n        });\n\n        const res = this.userComponentFactory.newFilterComponent(sanitisedColDef, params, defaultFilter, modifyParamsCallback);\n\n        if (res) {\n            res.then(r => filterInstance = r );\n        }\n\n        return res;\n    }\n\n    public createFilterParams(column: Column, colDef: ColDef, $scope: any = null): IFilterParams {\n        const params: IFilterParams = {\n            api: this.gridOptionsWrapper.getApi(),\n            column: column,\n            colDef: colDef,\n            rowModel: this.rowModel,\n            filterChangedCallback: null,\n            filterModifiedCallback: null,\n            valueGetter: this.createValueGetter(column),\n            context: this.gridOptionsWrapper.getContext(),\n            doesRowPassOtherFilter: null\n        };\n\n        // hack in scope if using AngularJS\n        if ($scope) {\n            (params as any).$scope = $scope;\n        }\n\n        return params;\n    }\n\n    private createFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper {\n        const filterWrapper: FilterWrapper = {\n            column: column,\n            filterPromise: null,\n            scope: null as any,\n            compiledElement: null,\n            guiPromise: Promise.external<HTMLElement>()\n        };\n\n        filterWrapper.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;\n\n        filterWrapper.filterPromise = this.createFilterInstance(column, filterWrapper.scope);\n\n        if (filterWrapper.filterPromise) {\n            this.putIntoGui(filterWrapper, source);\n        }\n\n        return filterWrapper;\n    }\n\n    private putIntoGui(filterWrapper: FilterWrapper, source: FilterRequestSource): void {\n        const eFilterGui = document.createElement('div');\n        eFilterGui.className = 'ag-filter';\n        filterWrapper.filterPromise.then(filter => {\n            let guiFromFilter = filter.getGui();\n\n            if (_.missing(guiFromFilter)) {\n                console.warn(`getGui method from filter returned ${guiFromFilter}, it should be a DOM element or an HTML template string.`);\n            }\n\n            // for backwards compatibility with Angular 1 - we\n            // used to allow providing back HTML from getGui().\n            // once we move away from supporting Angular 1\n            // directly, we can change this.\n            if (typeof guiFromFilter === 'string') {\n                guiFromFilter = _.loadTemplate(guiFromFilter as string);\n            }\n\n            eFilterGui.appendChild(guiFromFilter);\n\n            if (filterWrapper.scope) {\n                const compiledElement = this.$compile(eFilterGui)(filterWrapper.scope);\n                filterWrapper.compiledElement = compiledElement;\n                window.setTimeout(() => filterWrapper.scope.$apply(), 0);\n            }\n\n            filterWrapper.guiPromise.resolve(eFilterGui);\n\n            this.eventService.dispatchEvent({\n                type: Events.EVENT_FILTER_OPENED,\n                column: filterWrapper.column,\n                source: source,\n                eGui: eFilterGui,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            } as FilterOpenedEvent);\n\n        });\n    }\n\n    private onNewColumnsLoaded(): void {\n        let atLeastOneFilterGone = false;\n        _.iterateObject(this.allFilters, (key: string, filterWrapper: FilterWrapper) => {\n            const oldColumn = !this.columnController.getPrimaryColumn(filterWrapper.column);\n            if (oldColumn) {\n                atLeastOneFilterGone = true;\n                this.disposeFilterWrapper(filterWrapper, \"filterDestroyed\");\n            }\n        });\n\n        if (atLeastOneFilterGone) {\n            this.onFilterChanged();\n        }\n    }\n\n    // destroys the filter, so it not longer takes part\n    public destroyFilter(column: Column, source: ColumnEventType = \"api\"): void {\n        const filterWrapper: FilterWrapper = this.allFilters[column.getColId()];\n        if (filterWrapper) {\n            this.disposeFilterWrapper(filterWrapper, source);\n            this.onFilterChanged();\n        }\n    }\n\n    private disposeFilterWrapper(filterWrapper: FilterWrapper, source: ColumnEventType): void {\n        filterWrapper.filterPromise.then(filter => {\n            filter.setModel(null);\n            if (filter.destroy) {\n                filter.destroy();\n            }\n            filterWrapper.column.setFilterActive(false, source);\n            if (filterWrapper.scope) {\n                if (filterWrapper.compiledElement) {\n                    filterWrapper.compiledElement.remove();\n                }\n                filterWrapper.scope.$destroy();\n            }\n            delete this.allFilters[filterWrapper.column.getColId()];\n        });\n    }\n\n    @PreDestroy\n    public destroy() {\n        _.iterateObject(this.allFilters, (key: string, filterWrapper: any) => {\n            this.disposeFilterWrapper(filterWrapper, \"filterDestroyed\");\n        });\n    }\n\n}\n\nexport interface FilterWrapper {\n    compiledElement: any;\n    column: Column;\n    filterPromise: Promise<IFilterComp>;\n    scope: any;\n    guiPromise: ExternalPromise<HTMLElement>;\n}\n"]}