{"version":3,"sources":["../../src/ts/filter/floating/provided/readOnlyFloatingFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wDAAuD;AACvD,8EAAoE;AAEpE,+FAA+F;AAC/F,+FAA+F;AAC/F,8CAA8C;AAC9C;IAA4C,0CAAS;IAOjD;eACI,kBAAM,oIAA4H,CAAC;IACvI,CAAC;IAEM,qCAAI,GAAX,UAAY,MAA6B;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,mBAAmB,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC7C,CAAC;IAEM,qDAAoB,GAA3B,UAA4B,WAAgB;QAA5C,iBAcC;QAbG,IAAI,CAAC,WAAW,EAAE;YACd,IAAI,CAAC,mBAAmB,CAAC,KAAK,GAAG,EAAE,CAAC;YACpC,OAAO;SACV;QAED,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAA,cAAc;YAC3C,uDAAuD;YACvD,2BAA2B;YAC3B,IAAI,cAAc,CAAC,gBAAgB,EAAE;gBACjC,IAAM,aAAa,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBACnE,KAAI,CAAC,mBAAmB,CAAC,KAAK,GAAG,aAAa,CAAC;aAClD;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IA3BD;QADC,kCAAW,CAAC,qBAAqB,CAAC;uEACW;IA4BlD,6BAAC;CA/BD,AA+BC,CA/B2C,qBAAS,GA+BpD;AA/BY,wDAAsB","file":"readOnlyFloatingFilter.js","sourcesContent":["import { IFloatingFilterComp, IFloatingFilterParams } from \"../floatingFilter\";\nimport { Component } from \"../../../widgets/component\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\n\n// optional floating filter for user provided filters - instead of providing a floating filter,\n// they can provide a getModelAsString() method on the filter instead. this class just displays\n// the string returned from getModelAsString()\nexport class ReadOnlyFloatingFilter extends Component implements IFloatingFilterComp {\n\n    @RefSelector('eFloatingFilterText')\n    private eFloatingFilterText: HTMLInputElement;\n\n    private params: IFloatingFilterParams;\n\n    constructor() {\n        super(`<div class=\"ag-input-wrapper\" role=\"presentation\"><input ref=\"eFloatingFilterText\" class=\"ag-floating-filter-input\"></div>`);\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.params = params;\n        this.eFloatingFilterText.disabled = true;\n    }\n\n    public onParentModelChanged(parentModel: any): void {\n        if (!parentModel) {\n            this.eFloatingFilterText.value = '';\n            return;\n        }\n\n        this.params.parentFilterInstance(filterInstance => {\n            // getModelAsString should be present, as we check this\n            // in floatingFilterWrapper\n            if (filterInstance.getModelAsString) {\n                const modelAsString = filterInstance.getModelAsString(parentModel);\n                this.eFloatingFilterText.value = modelAsString;\n            }\n        });\n    }\n}\n"]}