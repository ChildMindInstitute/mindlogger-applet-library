{"version":3,"sources":["../../src/ts/xmlFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,6CAAyC;AACzC,IAAM,cAAc,GAAG,MAAM,CAAC;AAG9B;IAAA;IAkDA,CAAC;IAjDG,8BAAS,GAAT,UAAU,UAAsB,EAAE,kBAAoD;QAAtF,iBAgCC;QA/BG,IAAI,KAAK,GAAW,EAAE,CAAC;QACvB,IAAI,UAAU,CAAC,UAAU,EAAE;YACvB,IAAI,UAAU,CAAC,UAAU,CAAC,kBAAkB,EAAE;gBAC1C,UAAU,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAC,WAAiC;oBAC/E,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;wBACrC,KAAK,IAAI,KAAI,CAAC,0BAA0B,CAAC,WAAW,CAAC,MAAM,GAAG,GAAG,EAAE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,kBAAkB,CAAC,CAAC;oBACjH,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;aACN;YAED,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE;gBAC9B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;oBAClD,KAAK,IAAI,KAAI,CAAC,0BAA0B,CAAC,GAAG,EAAE,UAAU,CAAC,UAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,kBAAkB,CAAC,CAAC;gBAC1G,CAAC,CAAC,CAAC;aACN;SACJ;QACD,IAAI,MAAM,GAAW,GAAG,GAAG,UAAU,CAAC,IAAI,GAAG,KAAK,CAAC;QAEnD,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,IAAI,IAAI,EAAE;YACrD,OAAO,MAAM,GAAG,IAAI,GAAG,cAAc,CAAC;SACzC;QAED,IAAI,UAAU,CAAC,QAAQ,IAAI,IAAI,EAAE;YAC7B,OAAO,MAAM,GAAG,GAAG,GAAG,UAAU,CAAC,QAAQ,GAAG,IAAI,GAAG,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC;SAC7F;QAED,MAAM,IAAI,GAAG,GAAG,cAAc,CAAC;QAC/B,UAAU,CAAC,QAAS,CAAC,OAAO,CAAC,UAAC,EAAE;YAC5B,MAAM,IAAI,KAAI,CAAC,SAAS,CAAC,EAAE,EAAE,kBAAkB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,GAAG,IAAI,GAAG,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC;IAClE,CAAC;IAEO,+CAA0B,GAAlC,UAAmC,GAAW,EAAE,KAAU,EAAE,kBAAoD;QAC5G,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,EAAE,CAAC;SACb;QAED,IAAI,QAAQ,GAAW,KAAK,CAAC;QAC7B,IAAI,CAAC,OAAM,CAAC,KAAK,CAAC,KAAK,SAAS,CAAC,EAAE;YAC/B,IAAI,kBAAkB,EAAE;gBACpB,QAAQ,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;aACxC;SACJ;QAED,OAAO,MAAI,GAAG,WAAK,QAAQ,OAAG,CAAC;IACnC,CAAC;IAhDQ,UAAU;QADtB,cAAI,CAAC,YAAY,CAAC;OACN,UAAU,CAkDtB;IAAD,iBAAC;CAlDD,AAkDC,IAAA;AAlDY,gCAAU","file":"xmlFactory.js","sourcesContent":["import { Bean } from \"./context/context\";\nconst LINE_SEPARATOR = '\\r\\n';\n\n@Bean('xmlFactory')\nexport class XmlFactory {\n    createXml(xmlElement: XmlElement, booleanTransformer?:(currentValue:boolean) => string) :string {\n        let props: string = '';\n        if (xmlElement.properties) {\n            if (xmlElement.properties.prefixedAttributes) {\n                xmlElement.properties.prefixedAttributes.forEach((prefixedSet:PrefixedXmlAttributes) => {\n                    Object.keys(prefixedSet.map).forEach((key) => {\n                        props += this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);\n                    });\n                });\n            }\n\n            if (xmlElement.properties.rawMap) {\n                Object.keys(xmlElement.properties.rawMap).forEach((key) => {\n                    props += this.returnAttributeIfPopulated(key, xmlElement.properties!.rawMap[key], booleanTransformer);\n                });\n            }\n        }\n        let result: string = '<' + xmlElement.name + props;\n\n        if (!xmlElement.children && xmlElement.textNode == null) {\n            return result + '/>' + LINE_SEPARATOR;\n        }\n\n        if (xmlElement.textNode != null) {\n            return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n        }\n\n        result += '>' + LINE_SEPARATOR;\n        xmlElement.children!.forEach((it) => {\n            result += this.createXml(it, booleanTransformer);\n        });\n        return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n    }\n\n    private returnAttributeIfPopulated(key: string, value: any, booleanTransformer?:(currentValue:boolean) => string) {\n        if (!value) {\n            return '';\n        }\n\n        let xmlValue: string = value;\n        if ((typeof(value) === 'boolean')) {\n            if (booleanTransformer) {\n                xmlValue = booleanTransformer(value);\n            }\n        }\n\n        return ` ${key}=\"${xmlValue}\"`;\n    }\n\n}\n\nexport interface XmlElement {\n    name: string;\n    properties?: XmlAttributes;\n    children?: XmlElement[];\n    textNode?: string;\n}\n\nexport interface XmlAttributes {\n    prefixedAttributes?: PrefixedXmlAttributes[];\n    rawMap?: any;\n}\n\nexport interface PrefixedXmlAttributes {\n    prefix: string;\n    map: any;\n}"]}