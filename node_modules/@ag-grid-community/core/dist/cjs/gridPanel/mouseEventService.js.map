{"version":3,"sources":["../../src/ts/gridPanel/mouseEventService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8CAAyD;AACzD,8CAA+C;AAI/C,kCAA6C;AAG7C;IAAA;QAQY,mBAAc,GAAG,mBAAiB,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;IA0C3E,CAAC;0BAlDY,iBAAiB;IAWlB,gCAAI,GAAZ;QACI,IAAI,CAAC,+BAA+B,EAAE,CAAC;IAC3C,CAAC;IAED,0GAA0G;IAC1G,2GAA2G;IAC3G,0BAA0B;IAClB,2DAA+B,GAAvC;QACK,IAAI,CAAC,QAAgB,CAAC,mBAAiB,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;IACjF,CAAC;IAEM,mDAAuB,GAA9B,UAA+B,KAAY;QACvC,OAAO,SAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;IACjE,CAAC;IAED,sGAAsG;IACtG,6GAA6G;IAC7G,mDAAmD;IAC5C,+CAAmB,GAA1B,UAA2B,KAAiC;QAExD,IAAM,IAAI,GAAG,SAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,IAAM,UAAU,GAAI,OAAe,CAAC,mBAAiB,CAAC,YAAY,CAAC,CAAC;YACpE,IAAI,SAAC,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;gBACtB,IAAM,iBAAiB,GAAG,UAAU,KAAK,IAAI,CAAC,cAAc,CAAC;gBAC7D,OAAO,iBAAiB,CAAC;aAC5B;SACJ;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,mDAAuB,GAA9B,UAA+B,KAAiC;QAC5D,IAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACrD,OAAO,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACxD,CAAC;;IA3Cc,sCAAoB,GAAG,IAAI,sBAAc,EAAE,CAAC;IAC5C,8BAAY,GAAG,oBAAoB,CAAC;IAJlB;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;iEAAgD;IACzD;QAAtB,mBAAS,CAAC,UAAU,CAAC;uDAA+B;IAQrD;QADC,uBAAa;iDAGb;IAbQ,iBAAiB;QAD7B,cAAI,CAAC,mBAAmB,CAAC;OACb,iBAAiB,CAkD7B;IAAD,wBAAC;CAlDD,AAkDC,IAAA;AAlDY,8CAAiB","file":"mouseEventService.js","sourcesContent":["import { Bean, PostConstruct } from \"../context/context\";\nimport { Autowired } from \"../context/context\";\nimport { CellPosition } from \"../entities/cellPosition\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { CellComp } from \"../rendering/cellComp\";\nimport { NumberSequence, _ } from '../utils';\n\n@Bean('mouseEventService')\nexport class MouseEventService {\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('eGridDiv') private eGridDiv: HTMLElement;\n\n    private static gridInstanceSequence = new NumberSequence();\n    private static GRID_DOM_KEY = '__ag_grid_instance';\n\n    private gridInstanceId = MouseEventService.gridInstanceSequence.next();\n\n    @PostConstruct\n    private init(): void {\n        this.stampDomElementWithGridInstance();\n    }\n\n    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\n    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\n    // for where this is used.\n    private stampDomElementWithGridInstance(): void {\n        (this.eGridDiv as any)[MouseEventService.GRID_DOM_KEY] = this.gridInstanceId;\n    }\n\n    public getRenderedCellForEvent(event: Event): CellComp {\n        return _.getCellCompForEvent(this.gridOptionsWrapper, event);\n    }\n\n    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing\n    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\n    // getting executed on many grids at the same time.\n    public isEventFromThisGrid(event: MouseEvent | KeyboardEvent): boolean {\n\n        const path = _.getEventPath(event);\n\n        for (let i = 0; i < path.length; i++) {\n            const element = path[i];\n            const instanceId = (element as any)[MouseEventService.GRID_DOM_KEY];\n            if (_.exists(instanceId)) {\n                const eventFromThisGrid = instanceId === this.gridInstanceId;\n                return eventFromThisGrid;\n            }\n        }\n\n        return false;\n    }\n\n    public getCellPositionForEvent(event: MouseEvent | KeyboardEvent): CellPosition {\n        const cellComp = this.getRenderedCellForEvent(event);\n        return cellComp ? cellComp.getCellPosition() : null;\n    }\n\n}\n"]}