{"version":3,"sources":["../../src/ts/gridPanel/navigationService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8CAA8E;AAE9E,0CAAyC;AAUzC,kCAA6B;AAG7B;IAAA;QAaY,+BAA0B,GAAG,CAAC,CAAC;IA+M3C,CAAC;IA5MW,gCAAI,GAAZ;QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;IACnE,CAAC;IAEM,4CAAgB,GAAvB,UAAwB,SAAoB;QACxC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEM,kDAAsB,GAA7B,UAA8B,KAAoB;QAE9C,IAAM,GAAG,GAAG,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC;QACzC,IAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;QACzB,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC;QAE3B,IAAM,WAAW,GAAiB,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACxF,IAAI,CAAC,WAAW,EAAE;YAAE,OAAO,KAAK,CAAC;SAAE;QAEnC,IAAI,SAAS,GAAG,KAAK,CAAC;QAEtB,QAAQ,GAAG,EAAE;YACT,KAAK,qBAAS,CAAC,aAAa,CAAE;YAC9B,KAAK,qBAAS,CAAC,YAAY;gBACvB,sDAAsD;gBACtD,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;oBACf,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;oBACzB,SAAS,GAAG,IAAI,CAAC;iBACpB;gBACD,MAAM;YACV,KAAK,qBAAS,CAAC,QAAQ,CAAE;YACzB,KAAK,qBAAS,CAAC,SAAS;gBACpB,kDAAkD;gBAClD,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;oBACzC,SAAS,GAAG,IAAI,CAAC;iBACpB;gBACD,MAAM;YACV,KAAK,qBAAS,CAAC,MAAM,CAAE;YACvB,KAAK,qBAAS,CAAC,QAAQ;gBACnB,+CAA+C;gBAC/C,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;oBACtC,SAAS,GAAG,IAAI,CAAC;iBACpB;gBACD,MAAM;YACV,KAAK,qBAAS,CAAC,aAAa;gBACxB,+DAA+D;gBAC/D,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;oBACf,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;oBAC7B,SAAS,GAAG,IAAI,CAAC;iBACpB;gBACD,MAAM;YACV,KAAK,qBAAS,CAAC,WAAW;gBACtB,+DAA+D;gBAC/D,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;oBACf,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;oBAC3B,SAAS,GAAG,IAAI,CAAC;iBACpB;gBACD,MAAM;SACb;QAED,IAAI,SAAS,EAAE;YACX,KAAK,CAAC,cAAc,EAAE,CAAC;SAC1B;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,8DAA8D;IAC9D,gEAAgE;IAChE,kEAAkE;IAClE,qEAAqE;IACrE,sEAAsE;IACtE,0EAA0E;IAC1E,8DAA8D;IACtD,4DAAgC,GAAxC;QACI,IAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACjC,IAAM,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,0BAA0B,CAAC;QACnD,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;IACxB,CAAC;IAEO,yDAA6B,GAArC;QACI,IAAI,CAAC,0BAA0B,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;IAC3D,CAAC;IAEO,sCAAU,GAAlB,UAAmB,QAAsB;QAErC,IAAI,IAAI,CAAC,gCAAgC,EAAE,EAAE;YAAE,OAAO;SAAE;QAExD,IAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;QAC3D,IAAI,eAAe,GAAG,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC;QAEjE,IAAI,IAAI,CAAC,SAAS,CAAC,yBAAyB,EAAE,EAAE;YAC5C,eAAe,IAAI,IAAI,CAAC,WAAW,CAAC;SACvC;QAED,IAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;QAEhE,IAAM,sBAAsB,GAAG,cAAc,CAAC,GAAG,GAAG,eAAe,CAAC;QACpE,IAAM,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,sBAAsB,GAAG,iBAAiB,CAAC,CAAC;QACjH,IAAI,WAAW,GAAG,oBAAoB,CAAC;QAEvC,IAAM,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;QAC/E,IAAM,aAAa,GAAG,gBAAgB,GAAG,eAAe,GAAG,iBAAiB,CAAC;QAC7E,IAAI,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,aAAa,GAAG,iBAAiB,CAAC,CAAC;QAE5F,IAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;QAE1D,IAAI,UAAU,GAAG,WAAW,EAAE;YAAE,UAAU,GAAG,WAAW,CAAC;SAAE;QAC3D,IAAI,WAAW,GAAG,WAAW,EAAE;YAAE,WAAW,GAAG,WAAW,CAAC;SAAE;QAE7D,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEvE,IAAI,CAAC,6BAA6B,EAAE,CAAC;IACzC,CAAC;IAEO,oCAAQ,GAAhB,UAAiB,QAAsB;QAEnC,IAAI,IAAI,CAAC,gCAAgC,EAAE,EAAE;YAAE,OAAO;SAAE;QAExD,IAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;QAC3D,IAAI,eAAe,GAAG,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC;QAEjE,IAAI,IAAI,CAAC,SAAS,CAAC,yBAAyB,EAAE,EAAE;YAC5C,eAAe,IAAI,IAAI,CAAC,WAAW,CAAC;SACvC;QAED,IAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;QAEhE,IAAM,mBAAmB,GAAG,cAAc,CAAC,GAAG,CAAC;QAC/C,IAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,iBAAiB,CAAC,CAAC;QAC3G,IAAI,WAAW,GAAG,iBAAiB,CAAC;QAEpC,IAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAM,aAAa,GAAG,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,SAAS,GAAG,eAAe,GAAG,iBAAiB,CAAC;QAC7G,IAAI,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,aAAa,GAAG,iBAAiB,CAAC,CAAC;QAE5F,IAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;QAExD,IAAI,UAAU,GAAG,QAAQ,EAAE;YAAE,UAAU,GAAG,QAAQ,CAAC;SAAE;QACrD,IAAI,WAAW,GAAG,QAAQ,EAAE;YAAE,WAAW,GAAG,QAAQ,CAAC;SAAE;QAEvD,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE1E,IAAI,CAAC,6BAA6B,EAAE,CAAC;IACzC,CAAC;IAED,8CAA8C;IAC9C,iDAAiD;IACjD,+DAA+D;IAC/D,uDAAuD;IACvD,wGAAwG;IAChG,sCAAU,GAAlB,UAAmB,WAAmB,EAAE,UAAkB,EAAE,YAAoB,EAAE,UAAkB,EAAE,WAAmB;QACrH,IAAI,SAAC,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;SACpD;QAED,IAAI,SAAC,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;SAC9D;QAED,4DAA4D;QAC5D,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,CAAC;QAE5C,uGAAuG;QACvG,eAAe;QACf,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/E,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAM,YAAY,GAAiB,EAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAC,CAAC;YAChG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;SACrD;IACL,CAAC;IAED,2FAA2F;IACnF,0CAAc,GAAtB,UAAuB,GAAW,EAAE,QAAsB;QAEtD,IAAM,KAAK,GAAG,GAAG,KAAK,qBAAS,CAAC,MAAM,CAAC;QACvC,IAAM,kBAAkB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;QAE7E,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE,kBAAkB,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IACpG,CAAC;IAED,0FAA0F;IAClF,6CAAiB,GAAzB,UAA0B,GAAW,EAAE,QAAsB;QAEzD,IAAM,OAAO,GAAG,GAAG,KAAK,qBAAS,CAAC,QAAQ,CAAC;QAE3C,IAAM,UAAU,GAAa,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,CAAC;QAC5E,IAAM,cAAc,GAAW,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE5E,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,QAAQ,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IAChG,CAAC;IAED,+FAA+F;IAC/F,uFAAuF;IAC/E,0CAAc,GAAtB,UAAuB,GAAW;QAE9B,IAAM,OAAO,GAAG,GAAG,KAAK,qBAAS,CAAC,aAAa,CAAC;QAEhD,IAAM,UAAU,GAAa,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,CAAC;QAC5E,IAAM,cAAc,GAAG,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpE,IAAM,kBAAkB,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;QAE/E,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,IAAI,EAAE,cAAc,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC;IAClG,CAAC;IAzN+B;QAA/B,mBAAS,CAAC,mBAAmB,CAAC;gEAA8C;IAC/C;QAA7B,mBAAS,CAAC,iBAAiB,CAAC;8DAA0C;IACnC;QAAnC,mBAAS,CAAC,uBAAuB,CAAC;oEAAsD;IACrD;QAAnC,mBAAS,CAAC,uBAAuB,CAAC;oEAAsD;IAC5D;QAA5B,kBAAQ,CAAC,iBAAiB,CAAC;8DAA2C;IACxC;QAA9B,mBAAS,CAAC,kBAAkB,CAAC;+DAA4C;IACzC;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;iEAAgD;IAQhF;QADC,uBAAa;iDAGb;IAlBQ,iBAAiB;QAD7B,cAAI,CAAC,mBAAmB,CAAC;OACb,iBAAiB,CA4N7B;IAAD,wBAAC;CA5ND,AA4NC,IAAA;AA5NY,8CAAiB","file":"navigationService.js","sourcesContent":["import { Autowired, Bean, Optional, PostConstruct } from \"../context/context\";\nimport { CellPosition } from \"../entities/cellPosition\";\nimport { Constants } from \"../constants\";\nimport { MouseEventService } from \"./mouseEventService\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { Column } from \"../entities/column\";\nimport { FocusedCellController } from \"../focusedCellController\";\nimport { GridPanel } from \"./gridPanel\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { IRangeController } from \"../interfaces/iRangeController\";\nimport { ColumnController } from \"../columnController/columnController\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { _ } from \"../utils\";\n\n@Bean('navigationService')\nexport class NavigationService {\n\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('focusedCellController') private focusedCellController: FocusedCellController;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Optional('rangeController') private rangeController: IRangeController;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    private scrollWidth: number;\n    private gridPanel: GridPanel;\n\n    private timeLastPageEventProcessed = 0;\n\n    @PostConstruct\n    private init(): void {\n        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();\n    }\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.gridPanel = gridPanel;\n    }\n\n    public handlePageScrollingKey(event: KeyboardEvent): boolean {\n\n        const key = event.which || event.keyCode;\n        const alt = event.altKey;\n        const ctrl = event.ctrlKey;\n\n        const currentCell: CellPosition = this.mouseEventService.getCellPositionForEvent(event);\n        if (!currentCell) { return false; }\n\n        let processed = false;\n\n        switch (key) {\n            case Constants.KEY_PAGE_HOME :\n            case Constants.KEY_PAGE_END :\n                // handle home and end when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onHomeOrEndKey(key);\n                    processed = true;\n                }\n                break;\n            case Constants.KEY_LEFT :\n            case Constants.KEY_RIGHT :\n                // handle left and right when ctrl is pressed only\n                if (ctrl && !alt) {\n                    this.onCtrlLeftOrRight(key, currentCell);\n                    processed = true;\n                }\n                break;\n            case Constants.KEY_UP :\n            case Constants.KEY_DOWN :\n                // handle up and down when ctrl is pressed only\n                if (ctrl && !alt) {\n                    this.onCtrlUpOrDown(key, currentCell);\n                    processed = true;\n                }\n                break;\n            case Constants.KEY_PAGE_DOWN :\n                // handle page up and page down when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onPageDown(currentCell);\n                    processed = true;\n                }\n                break;\n            case Constants.KEY_PAGE_UP :\n                // handle page up and page down when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onPageUp(currentCell);\n                    processed = true;\n                }\n                break;\n        }\n\n        if (processed) {\n            event.preventDefault();\n        }\n\n        return processed;\n    }\n\n    // the page up/down keys caused a problem, in that if the user\n    // held the page up/down key down, lots of events got generated,\n    // which clogged up the event queue (as they take time to process)\n    // which in turn froze the grid. Logic below makes sure we wait 100ms\n    // between processing the page up/down events, so when user has finger\n    // held down on key, we ignore page up/down events until 100ms has passed,\n    // which effectively empties the queue of page up/down events.\n    private isTimeSinceLastPageEventToRecent(): boolean {\n        const now = new Date().getTime();\n        const diff = now - this.timeLastPageEventProcessed;\n        return (diff < 100);\n    }\n\n    private setTimeLastPageEventProcessed(): void {\n        this.timeLastPageEventProcessed = new Date().getTime();\n    }\n\n    private onPageDown(gridCell: CellPosition): void {\n\n        if (this.isTimeSinceLastPageEventToRecent()) { return; }\n\n        const scrollPosition = this.gridPanel.getVScrollPosition();\n        let pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n\n        if (this.gridPanel.isHorizontalScrollShowing()) {\n            pixelsInOnePage -= this.scrollWidth;\n        }\n\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n\n        const currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;\n        const currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);\n        let scrollIndex = currentPageBottomRow;\n\n        const currentCellPixel = this.paginationProxy.getRow(gridCell.rowIndex).rowTop;\n        const nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;\n        let focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n\n        const pageLastRow = this.paginationProxy.getPageLastRow();\n\n        if (focusIndex > pageLastRow) { focusIndex = pageLastRow; }\n        if (scrollIndex > pageLastRow) { scrollIndex = pageLastRow; }\n\n        this.navigateTo(scrollIndex, 'top', null, focusIndex, gridCell.column);\n\n        this.setTimeLastPageEventProcessed();\n    }\n\n    private onPageUp(gridCell: CellPosition): void {\n\n        if (this.isTimeSinceLastPageEventToRecent()) { return; }\n\n        const scrollPosition = this.gridPanel.getVScrollPosition();\n        let pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n\n        if (this.gridPanel.isHorizontalScrollShowing()) {\n            pixelsInOnePage -= this.scrollWidth;\n        }\n\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n\n        const currentPageTopPixel = scrollPosition.top;\n        const currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);\n        let scrollIndex = currentPageTopRow;\n\n        const currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);\n        const nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;\n        let focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n\n        const firstRow = this.paginationProxy.getPageFirstRow();\n\n        if (focusIndex < firstRow) { focusIndex = firstRow; }\n        if (scrollIndex < firstRow) { scrollIndex = firstRow; }\n\n        this.navigateTo(scrollIndex, 'bottom', null, focusIndex, gridCell.column);\n\n        this.setTimeLastPageEventProcessed();\n    }\n\n    // common logic to navigate. takes parameters:\n    // scrollIndex - what row to vertically scroll to\n    // scrollType - what position to put scroll index ie top/bottom\n    // scrollColumn - what column to horizontally scroll to\n    // focusIndex / focusColumn - for page up / down, we want to scroll to one row/column, but focus another\n    private navigateTo(scrollIndex: number, scrollType: string, scrollColumn: Column, focusIndex: number, focusColumn: Column): void {\n        if (_.exists(scrollColumn)) {\n            this.gridPanel.ensureColumnVisible(scrollColumn);\n        }\n\n        if (_.exists(scrollIndex)) {\n            this.gridPanel.ensureIndexVisible(scrollIndex, scrollType);\n        }\n\n        // make sure the cell is rendered, needed if we are to focus\n        this.animationFrameService.flushAllFrames();\n\n        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell\n        // highlighted.\n        this.focusedCellController.setFocusedCell(focusIndex, focusColumn, null, true);\n        if (this.rangeController) {\n            const cellPosition: CellPosition = {rowIndex: focusIndex, rowPinned: null, column: focusColumn};\n            this.rangeController.setRangeToCell(cellPosition);\n        }\n    }\n\n    // ctrl + up/down will bring focus to same column, first/last row. no horizontal scrolling.\n    private onCtrlUpOrDown(key: number, gridCell: CellPosition): void {\n\n        const upKey = key === Constants.KEY_UP;\n        const rowIndexToScrollTo = upKey ? 0 : this.paginationProxy.getPageLastRow();\n\n        this.navigateTo(rowIndexToScrollTo, null, gridCell.column, rowIndexToScrollTo, gridCell.column);\n    }\n\n    // ctrl + left/right will bring focus to same row, first/last cell. no vertical scrolling.\n    private onCtrlLeftOrRight(key: number, gridCell: CellPosition): void {\n\n        const leftKey = key === Constants.KEY_LEFT;\n\n        const allColumns: Column[] = this.columnController.getAllDisplayedColumns();\n        const columnToSelect: Column = leftKey ? allColumns[0] : _.last(allColumns);\n\n        this.navigateTo(gridCell.rowIndex, null, columnToSelect, gridCell.rowIndex, columnToSelect);\n    }\n\n    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring\n    // same cell into view (which means either scroll all the way up, or all the way down).\n    private onHomeOrEndKey(key: number): void {\n\n        const homeKey = key === Constants.KEY_PAGE_HOME;\n\n        const allColumns: Column[] = this.columnController.getAllDisplayedColumns();\n        const columnToSelect = homeKey ? allColumns[0] : _.last(allColumns);\n        const rowIndexToScrollTo = homeKey ? 0 : this.paginationProxy.getPageLastRow();\n\n        this.navigateTo(rowIndexToScrollTo, null, columnToSelect, rowIndexToScrollTo, columnToSelect);\n    }\n}\n"]}