{"version":3,"sources":["../../src/ts/pinnedRowModel/pinnedRowModel.ts"],"names":[],"mappings":"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","file":"pinnedRowModel.js","sourcesContent":["import { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, Context, PostConstruct } from \"../context/context\";\nimport { EventService } from \"../eventService\";\nimport { Events, PinnedRowDataChangedEvent } from \"../events\";\nimport { Constants } from \"../constants\";\nimport { ColumnApi } from \"../columnController/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { _ } from '../utils';\n\n@Bean('pinnedRowModel')\nexport class PinnedRowModel {\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('context') private context: Context;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private pinnedTopRows: RowNode[];\n    private pinnedBottomRows: RowNode[];\n\n    @PostConstruct\n    public init(): void {\n        this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());\n        this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());\n    }\n\n    public isEmpty(floating: string): boolean {\n        const rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;\n        return _.missingOrEmpty(rows);\n    }\n\n    public isRowsToRender(floating: string): boolean {\n        return !this.isEmpty(floating);\n    }\n\n    public getRowAtPixel(pixel: number, floating: string): number {\n        const rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;\n        if (_.missingOrEmpty(rows)) {\n            return 0; // this should never happen, just in case, 0 is graceful failure\n        }\n        for (let i = 0; i < rows.length; i++) {\n            const rowNode = rows[i];\n            const rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;\n            // only need to range check against the top pixel, as we are going through the list\n            // in order, first row to hit the pixel wins\n            if (rowTopPixel >= pixel) {\n                return i;\n            }\n        }\n        return rows.length - 1;\n    }\n\n    public setPinnedTopRowData(rowData: any[] | undefined): void {\n        this.pinnedTopRows = this.createNodesFromData(rowData, true);\n        const event: PinnedRowDataChangedEvent = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public setPinnedBottomRowData(rowData: any[] | undefined): void {\n        this.pinnedBottomRows = this.createNodesFromData(rowData, false);\n        const event: PinnedRowDataChangedEvent = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private createNodesFromData(allData: any[] | undefined, isTop: boolean): RowNode[] {\n        const rowNodes: RowNode[] = [];\n        if (allData) {\n            let nextRowTop = 0;\n            allData.forEach((dataItem: any, index: number) => {\n                const rowNode = new RowNode();\n                this.context.wireBean(rowNode);\n                rowNode.data = dataItem;\n                rowNode.id = `${isTop ? 't' : 'b'}-${index}`;\n                rowNode.rowPinned = isTop ? Constants.PINNED_TOP : Constants.PINNED_BOTTOM;\n                rowNode.setRowTop(nextRowTop);\n                rowNode.setRowHeight(this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);\n                rowNode.setRowIndex(index);\n                nextRowTop += rowNode.rowHeight;\n                rowNodes.push(rowNode);\n            });\n        }\n        return rowNodes;\n    }\n\n    public getPinnedTopRowData(): RowNode[] {\n        return this.pinnedTopRows;\n    }\n\n    public getPinnedBottomRowData(): RowNode[] {\n        return this.pinnedBottomRows;\n    }\n\n    public getPinnedTopTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedTopRows);\n    }\n\n    public getPinnedTopRowCount(): number {\n        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;\n    }\n\n    public getPinnedBottomRowCount(): number {\n        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;\n    }\n\n    public getPinnedTopRow(index: number): RowNode {\n        return this.pinnedTopRows[index];\n    }\n\n    public getPinnedBottomRow(index: number): RowNode {\n        return this.pinnedBottomRows[index];\n    }\n\n    public forEachPinnedTopRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (_.missingOrEmpty(this.pinnedTopRows)) {\n            return;\n        }\n        this.pinnedTopRows.forEach(callback);\n    }\n\n    public forEachPinnedBottomRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (_.missingOrEmpty(this.pinnedBottomRows)) {\n            return;\n        }\n        this.pinnedBottomRows.forEach(callback);\n    }\n\n    public getPinnedBottomTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedBottomRows);\n    }\n\n    private getTotalHeight(rowNodes: RowNode[]): number {\n        if (!rowNodes || rowNodes.length === 0) {\n            return 0;\n        } else {\n            const lastNode = _.last(rowNodes);\n            return lastNode.rowTop + lastNode.rowHeight;\n        }\n    }\n\n}\n"]}