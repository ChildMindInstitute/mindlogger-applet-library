{"version":3,"sources":["../../src/ts/context/context.ts"],"names":[],"mappings":"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","file":"context.js","sourcesContent":["import { ILogger } from \"../iLogger\";\nimport { Component } from \"../widgets/component\";\nimport { _ } from \"../utils\";\n\n// steps in booting up:\n// 1. create all beans\n// 2. autowire all attributes\n// 3. wire all beans\n// 4. initialise the model\n// 5. initialise the view\n// 6. boot??? (not sure if this is needed)\n// each bean is responsible for initialising itself, taking items from the gridOptionsWrapper\n\nexport interface ContextParams {\n    providedBeanInstances: any;\n    beanClasses: any[];\n    components: ComponentMeta[];\n    debug: boolean;\n}\n\nexport interface ComponentMeta {\n    componentClass: new () => Object;\n    componentName: string;\n}\n\ninterface BeanWrapper {\n    bean: any;\n    beanInstance: any;\n    beanName: any;\n}\n\nexport class Context {\n\n    private beanWrappers: { [key: string]: BeanWrapper } = {};\n    private contextParams: ContextParams;\n    private logger: ILogger;\n\n    private componentsMappedByName: { [key: string]: any } = {};\n\n    private destroyed = false;\n\n    public constructor(params: ContextParams, logger: ILogger) {\n        if (!params || !params.beanClasses) {\n            return;\n        }\n\n        this.contextParams = params;\n\n        this.logger = logger;\n        this.logger.log(\">> creating ag-Application Context\");\n\n        this.setupComponents();\n\n        this.createBeans();\n\n        const beanInstances = this.getBeanInstances();\n\n        this.wireBeans(beanInstances);\n\n        this.logger.log(\">> ag-Application Context ready - component is alive\");\n    }\n\n    private getBeanInstances(): any[] {\n        return _.values(this.beanWrappers).map(beanEntry => beanEntry.beanInstance);\n    }\n\n    private setupComponents(): void {\n        if (this.contextParams.components) {\n            this.contextParams.components.forEach(componentMeta => this.addComponent(componentMeta));\n        }\n    }\n\n    private addComponent(componentMeta: ComponentMeta): void {\n        // get name of the class as a string\n        // let className = _.getNameOfClass(ComponentClass);\n        // insert a dash after every capital letter\n        // let classEscaped = className.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n        const classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n        // put all to upper case\n        const classUpperCase = classEscaped.toUpperCase();\n        // finally store\n        this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;\n    }\n\n    public createComponentFromElement(element: Element, afterPreCreateCallback?: (comp: Component) => void): Component {\n        const key = element.nodeName;\n        return this.createComponent(key, afterPreCreateCallback);\n    }\n\n    public createComponent(key: string, afterPreCreateCallback?: (comp: Component) => void): Component {\n        if (this.componentsMappedByName && this.componentsMappedByName[key]) {\n            const newComponent = new this.componentsMappedByName[key]() as Component;\n            this.wireBean(newComponent, afterPreCreateCallback);\n            return newComponent;\n        }\n        return null;\n    }\n\n    public wireBean(bean: any, afterPreCreateCallback?: (comp: Component) => void): void {\n        if (!bean) {\n            throw Error(`Can't wire to bean since it is null`);\n        }\n        this.wireBeans([bean], afterPreCreateCallback);\n    }\n\n    private wireBeans(beanInstances: any[], afterPreCreateCallback?: (comp: Component) => void): void {\n        this.autoWireBeans(beanInstances);\n        this.methodWireBeans(beanInstances);\n\n        this.callLifeCycleMethods(beanInstances, 'preConstructMethods');\n\n        // the callback sets the attributes, so the component has access to attributes\n        // before postConstruct methods in the component are executed\n        if (_.exists(afterPreCreateCallback)) {\n            beanInstances.forEach(afterPreCreateCallback);\n        }\n\n        this.callLifeCycleMethods(beanInstances, 'postConstructMethods');\n    }\n\n    private createBeans(): void {\n        // register all normal beans\n        this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));\n        // register override beans, these will overwrite beans above of same name\n\n        // instantiate all beans - overridden beans will be left out\n        _.iterateObject(this.beanWrappers, (key: string, beanEntry: BeanWrapper) => {\n            let constructorParamsMeta: any;\n            if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {\n                constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;\n            }\n            const constructorParams = this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);\n            const newInstance = applyToConstructor(beanEntry.bean, constructorParams);\n            beanEntry.beanInstance = newInstance;\n        });\n\n        const createdBeanNames = Object.keys(this.beanWrappers).join(', ');\n        this.logger.log(`created beans: ${createdBeanNames}`);\n    }\n\n    // tslint:disable-next-line\n    private createBeanWrapper(Bean: new () => Object): void {\n        const metaData = (Bean as any).__agBeanMetaData;\n\n        if (!metaData) {\n            let beanName: string;\n            if (Bean.prototype.constructor) {\n                beanName = Bean.prototype.constructor.name;\n            } else {\n                beanName = \"\" + Bean;\n            }\n            console.error(\"context item \" + beanName + \" is not a bean\");\n            return;\n        }\n\n        const beanEntry = {\n            bean: Bean,\n            beanInstance: null as any,\n            beanName: metaData.beanName\n        };\n\n        this.beanWrappers[metaData.beanName] = beanEntry;\n    }\n\n    private autoWireBeans(beanInstances: any[]): void {\n        beanInstances.forEach(beanInstance => {\n            this.forEachMetaDataInHierarchy(beanInstance, (metaData: any, beanName: string) => {\n                const attributes = metaData.agClassAttributes;\n                if (!attributes) {\n                    return;\n                }\n\n                attributes.forEach((attribute: any) => {\n                    const otherBean = this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);\n                    beanInstance[attribute.attributeName] = otherBean;\n                });\n            });\n        });\n    }\n\n    private methodWireBeans(beanInstances: any[]): void {\n        beanInstances.forEach(beanInstance => {\n            this.forEachMetaDataInHierarchy(beanInstance, (metaData: any, beanName: string) => {\n                _.iterateObject(metaData.autowireMethods, (methodName: string, wireParams: any[]) => {\n                    // skip constructor, as this is dealt with elsewhere\n                    if (methodName === \"agConstructor\") {\n                        return;\n                    }\n                    const initParams = this.getBeansForParameters(wireParams, beanName);\n                    beanInstance[methodName].apply(beanInstance, initParams);\n                });\n            });\n        });\n    }\n\n    private forEachMetaDataInHierarchy(beanInstance: any, callback: (metaData: any, beanName: string) => void): void {\n\n        let prototype: any = Object.getPrototypeOf(beanInstance);\n        while (prototype != null) {\n\n            const constructor: any = prototype.constructor;\n\n            if (constructor.hasOwnProperty('__agBeanMetaData')) {\n                const metaData = constructor.__agBeanMetaData;\n                const beanName = this.getBeanName(constructor);\n                callback(metaData, beanName);\n            }\n\n            prototype = Object.getPrototypeOf(prototype);\n        }\n    }\n\n    private getBeanName(constructor: any): string {\n        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {\n            return constructor.__agBeanMetaData.beanName;\n        }\n\n        const constructorString = constructor.toString();\n        const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n        return beanName;\n    }\n\n    private getBeansForParameters(parameters: any, beanName: string): any[] {\n        const beansList: any[] = [];\n        if (parameters) {\n            _.iterateObject(parameters, (paramIndex: string, otherBeanName: string) => {\n                const otherBean = this.lookupBeanInstance(beanName, otherBeanName);\n                beansList[Number(paramIndex)] = otherBean;\n            });\n        }\n        return beansList;\n    }\n\n    private lookupBeanInstance(wiringBean: string, beanName: string, optional = false): any {\n        if (beanName === \"context\") {\n            return this;\n        } else if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {\n            return this.contextParams.providedBeanInstances[beanName];\n        } else {\n            const beanEntry = this.beanWrappers[beanName];\n            if (beanEntry) {\n                return beanEntry.beanInstance;\n            }\n            if (!optional) {\n                console.error(\"ag-Grid: unable to find bean reference \" + beanName + \" while initialising \" + wiringBean);\n            }\n            return null;\n        }\n    }\n\n    private callLifeCycleMethods(beanInstances: any[], lifeCycleMethod: string): void {\n        beanInstances.forEach((beanInstance: any) => {\n            this.forEachMetaDataInHierarchy(beanInstance, (metaData: any) => {\n                const methods = metaData[lifeCycleMethod] as string[];\n                if (!methods) { return; }\n                methods.forEach(methodName => beanInstance[methodName]());\n            });\n        });\n    }\n\n    public getBean(name: string): any {\n        return this.lookupBeanInstance(\"getBean\", name, true);\n    }\n\n    public destroy(): void {\n        // should only be able to destroy once\n        if (this.destroyed) {\n            return;\n        }\n        this.logger.log(\">> Shutting down ag-Application Context\");\n\n        const beanInstances = this.getBeanInstances();\n        this.callLifeCycleMethods(beanInstances, 'preDestroyMethods');\n\n        this.contextParams.providedBeanInstances = null;\n\n        this.destroyed = true;\n        this.logger.log(\">> ag-Application Context shut down - component is dead\");\n    }\n}\n\n// taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply\n// allows calling 'apply' on a constructor\nfunction applyToConstructor(constructor: Function, argArray: any[]) {\n    const args = [null].concat(argArray);\n    const factoryFunction = constructor.bind.apply(constructor, args);\n    return new factoryFunction();\n}\n\nexport function PreConstruct(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.postConstructMethods) {\n        props.preConstructMethods = [];\n    }\n    props.preConstructMethods.push(methodName);\n}\n\nexport function PostConstruct(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.postConstructMethods) {\n        props.postConstructMethods = [];\n    }\n    props.postConstructMethods.push(methodName);\n}\n\nexport function PreDestroy(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.preDestroyMethods) {\n        props.preDestroyMethods = [];\n    }\n    props.preDestroyMethods.push(methodName);\n}\n\nexport function Bean(beanName: string): Function {\n    return (classConstructor: any) => {\n        const props = getOrCreateProps(classConstructor);\n        props.beanName = beanName;\n    };\n}\n\nexport function Autowired(name?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        autowiredFunc(target, name, false, target, propertyKey, null);\n    };\n}\n\nexport function Optional(name?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        autowiredFunc(target, name, true, target, propertyKey, null);\n    };\n}\n\nfunction autowiredFunc(target: any, name: string, optional: boolean, classPrototype: any, methodOrAttributeName: string, index: number) {\n    if (name === null) {\n        console.error(\"ag-Grid: Autowired name should not be null\");\n        return;\n    }\n    if (typeof index === \"number\") {\n        console.error(\"ag-Grid: Autowired should be on an attribute\");\n        return;\n    }\n\n    // it's an attribute on the class\n    const props = getOrCreateProps(target.constructor);\n    if (!props.agClassAttributes) {\n        props.agClassAttributes = [];\n    }\n    props.agClassAttributes.push({\n        attributeName: methodOrAttributeName,\n        beanName: name,\n        optional: optional\n    });\n}\n\nexport function Qualifier(name: string): Function {\n    return (classPrototype: any, methodOrAttributeName: string, index: number) => {\n        const constructor: any = typeof classPrototype == \"function\" ? classPrototype : classPrototype.constructor;\n        let props: any;\n\n        if (typeof index === \"number\") {\n            // it's a parameter on a method\n            let methodName: string;\n            if (methodOrAttributeName) {\n                props = getOrCreateProps(constructor);\n                methodName = methodOrAttributeName;\n            } else {\n                props = getOrCreateProps(constructor);\n                methodName = \"agConstructor\";\n            }\n            if (!props.autowireMethods) {\n                props.autowireMethods = {};\n            }\n            if (!props.autowireMethods[methodName]) {\n                props.autowireMethods[methodName] = {};\n            }\n            props.autowireMethods[methodName][index] = name;\n        }\n    };\n}\n\nfunction getOrCreateProps(target: any): any {\n    if (!target.hasOwnProperty(\"__agBeanMetaData\")) {\n        target.__agBeanMetaData = {};\n    }\n\n    return target.__agBeanMetaData;\n}\n"]}