{"version":3,"sources":["../../src/ts/entities/originalColumnGroup.ts"],"names":[],"mappings":"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","file":"originalColumnGroup.js","sourcesContent":["import { OriginalColumnGroupChild } from \"./originalColumnGroupChild\";\nimport { ColGroupDef } from \"./colDef\";\nimport { ColumnGroup } from \"./columnGroup\";\nimport { Column } from \"./column\";\nimport { EventService } from \"../eventService\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { AgEvent } from \"../events\";\n\nexport class OriginalColumnGroup implements OriginalColumnGroupChild, IEventEmitter {\n\n    public static EVENT_EXPANDED_CHANGED = 'expandedChanged';\n    public static EVENT_EXPANDABLE_CHANGED = 'expandableChanged';\n\n    private localEventService = new EventService();\n\n    private colGroupDef: ColGroupDef;\n    private originalParent: OriginalColumnGroup;\n\n    private children: OriginalColumnGroupChild[];\n    private groupId: string;\n    private expandable = false;\n\n    private expanded: boolean;\n    private padding: boolean;\n\n    private level: number;\n\n    constructor(colGroupDef: ColGroupDef, groupId: string, padding: boolean, level: number) {\n        this.colGroupDef = colGroupDef;\n        this.groupId = groupId;\n        this.expanded = colGroupDef && !!colGroupDef.openByDefault;\n        this.padding = padding;\n        this.level = level;\n    }\n\n    public setOriginalParent(originalParent: OriginalColumnGroup | null): void {\n        this.originalParent = originalParent;\n    }\n\n    public getOriginalParent(): OriginalColumnGroup | null {\n        return this.originalParent;\n    }\n\n    public getLevel(): number {\n        return this.level;\n    }\n\n    public isVisible(): boolean {\n        // return true if at least one child is visible\n        if (this.children) {\n            return this.children.some(child => child.isVisible());\n        }\n\n        return false;\n    }\n\n    public isPadding(): boolean {\n        return this.padding;\n    }\n\n    public setExpanded(expanded: boolean | undefined): void {\n        this.expanded = expanded === undefined ? false : expanded;\n        const event: AgEvent = {\n            type: OriginalColumnGroup.EVENT_EXPANDED_CHANGED\n        };\n        this.localEventService.dispatchEvent(event);\n    }\n\n    public isExpandable(): boolean {\n        return this.expandable;\n    }\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    public getId(): string {\n        return this.getGroupId();\n    }\n\n    public setChildren(children: OriginalColumnGroupChild[]): void {\n        this.children = children;\n    }\n\n    public getChildren(): OriginalColumnGroupChild[] {\n        return this.children;\n    }\n\n    public getColGroupDef(): ColGroupDef {\n        return this.colGroupDef;\n    }\n\n    public getLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n\n    private addLeafColumns(leafColumns: Column[]): void {\n        if (!this.children) {\n            return;\n        }\n        this.children.forEach((child: OriginalColumnGroupChild) => {\n            if (child instanceof Column) {\n                leafColumns.push(child as Column);\n            } else if (child instanceof OriginalColumnGroup) {\n                (child as OriginalColumnGroup).addLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    public getColumnGroupShow(): string | undefined {\n        return this.padding ? ColumnGroup.HEADER_GROUP_PADDING : this.colGroupDef.columnGroupShow;\n    }\n\n    // need to check that this group has at least one col showing when both expanded and contracted.\n    // if not, then we don't allow expanding and contracting on this group\n\n    public setupExpandable() {\n        this.setExpandable();\n        // note - we should be removing this event listener\n        this.getLeafColumns().forEach(col => col.addEventListener(Column.EVENT_VISIBLE_CHANGED, this.onColumnVisibilityChanged.bind(this)));\n    }\n\n    public setExpandable() {\n        if (this.isPadding()) { return; }\n        // want to make sure the group doesn't disappear when it's open\n        let atLeastOneShowingWhenOpen = false;\n        // want to make sure the group doesn't disappear when it's closed\n        let atLeastOneShowingWhenClosed = false;\n        // want to make sure the group has something to show / hide\n        let atLeastOneChangeable = false;\n\n        const children = this.findChildren();\n\n        for (let i = 0, j = children.length; i < j; i++) {\n            const abstractColumn = children[i];\n            if (!abstractColumn.isVisible()) {\n                continue;\n            }\n            // if the abstractColumn is a grid generated group, there will be no colDef\n            const headerGroupShow = abstractColumn.getColumnGroupShow();\n\n            if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_OPEN) {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneChangeable = true;\n            } else if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {\n                atLeastOneShowingWhenClosed = true;\n                atLeastOneChangeable = true;\n            } else {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneShowingWhenClosed = true;\n\n                if (headerGroupShow === ColumnGroup.HEADER_GROUP_PADDING) {\n                    const column = abstractColumn as OriginalColumnGroup;\n                    atLeastOneChangeable = atLeastOneChangeable || column.children.some(child => child.getColumnGroupShow() !== undefined);\n                }\n            }\n        }\n\n        const expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;\n\n        if (this.expandable !== expandable) {\n            this.expandable = expandable;\n            const event: AgEvent = {\n                type: OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED\n            };\n            this.localEventService.dispatchEvent(event);\n        }\n    }\n\n    public findChildren(): OriginalColumnGroupChild[] {\n        let children = this.children;\n        const firstChild = children[0] as any;\n\n        if (firstChild && (!firstChild.isPadding || !firstChild.isPadding())) { return children; }\n\n        while (children.length === 1 && children[0] instanceof OriginalColumnGroup) {\n            children = (children[0] as OriginalColumnGroup).children;\n        }\n\n        return children;\n    }\n\n    private onColumnVisibilityChanged(): void {\n        this.setExpandable();\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n}\n"]}