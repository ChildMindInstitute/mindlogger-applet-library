{"version":3,"sources":["../../src/ts/entities/colDef.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"colDef.js","sourcesContent":["import { RowNode } from \"./rowNode\";\nimport { ICellEditorComp, ICellEditorParams } from \"../interfaces/iCellEditor\";\nimport { ICellRendererComp, ICellRendererFunc, ICellRendererParams } from \"../rendering/cellRenderers/iCellRenderer\";\nimport { Column } from \"./column\";\nimport { IFilterComp } from \"../interfaces/iFilter\";\nimport { GridApi } from \"../gridApi\";\nimport { ColumnApi } from \"../columnController/columnApi\";\nimport { IHeaderGroupComp } from \"../headerRendering/headerGroup/headerGroupComp\";\nimport { IFloatingFilterComp } from \"../filter/floating/floatingFilter\";\nimport { CellClickedEvent, CellContextMenuEvent, CellDoubleClickedEvent } from \"../events\";\nimport { ITooltipComp, ITooltipParams } from \"../rendering/tooltipComponent\";\nimport { ComponentSelectorResult } from \"../components/framework/userComponentFactory\";\n\n/****************************************************************\n * Don't forget to update ComponentUtil if changing this class. PLEASE!*\n ****************************************************************/\n\n/** AbstractColDef can be a group or a column definition */\nexport interface AbstractColDef {\n    /** The name to render in the column header */\n    headerName?: string;\n    /** Whether to show the column when the group is open / closed. */\n    columnGroupShow?: string;\n    /** CSS class for the header */\n    headerClass?: string | string[] | ((params: any) => string | string[]);\n    /** CSS class for the header */\n    toolPanelClass?: string | string[] | ((params: any) => string | string[]);\n    /** Expression or function to get the cells value. */\n    headerValueGetter?: string | Function;\n    /** Never set this, it is used internally by grid when doing in-grid pivoting */\n    pivotKeys?: string[];\n\n    /** @deprecated since v22 - use suppressColumnsToolPanel / suppressFiltersToolPanel instead */\n    suppressToolPanel?: boolean;\n\n    /** Set to true to not include this column in the Columns Tool Panel */\n    suppressColumnsToolPanel?: boolean;\n\n    /** Set to true to not include this column / filter in the Filters Tool Panel */\n    suppressFiltersToolPanel?: boolean;\n\n    /** Tooltip for the column header */\n    headerTooltip?: string;\n\n    tooltipComponent?: { new(): ITooltipComp } | string;\n    tooltipComponentFramework?: any;\n    tooltipComponentParams?: any;\n}\n\nexport interface ColGroupDef extends AbstractColDef {\n    /** Columns in this group */\n    children: (ColDef | ColGroupDef)[];\n    /** Group ID */\n    groupId?: string;\n    /** Open by Default */\n    openByDefault?: boolean;\n    /** If true, group cannot be broken up by column moving, child columns will always appear side by side, however you can rearrange child columns within the group */\n    marryChildren?: boolean;\n    /** The custom header group component to be used for rendering the component header. If none specified the default ag-Grid is used**/\n    headerGroupComponent?: string | { new(): IHeaderGroupComp };\n    /** The custom header group component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default ag-Grid is used**/\n    headerGroupComponentFramework?: any;\n    /** The custom header group component to be used for rendering the component header. If none specified the default ag-Grid is used**/\n    headerGroupComponentParams?: any;\n}\n\nexport interface IAggFunc {\n    (input: any[]): any;\n}\n\n/****************************************************************\n * Don't forget to update ComponentUtil if changing this class. PLEASE!*\n ****************************************************************/\nexport interface ColDef extends AbstractColDef {\n\n    /** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n     *  If both field and colId are missing, a unique ID will be generated.\n     *  This ID is used to identify the column in the API for sorting, filtering etc. */\n    colId?: string;\n\n    /** If sorting by default, set it here. Set to 'asc' or 'desc' */\n    sort?: string;\n\n    /** If sorting more than one column by default, the milliseconds when this column was sorted, so we know what order to sort the columns in. */\n    sortedAt?: number;\n\n    /** The sort order, provide an array with any of the following in any order ['asc','desc',null] */\n    sortingOrder?: string[] | null;\n\n    /** The field of the row to get the cells data from */\n    field?: string;\n\n    /**\n     * A comma separated string or array of strings containing ColumnType keys which can be used as a template for a column.\n     * This helps to reduce duplication of properties when you have a lot of common column properties.\n     */\n    type?: string | string[];\n\n    /** Set to true for this column to be hidden. Naturally you might think, it would make more sense to call this field 'visible' and mark it false to hide,\n     *  however we want all default values to be false and we want columns to be visible by default. */\n    hide?: boolean;\n\n    /** Whether this column is pinned or not. */\n    pinned?: boolean | string;\n\n    /** The field where we get the tooltip on the object */\n    tooltipField?: string;\n\n    /** @deprecated since v20.1, use colDef.tooltipValueGetter instead*/\n    tooltip?: (params: ITooltipParams) => string;\n\n    /** The function used to calculate the tooltip of the object, tooltipField takes precedence*/\n    tooltipValueGetter?: (params: ITooltipParams) => string;\n\n    /** Expression or function to get the cells value. */\n    valueGetter?: ((params: ValueGetterParams) => any) | string;\n\n    /** Expression or function to get the cells value for filtering. */\n    filterValueGetter?: ((params: ValueGetterParams) => any) | string;\n\n    /** If not using a field, then this puts the value into the cell */\n    valueSetter?: ((params: ValueSetterParams) => boolean) | string;\n\n    /** Function to return the key for a value - use this if the value is an object (not a primitive type) and you\n     * want to a) group by this field or b) use set filter on this field. */\n    keyCreator?: (value: any) => string;\n\n    /** Initial width, in pixels, of the cell */\n    width?: number;\n\n    /** Min width, in pixels, of the cell */\n    minWidth?: number;\n\n    /** Max width, in pixels, of the cell */\n    maxWidth?: number;\n\n    /** Sets the grow factor of a column. It specifies how much of the remaining\n     * space should be assigned to the column.\n     */\n    flex?: number;\n\n    /** True if this column should stretch rows height to fit contents */\n    autoHeight?: boolean;\n\n    /** Class to use for the cell. Can be string, array of strings, or function. */\n    cellClass?: string | string[] | ((cellClassParams: CellClassParams) => string | string[]);\n\n    /** An object of css values. Or a function returning an object of css values. */\n    cellStyle?: {} | ((params: any) => {});\n\n    /** A function for rendering a cell. */\n    cellRenderer?: { new(): ICellRendererComp } | ICellRendererFunc | string;\n    cellRendererFramework?: any;\n    cellRendererParams?: any;\n    cellRendererSelector?: (params: ICellRendererParams) => ComponentSelectorResult;\n\n    /** Cell editor */\n    cellEditor?: { new(): ICellEditorComp } | string ;\n    cellEditorFramework?: any;\n    cellEditorParams?: any;\n    cellEditorSelector?: (params: ICellEditorParams) => ComponentSelectorResult;\n\n    /** A function for rendering a pinned row cell. */\n    pinnedRowCellRenderer?: { new(): ICellRendererComp } | ICellRendererFunc | string;\n    pinnedRowCellRendererFramework?: any;\n    pinnedRowCellRendererParams?: any;\n\n    /** A function to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */\n    valueFormatter?: (params: ValueFormatterParams) => string | string;\n    /** A function to format a pinned row value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */\n    pinnedRowValueFormatter?: (params: ValueFormatterParams) => string | string;\n\n    /** Gets called after editing, converts the value in the cell. */\n    valueParser?: (params: ValueParserParams) => any | string;\n\n    /** Name of function to use for aggregation. One of [sum,min,max,first,last] or a function. */\n    aggFunc?: string | IAggFunc;\n\n    /** Agg funcs allowed on this column. If missing, all installed agg funcs are allowed.\n     * Can be eg ['sum','avg']. This will restrict what the GUI allows to select only.*/\n    allowedAggFuncs?: string[];\n\n    /** To group by this column by default, either provide an index (eg rowGroupIndex=1), or set rowGroup=true. */\n    rowGroupIndex?: number;\n    rowGroup?: boolean;\n\n    /** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group. */\n    showRowGroup?: string | boolean;\n\n    /** To pivot by this column by default, either provide an index (eg pivotIndex=1), or set pivot=true. */\n    pivotIndex?: number;\n    pivot?: boolean;\n\n    /** Comparator function for custom sorting. */\n    comparator?: (valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, isInverted: boolean) => number;\n\n    /** Comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed. */\n    equals?: (valueA: any, valueB: any) => boolean;\n\n    /** Comparator for ordering the pivot columns */\n    pivotComparator?: (valueA: string, valueB: string) => number;\n\n    /** Set to true to render a selection checkbox in the column. */\n    checkboxSelection?: boolean | ((params: any) => boolean) | null;\n\n    /** If true, a 'select all' checkbox will be put into the header */\n    headerCheckboxSelection?: boolean | ((params: any) => boolean);\n\n    /** If true, the header checkbox selection will work on filtered items*/\n    headerCheckboxSelectionFilteredOnly?: boolean;\n\n    /** For grid row dragging, set to true to enable row dragging within the grid */\n    rowDrag?: boolean | ((params: any) => boolean);\n\n    /** For native drag and drop, set to true to enable drag source */\n    dndSource?: boolean | ((params: any) => boolean);\n\n    /** For native drag and drop, set to true to allow custom onRowDrag processing */\n    dndSourceOnRowDrag?: ((params: {rowNode: RowNode, dragEvent: DragEvent}) => void);\n\n    /** Set to true if no menu should be shown for this column header. */\n    suppressMenu?: boolean;\n\n    /** The menu tabs to show, and in which order, the valid values for this property are:\n     * filterMenuTab, generalMenuTab, columnsMenuTab **/\n    menuTabs?: string[];\n\n    /** Set to true if sorting allowed for this column. */\n    sortable?: boolean;\n\n    /** @deprecated since v20, use colDef.sortable=false instead */\n    suppressSorting?: boolean;\n\n    /** Set to true to not allow moving this column via dragging it's header */\n    suppressMovable?: boolean;\n\n    /** Set to true to not flash this column for value changes */\n    suppressCellFlash?: boolean;\n\n    /** Set to true to make sure this column is always first. Other columns, if movable, cannot move before this column. */\n    lockPosition?: boolean;\n\n    /** Set to true to block the user showing / hiding the column, the column can only be shown / hidden via definitions or API */\n    lockVisible?: boolean;\n\n    /** Set to true to block the user pinning the column, the column can only be pinned via definitions or API */\n    lockPinned?: boolean;\n\n    /** @deprecated since v20, use colDef.filter=false instead */\n    suppressFilter?: boolean;\n\n    /** Set to true if you want the unsorted icon to be shown when no sort is applied to this column. */\n    unSortIcon?: boolean;\n\n    /** Set to true if you want this columns width to be fixed during 'size to fit' operation. */\n    suppressSizeToFit?: boolean;\n\n    /** @deprecated since v20, use colDef.resizable=false instead */\n    suppressResize?: boolean;\n\n    /** Set to true if this column should be resizable */\n    resizable?: boolean;\n\n    /** Set to true if you do not want this column to be auto-resizable by double clicking it's edge. */\n    suppressAutoSize?: boolean;\n\n    /** Allows user to suppress certain keyboard events */\n    suppressKeyboardEvent?: (params: SuppressKeyboardEventParams) => boolean;\n\n    /** If true, GUI will allow adding this columns as a row group */\n    enableRowGroup?: boolean;\n\n    /** If true, GUI will allow adding this columns as a pivot */\n    enablePivot?: boolean;\n\n    /** If true, GUI will allow adding this columns as a value */\n    enableValue?: boolean;\n\n    /** Set to true if this col is editable, otherwise false. Can also be a function to have different rows editable. */\n    editable?: boolean | IsColumnFunc;\n\n    colSpan?: (params: ColSpanParams) => number;\n\n    rowSpan?: (params: RowSpanParams) => number;\n\n    /** Set to true if this col should not be allowed take new values from teh clipboard . */\n    suppressPaste?: boolean | IsColumnFunc;\n\n    /** Set to tru if this col should not be navigable with the tab key. Can also be a function to have different rows editable. */\n    suppressNavigable?: boolean | IsColumnFunc;\n\n    /** To create the quick filter text for this column, if toString is not good enough on the value. */\n    getQuickFilterText?: (params: GetQuickFilterTextParams) => string;\n\n    /** Callbacks for editing. See editing section for further details.\n     * Return true if the update was successful, or false if not.\n     * If false, then skips the UI refresh and no events are emitted.\n     * Return false if the values are the same (ie no update). */\n    newValueHandler?: (params: any) => boolean;\n\n    /** If true, this cell will be in editing mode after first click. */\n    singleClickEdit?: boolean;\n\n    /** Cell template to use for cell. Useful for AngularJS cells. */\n    template?: string;\n\n    /** Cell template URL to load template from to use for cell. Useful for AngularJS cells. */\n    templateUrl?: string;\n\n    /** one of the built in filter names: [set, number, text], or a filter function*/\n    filter?: string | { new(): IFilterComp } | boolean;\n\n    filterFramework?: any;\n\n    /** The filter params are specific to each filter! */\n    filterParams?: any;\n\n    /** Rules for applying css classes */\n    cellClassRules?: { [cssClassName: string]: (Function | string) };\n\n    /** Callbacks for editing.See editing section for further details. */\n    onCellValueChanged?: Function;\n\n    /** Function callback, gets called when a cell is clicked. */\n    onCellClicked?: (event: CellClickedEvent) => void;\n\n    /** Function callback, gets called when a cell is double clicked. */\n    onCellDoubleClicked?: (event: CellDoubleClickedEvent) => void;\n\n    /** Function callback, gets called when a cell is right clicked. */\n    onCellContextMenu?: (event: CellContextMenuEvent) => void;\n\n    /** Icons for this column. Leave blank to use default. */\n    icons?: { [key: string]: string };\n\n    /** If true, grid will flash cell after cell is refreshed */\n    enableCellChangeFlash?: boolean;\n\n    /** Never set this, it is used internally by grid when doing in-grid pivoting */\n    pivotValueColumn?: Column | null;\n\n    /** Never set this, it is used internally by grid when doing in-grid pivoting */\n    pivotTotalColumnIds?: string[];\n\n    /** The custom header component to be used for rendering the component header. If none specified the default ag-Grid is used**/\n    headerComponent?: string | { new(): any };\n    /** The custom header component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default ag-Grid is used**/\n    headerComponentFramework?: any;\n    /** The custom header component parameters**/\n    headerComponentParams?: any;\n\n    /** The custom header component to be used for rendering the floating filter. If none specified the default ag-Grid is used**/\n    floatingFilterComponent?: string | { new(): IFloatingFilterComp };\n    floatingFilterComponentParams?: any;\n    floatingFilterComponentFramework?: any;\n\n    refData?: { [key: string]: string };\n\n    /** Defines the column data type used when charting, i.e. 'category' | 'series' | 'excluded' | undefined **/\n    chartDataType?: string;\n}\n\nexport interface IsColumnFunc {\n    (params: IsColumnFuncParams): boolean;\n}\n\nexport interface IsColumnFuncParams {\n    node: RowNode;\n    data: any;\n    column: Column;\n    colDef: ColDef;\n    context: any;\n    api: GridApi | null | undefined;\n    columnApi: ColumnApi | null | undefined;\n}\n\nexport interface GetQuickFilterTextParams {\n    value: any;\n    node: RowNode;\n    data: any;\n    column: Column;\n    colDef: ColDef;\n    context: any;\n}\n\nexport interface BaseColDefParams {\n    node: RowNode;\n    data: any;\n    colDef: ColDef;\n    column: Column;\n    api: GridApi | null | undefined;\n    columnApi: ColumnApi | null | undefined;\n    context: any;\n}\n\nexport interface BaseWithValueColDefParams extends BaseColDefParams {\n    value: any;\n}\n\nexport interface ValueGetterParams extends BaseColDefParams {\n    getValue: (field: string) => any;\n}\n\nexport interface NewValueParams extends BaseColDefParams {\n    oldValue: any;\n    newValue: any;\n}\n\nexport interface ValueSetterParams extends NewValueParams {\n}\n\nexport interface ValueParserParams extends NewValueParams {\n}\n\nexport interface ValueFormatterParams extends BaseWithValueColDefParams {\n}\n\nexport interface ColSpanParams extends BaseColDefParams {\n}\n\nexport interface RowSpanParams extends BaseColDefParams {\n}\n\nexport interface SuppressKeyboardEventParams extends IsColumnFuncParams {\n    // the keyboard event the grid received\n    event: KeyboardEvent;\n    // whether the cell is editing or not\n    editing: boolean;\n}\n\nexport interface CellClassParams {\n    value: any;\n    data: any;\n    node: RowNode;\n    colDef: ColDef;\n    rowIndex: number;\n    $scope: any;\n    api: GridApi;\n    columnApi: ColumnApi;\n    context: any;\n}\n"]}