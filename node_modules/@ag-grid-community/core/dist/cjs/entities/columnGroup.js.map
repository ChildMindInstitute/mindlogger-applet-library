{"version":3,"sources":["../../src/ts/entities/columnGroup.ts"],"names":[],"mappings":"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","file":"columnGroup.js","sourcesContent":["import { ColumnGroupChild } from \"./columnGroupChild\";\nimport { ColGroupDef } from \"./colDef\";\nimport { Column } from \"./column\";\nimport { AbstractColDef } from \"./colDef\";\nimport { OriginalColumnGroup } from \"./originalColumnGroup\";\nimport { EventService } from \"../eventService\";\nimport { Autowired } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { AgEvent } from \"../events\";\nimport { _ } from \"../utils\";\n\nexport class ColumnGroup implements ColumnGroupChild {\n\n    public static HEADER_GROUP_SHOW_OPEN = 'open';\n    public static HEADER_GROUP_SHOW_CLOSED = 'closed';\n    public static HEADER_GROUP_PADDING = 'padding';\n\n    public static EVENT_LEFT_CHANGED = 'leftChanged';\n    public static EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';\n\n    // this is static, a it is used outside of this class\n    public static createUniqueId(groupId: string, instanceId: number): string {\n        return groupId + '_' + instanceId;\n    }\n\n    @Autowired('gridOptionsWrapper') gridOptionsWrapper: GridOptionsWrapper;\n\n    // all the children of this group, regardless of whether they are opened or closed\n    private children: ColumnGroupChild[];\n    // depends on the open/closed state of the group, only displaying columns are stored here\n    private displayedChildren: ColumnGroupChild[] = [];\n\n    private readonly groupId: string;\n    private readonly instanceId: number;\n    private readonly originalColumnGroup: OriginalColumnGroup;\n    private readonly pinned: string;\n\n    // private moving = false\n    private left: number;\n    private oldLeft: number;\n    private localEventService: EventService = new EventService();\n\n    private parent: ColumnGroup;\n\n    constructor(originalColumnGroup: OriginalColumnGroup, groupId: string, instanceId: number, pinned: string) {\n        this.groupId = groupId;\n        this.instanceId = instanceId;\n        this.originalColumnGroup = originalColumnGroup;\n        this.pinned = pinned;\n    }\n\n    // as the user is adding and removing columns, the groups are recalculated.\n    // this reset clears out all children, ready for children to be added again\n    public reset(): void {\n        this.parent = null;\n        this.children = null;\n        this.displayedChildren = null;\n    }\n\n    public getParent(): ColumnGroup {\n        return this.parent;\n    }\n\n    public setParent(parent: ColumnGroup): void {\n        this.parent = parent;\n    }\n\n    public getUniqueId(): string {\n        return ColumnGroup.createUniqueId(this.groupId, this.instanceId);\n    }\n\n    public isEmptyGroup(): boolean {\n        return this.displayedChildren.length === 0;\n    }\n\n    public isMoving(): boolean {\n        const allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();\n        if (!allLeafColumns || allLeafColumns.length === 0) { return false; }\n\n        return allLeafColumns.every(col => col.isMoving());\n    }\n\n    public checkLeft(): void {\n        // first get all children to setLeft, as it impacts our decision below\n        this.displayedChildren.forEach((child: ColumnGroupChild) => {\n            if (child instanceof ColumnGroup) {\n                (child as ColumnGroup).checkLeft();\n            }\n        });\n\n        // set our left based on first displayed column\n        if (this.displayedChildren.length > 0) {\n            if (this.gridOptionsWrapper.isEnableRtl()) {\n                const lastChild = _.last(this.displayedChildren);\n                const lastChildLeft = lastChild.getLeft();\n                this.setLeft(lastChildLeft);\n            } else {\n                const firstChildLeft = this.displayedChildren[0].getLeft();\n                this.setLeft(firstChildLeft);\n            }\n        } else {\n            // this should never happen, as if we have no displayed columns, then\n            // this groups should not even exist.\n            this.setLeft(null);\n        }\n    }\n\n    public getLeft(): number {\n        return this.left;\n    }\n\n    public getOldLeft(): number {\n        return this.oldLeft;\n    }\n\n    public setLeft(left: number) {\n        this.oldLeft = left;\n        if (this.left !== left) {\n            this.left = left;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));\n        }\n    }\n\n    public getPinned(): string {\n        return this.pinned;\n    }\n\n    private createAgEvent(type: string): AgEvent {\n        return { type };\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    public getInstanceId(): number {\n        return this.instanceId;\n    }\n\n    public isChildInThisGroupDeepSearch(wantedChild: ColumnGroupChild): boolean {\n        let result = false;\n\n        this.children.forEach((foundChild: ColumnGroupChild) => {\n            if (wantedChild === foundChild) {\n                result = true;\n            }\n            if (foundChild instanceof ColumnGroup) {\n                if ((foundChild as ColumnGroup).isChildInThisGroupDeepSearch(wantedChild)) {\n                    result = true;\n                }\n            }\n        });\n\n        return result;\n    }\n\n    public getActualWidth(): number {\n        let groupActualWidth = 0;\n        if (this.displayedChildren) {\n            this.displayedChildren.forEach((child: ColumnGroupChild) => {\n                groupActualWidth += child.getActualWidth();\n            });\n        }\n        return groupActualWidth;\n    }\n\n    public isResizable(): boolean {\n        if (!this.displayedChildren) { return false; }\n\n        // if at least one child is resizable, then the group is resizable\n        let result = false;\n        this.displayedChildren.forEach((child: ColumnGroupChild) => {\n            if (child.isResizable()) {\n                result = true;\n            }\n        });\n\n        return result;\n    }\n\n    public getMinWidth(): number {\n        let result = 0;\n        this.displayedChildren.forEach((groupChild: ColumnGroupChild) => {\n            result += groupChild.getMinWidth();\n        });\n        return result;\n    }\n\n    public addChild(child: ColumnGroupChild): void {\n        if (!this.children) {\n            this.children = [];\n        }\n        this.children.push(child);\n    }\n\n    public getDisplayedChildren(): ColumnGroupChild[] {\n        return this.displayedChildren;\n    }\n\n    public getLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n\n    public getDisplayedLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addDisplayedLeafColumns(result);\n        return result;\n    }\n\n    // why two methods here doing the same thing?\n    public getDefinition(): AbstractColDef {\n        return this.originalColumnGroup.getColGroupDef();\n    }\n\n    public getColGroupDef(): ColGroupDef {\n        return this.originalColumnGroup.getColGroupDef();\n    }\n\n    public isPadding(): boolean {\n        return this.originalColumnGroup.isPadding();\n    }\n\n    public isExpandable(): boolean {\n        return this.originalColumnGroup.isExpandable();\n    }\n\n    public isExpanded(): boolean {\n        return this.originalColumnGroup.isExpanded();\n    }\n\n    public setExpanded(expanded: boolean): void {\n        this.originalColumnGroup.setExpanded(expanded);\n    }\n\n    private addDisplayedLeafColumns(leafColumns: Column[]): void {\n        this.displayedChildren.forEach((child: ColumnGroupChild) => {\n            if (child instanceof Column) {\n                leafColumns.push(child as Column);\n            } else if (child instanceof ColumnGroup) {\n                (child as ColumnGroup).addDisplayedLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    private addLeafColumns(leafColumns: Column[]): void {\n        this.children.forEach((child: ColumnGroupChild) => {\n            if (child instanceof Column) {\n                leafColumns.push(child as Column);\n            } else if (child instanceof ColumnGroup) {\n                (child as ColumnGroup).addLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    public getChildren(): ColumnGroupChild[] {\n        return this.children;\n    }\n\n    public getColumnGroupShow(): string | undefined {\n        return this.originalColumnGroup.getColumnGroupShow();\n    }\n\n    public getOriginalColumnGroup(): OriginalColumnGroup {\n        return this.originalColumnGroup;\n    }\n\n    public calculateDisplayedColumns() {\n        // clear out last time we calculated\n        this.displayedChildren = [];\n        let topLevelGroup: ColumnGroup = this;\n\n        // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n        // groups, where the expandable is actually the first parent that is not a padding group.\n        if (this.isPadding()) {\n            while (topLevelGroup.getParent() && topLevelGroup.isPadding()) {\n                topLevelGroup = topLevelGroup.getParent();\n            }\n        }\n\n        const isExpandable = topLevelGroup.originalColumnGroup.isExpandable();\n        // it not expandable, everything is visible\n        if (!isExpandable) {\n            this.displayedChildren = this.children;\n        } else {\n            // Add cols based on columnGroupShow\n            // Note - the below also adds padding groups, these are always added because they never have\n            // colDef.columnGroupShow set.\n            this.children.forEach(abstractColumn => {\n                const headerGroupShow = abstractColumn.getColumnGroupShow();\n                switch (headerGroupShow) {\n                    case ColumnGroup.HEADER_GROUP_SHOW_OPEN:\n                        // when set to open, only show col if group is open\n                        if (topLevelGroup.originalColumnGroup.isExpanded()) {\n                            this.displayedChildren.push(abstractColumn);\n                        }\n                        break;\n                    case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:\n                        // when set to open, only show col if group is open\n                        if (!topLevelGroup.originalColumnGroup.isExpanded()) {\n                            this.displayedChildren.push(abstractColumn);\n                        }\n                        break;\n                    default:\n                        // if this abstractColumn is padding, we just want to add it\n                        // to the displayedChildren list if it has displayedChildren itself.\n                        if (!(\n                            abstractColumn instanceof ColumnGroup &&\n                            abstractColumn.isPadding() &&\n                            !abstractColumn.displayedChildren.length)\n                        ) {\n                            this.displayedChildren.push(abstractColumn);\n                        }\n                        break;\n                }\n            });\n        }\n\n        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n    }\n}\n"]}