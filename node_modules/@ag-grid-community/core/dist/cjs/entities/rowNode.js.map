{"version":3,"sources":["../../src/ts/entities/rowNode.ts"],"names":[],"mappings":"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","file":"rowNode.js","sourcesContent":["import { EventService } from \"../eventService\";\nimport { AgEvent, Events, RowEvent, RowGroupOpenedEvent, RowSelectedEvent, SelectionChangedEvent } from \"../events\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { SelectionController } from \"../selectionController\";\nimport { Column } from \"./column\";\nimport { ValueService } from \"../valueService/valueService\";\nimport { ColumnController } from \"../columnController/columnController\";\nimport { ColumnApi } from \"../columnController/columnApi\";\nimport { Autowired, Context } from \"../context/context\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { Constants } from \"../constants\";\nimport { RowNodeCache, RowNodeCacheParams } from \"../modules/rowNodeCache/rowNodeCache\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { ValueCache } from \"../valueService/valueCache\";\nimport { DetailGridInfo, GridApi } from \"../gridApi\";\nimport { _ } from \"../utils\";\nimport {IRowNodeBlock} from \"../interfaces/iRowNodeBlock\";\n\nexport interface SetSelectedParams {\n    // true or false, whatever you want to set selection to\n    newValue: boolean;\n    // whether to remove other selections after this selection is done\n    clearSelection?: boolean;\n    // true when action is NOT on this node, ie user clicked a group and this is the child of a group\n    suppressFinishActions?: boolean;\n    // gets used when user shift-selects a range\n    rangeSelect?: boolean;\n    // used in group selection, if true, filtered out children will not be selected\n    groupSelectsFiltered?: boolean;\n}\n\nexport interface RowNodeEvent extends AgEvent {\n    node: RowNode;\n}\n\nexport interface DataChangedEvent extends RowNodeEvent {\n    oldData: any;\n    newData: any;\n    update: boolean;\n}\n\nexport interface CellChangedEvent extends RowNodeEvent {\n    column: Column;\n    newValue: any;\n}\n\nexport class RowNode implements IEventEmitter {\n\n    private static OBJECT_ID_SEQUENCE = 0;\n\n    public static EVENT_ROW_SELECTED = 'rowSelected';\n    public static EVENT_DATA_CHANGED = 'dataChanged';\n    public static EVENT_CELL_CHANGED = 'cellChanged';\n    public static EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';\n    public static EVENT_MOUSE_ENTER = 'mouseEnter';\n    public static EVENT_MOUSE_LEAVE = 'mouseLeave';\n    public static EVENT_HEIGHT_CHANGED = 'heightChanged';\n    public static EVENT_TOP_CHANGED = 'topChanged';\n    public static EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';\n    public static EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';\n    public static EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';\n    public static EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';\n    public static EVENT_EXPANDED_CHANGED = 'expandedChanged';\n    public static EVENT_SELECTABLE_CHANGED = 'selectableChanged';\n    public static EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';\n    public static EVENT_DRAGGING_CHANGED = 'draggingChanged';\n\n    @Autowired('eventService') private mainEventService: EventService;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('selectionController') private selectionController: SelectionController;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('context') private context: Context;\n    @Autowired('valueCache') private valueCache: ValueCache;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    /** Unique ID for the node. Either provided by the grid, or user can set to match the primary\n     * key in the database (or whatever data source is used). */\n    public id: string;\n    /** The group data */\n    public groupData: any;\n    /** The aggregated data */\n    public aggData: any;\n    /** The user provided data */\n    public data: any;\n    /** The parent node to this node, or empty if top level */\n    public parent: RowNode | null;\n    /** How many levels this node is from the top */\n    public level: number;\n    /** How many levels this node is from the top in the UI (different to the level when removing parents)*/\n    public uiLevel: number;\n    /** If doing in memory grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups ie groupRemoveSingleChildren = true */\n    public rowGroupIndex: number | null;\n    /** True if this node is a group node (ie has children) */\n    public group: boolean | undefined;\n    /** True if this row is getting dragged */\n    public dragging: boolean;\n\n    /** True if this row is a master row, part of master / detail (ie row can be expanded to show detail) */\n    public master: boolean;\n    /** True if this row is a detail row, part of master / detail (ie child row of an expanded master row)*/\n    public detail: boolean;\n    /** If this row is a master row that was expanded, this points to the associated detail row. */\n    public detailNode: RowNode;\n    /** If master detail, this contains details about the detail grid */\n    public detailGridInfo: DetailGridInfo | null;\n\n    /** Same as master, kept for legacy reasons */\n    public canFlower: boolean;\n    /** Same as detail, kept for legacy reasons */\n    public flower: boolean;\n    /** Same as detailNode, kept for legacy reasons */\n    public childFlower: RowNode;\n\n    /** True if this node is a group and the group is the bottom level in the tree */\n    public leafGroup: boolean;\n    /** True if this is the first child in this group */\n    public firstChild: boolean;\n    /** True if this is the last child in this group */\n    public lastChild: boolean;\n    /** The index of this node in the group */\n    public childIndex: number;\n    /** The index of this node in the grid, only valid if node is displayed in the grid, otherwise it should be ignored as old index may be present */\n    public rowIndex: number;\n    /** Either 'top' or 'bottom' if row pinned, otherwise undefined or null */\n    public rowPinned: string;\n    /** If using quick filter, stores a string representation of the row for searching against */\n    public quickFilterAggregateText: string;\n    /** Groups only - True if row is a footer. Footers  have group = true and footer = true */\n    public footer: boolean;\n    /** Groups only - The field we are grouping on eg Country*/\n    public field: string | null;\n    /** Groups only - the row group column for this group */\n    public rowGroupColumn: Column | null;\n    /** Groups only - The key for the group eg Ireland, UK, USA */\n    public key: any;\n    /** Used by server side row model, true if this row node is a stub */\n    public stub: boolean;\n\n    /** All user provided nodes */\n    public allLeafChildren: RowNode[];\n\n    /** Groups only - Children of this group */\n    public childrenAfterGroup: RowNode[];\n    /** Groups only - Filtered children of this group */\n    public childrenAfterFilter: RowNode[];\n    /** Groups only - Sorted children of this group */\n    public childrenAfterSort: RowNode[];\n    /** Groups only - Number of children and grand children */\n    public allChildrenCount: number | null;\n\n    /** Children mapped by the pivot columns */\n    public childrenMapped: { [key: string]: any } | null = {};\n\n    /** Server Side Row Model Only - the children are in an infinite cache */\n    public childrenCache: RowNodeCache<IRowNodeBlock, RowNodeCacheParams> | null;\n\n    /** Groups only - True if group is expanded, otherwise false */\n    public expanded: boolean;\n    /** Groups only - If doing footers, reference to the footer node for this group */\n    public sibling: RowNode;\n\n    /** The height, in pixels, of this row */\n    public rowHeight: number;\n    /** Dynamic row heights are done on demand, only when row is visible. However for row virtualisation\n     * we need a row height to do the 'what rows are in viewport' maths. So we assign a row height to each\n     * row based on defaults and rowHeightEstimated=true, then when the row is needed for drawing we do\n     * the row height calculation and set rowHeightEstimated=false.*/\n    public rowHeightEstimated: boolean;\n    /** The top pixel for this row */\n    public rowTop: number;\n    /** The top pixel for this row last time, makes sense if data set was ordered or filtered,\n     * it is used so new rows can animate in from their old position. */\n    public oldRowTop: number;\n    /** True if this node is a daemon. This means row is not part of the model. Can happen when then\n     * the row is selected and then the user sets a different ID onto the node. The nodes is then\n     * representing a different entity, so the selection controller, if the node is selected, takes\n     * a copy where daemon=true. */\n    public daemon: boolean;\n\n    /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n    public selectable = true;\n\n    /** Used by the value service, stores values for a particular change detection turn. */\n    public __cacheData: { [colId: string]: any };\n    public __cacheVersion: number;\n\n    /** Used by sorting service - to give deterministic sort to groups. Previously we\n     * just id for this, however id is a string and had slower sorting compared to numbers. */\n    public __objectId: number = RowNode.OBJECT_ID_SEQUENCE++;\n\n    /** True when nodes with the same id are being removed and added as part of the same batch transaction */\n    public alreadyRendered = false;\n\n    private selected = false;\n    private eventService: EventService;\n\n    public setData(data: any): void {\n        const oldData = this.data;\n        this.data = data;\n\n        this.valueCache.onDataChanged();\n\n        this.updateDataOnDetailNode();\n\n        this.checkRowSelectable();\n\n        const event: DataChangedEvent = this.createDataChangedEvent(data, oldData, false);\n        this.dispatchLocalEvent(event);\n    }\n\n    // when we are doing master / detail, the detail node is lazy created, but then kept around.\n    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n    // in sync, otherwise expand/collapse of the detail would still show the old values.\n    private updateDataOnDetailNode(): void {\n        if (this.detailNode) {\n            this.detailNode.data = this.data;\n        }\n    }\n\n    private createDataChangedEvent(newData: any, oldData: any, update: boolean): DataChangedEvent {\n        return {\n            type: RowNode.EVENT_DATA_CHANGED,\n            node: this,\n            oldData: oldData,\n            newData: newData,\n            update: update\n        };\n    }\n\n    private createLocalRowEvent(type: string): RowNodeEvent {\n        return {\n            type: type,\n            node: this\n        };\n    }\n\n    // similar to setRowData, however it is expected that the data is the same data item. this\n    // is intended to be used with Redux type stores, where the whole data can be changed. we are\n    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n    public updateData(data: any): void {\n        const oldData = this.data;\n        this.data = data;\n\n        this.updateDataOnDetailNode();\n\n        this.checkRowSelectable();\n\n        this.updateDataOnDetailNode();\n\n        const event: DataChangedEvent = this.createDataChangedEvent(data, oldData, true);\n        this.dispatchLocalEvent(event);\n    }\n\n    public getRowIndexString(): string {\n        if (this.rowPinned === Constants.PINNED_TOP) {\n            return 't-' + this.rowIndex;\n        } else if (this.rowPinned === Constants.PINNED_BOTTOM) {\n            return 'b-' + this.rowIndex;\n        } else {\n            return this.rowIndex.toString();\n        }\n    }\n\n    private createDaemonNode(): RowNode {\n        const oldNode = new RowNode();\n        this.context.wireBean(oldNode);\n        // just copy the id and data, this is enough for the node to be used\n        // in the selection controller (the selection controller is the only\n        // place where daemon nodes can live).\n        oldNode.id = this.id;\n        oldNode.data = this.data;\n        oldNode.daemon = true;\n        oldNode.selected = this.selected;\n        oldNode.level = this.level;\n        return oldNode;\n    }\n\n    public setDataAndId(data: any, id: string | undefined): void {\n        const oldNode = _.exists(this.id) ? this.createDaemonNode() : null;\n\n        const oldData = this.data;\n        this.data = data;\n        this.updateDataOnDetailNode();\n\n        this.setId(id);\n\n        this.selectionController.syncInRowNode(this, oldNode);\n\n        this.checkRowSelectable();\n\n        const event: DataChangedEvent = this.createDataChangedEvent(data, oldData, false);\n        this.dispatchLocalEvent(event);\n    }\n\n    private checkRowSelectable() {\n        const isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n        const shouldInvokeIsRowSelectable = isRowSelectableFunc && _.exists(this);\n        this.setRowSelectable(shouldInvokeIsRowSelectable ? isRowSelectableFunc(this) : true);\n    }\n\n    public setRowSelectable(newVal: boolean) {\n        if (this.selectable !== newVal) {\n            this.selectable = newVal;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));\n            }\n        }\n    }\n\n    public setId(id: string): void {\n        // see if user is providing the id's\n        const getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();\n        if (getRowNodeId) {\n            // if user is providing the id's, then we set the id only after the data has been set.\n            // this is important for virtual pagination and viewport, where empty rows exist.\n            if (this.data) {\n                this.id = getRowNodeId(this.data);\n            } else {\n                // this can happen if user has set blank into the rowNode after the row previously\n                // having data. this happens in virtual page row model, when data is delete and\n                // the page is refreshed.\n                this.id = undefined;\n            }\n        } else {\n            this.id = id;\n        }\n    }\n\n    public isPixelInRange(pixel: number): boolean {\n        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);\n    }\n\n    public clearRowTop(): void {\n        this.oldRowTop = this.rowTop;\n        this.setRowTop(null);\n    }\n\n    public setFirstChild(firstChild: boolean): void {\n        if (this.firstChild === firstChild) {\n            return;\n        }\n        this.firstChild = firstChild;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));\n        }\n    }\n\n    public setLastChild(lastChild: boolean): void {\n        if (this.lastChild === lastChild) {\n            return;\n        }\n        this.lastChild = lastChild;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));\n        }\n    }\n\n    public setChildIndex(childIndex: number): void {\n        if (this.childIndex === childIndex) {\n            return;\n        }\n        this.childIndex = childIndex;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));\n        }\n    }\n\n    public setRowTop(rowTop: number | null): void {\n        if (this.rowTop === rowTop) {\n            return;\n        }\n        this.rowTop = rowTop;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));\n        }\n    }\n\n    public setDragging(dragging: boolean): void {\n        if (this.dragging === dragging) {\n            return;\n        }\n        this.dragging = dragging;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));\n        }\n    }\n\n    public setAllChildrenCount(allChildrenCount: number | null): void {\n        if (this.allChildrenCount === allChildrenCount) {\n            return;\n        }\n        this.allChildrenCount = allChildrenCount;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));\n        }\n    }\n\n    public setRowHeight(rowHeight: number | undefined | null, estimated = false): void {\n        this.rowHeight = rowHeight;\n        this.rowHeightEstimated = estimated;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));\n        }\n    }\n\n    public setRowIndex(rowIndex: number): void {\n        this.rowIndex = rowIndex;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));\n        }\n    }\n\n    public setUiLevel(uiLevel: number): void {\n        if (this.uiLevel === uiLevel) {\n            return;\n        }\n\n        this.uiLevel = uiLevel;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));\n        }\n    }\n\n    public setExpanded(expanded: boolean): void {\n        if (this.expanded === expanded) {\n            return;\n        }\n\n        this.expanded = expanded;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));\n        }\n\n        const event: RowGroupOpenedEvent = this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED);\n        this.mainEventService.dispatchEvent(event);\n\n        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {\n            this.gridApi.redrawRows({rowNodes: [this]});\n        }\n    }\n\n    private createGlobalRowEvent(type: string): RowEvent {\n        const event: RowGroupOpenedEvent = {\n            type: type,\n            node: this,\n            data: this.data,\n            rowIndex: this.rowIndex,\n            rowPinned: this.rowPinned,\n            context: this.gridOptionsWrapper.getContext(),\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi()\n        };\n        return event;\n    }\n\n    private dispatchLocalEvent(event: AgEvent): void {\n        if (this.eventService) {\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    // we also allow editing the value via the editors. when it is done via\n    // the editors, no 'cell changed' event gets fired, as it's assumed that\n    // the cell knows about the change given it's in charge of the editing.\n    // this method is for the client to call, so the cell listens for the change\n    // event, and also flashes the cell when the change occurs.\n    public setDataValue(colKey: string | Column, newValue: any): void {\n        const column = this.columnController.getPrimaryColumn(colKey);\n        this.valueService.setValue(this, column, newValue);\n        this.dispatchCellChangedEvent(column, newValue);\n    }\n\n    public setGroupValue(colKey: string | Column, newValue: any): void {\n        const column = this.columnController.getGridColumn(colKey);\n\n        if (_.missing(this.groupData)) {\n            this.groupData = {};\n        }\n\n        this.groupData[column.getColId()] = newValue;\n        this.dispatchCellChangedEvent(column, newValue);\n    }\n\n    // sets the data for an aggregation\n    public setAggData(newAggData: any): void {\n\n        // find out all keys that could potentially change\n        const colIds = _.getAllKeysInObjects([this.aggData, newAggData]);\n\n        this.aggData = newAggData;\n\n        // if no event service, nobody has registered for events, so no need fire event\n        if (this.eventService) {\n            colIds.forEach(colId => {\n                const column = this.columnController.getGridColumn(colId);\n                const value = this.aggData ? this.aggData[colId] : undefined;\n                this.dispatchCellChangedEvent(column, value);\n            });\n        }\n    }\n\n    public hasChildren(): boolean {\n        // we need to return true when this.group=true, as this is used by server side row model\n        // (as children are lazy loaded and stored in a cache anyway). otherwise we return true\n        // if children exist.\n        return this.group || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);\n    }\n\n    public isEmptyRowGroupNode(): boolean {\n        return this.group && _.missingOrEmpty(this.childrenAfterGroup);\n    }\n\n    private dispatchCellChangedEvent(column: Column, newValue: any): void {\n        const cellChangedEvent: CellChangedEvent = {\n            type: RowNode.EVENT_CELL_CHANGED,\n            node: this,\n            column: column,\n            newValue: newValue\n        };\n        this.dispatchLocalEvent(cellChangedEvent);\n    }\n\n    public resetQuickFilterAggregateText(): void {\n        this.quickFilterAggregateText = null;\n    }\n\n    public isExpandable(): boolean {\n        return this.hasChildren() || this.master;\n    }\n\n    public isSelected(): boolean {\n        // for footers, we just return what our sibling selected state is, as cannot select a footer\n        if (this.footer) {\n            return this.sibling.isSelected();\n        }\n\n        return this.selected;\n    }\n\n    public depthFirstSearch(callback: (rowNode: RowNode) => void): void {\n        if (this.childrenAfterGroup) {\n            this.childrenAfterGroup.forEach(child => child.depthFirstSearch(callback));\n        }\n        callback(this);\n    }\n\n    // + rowController.updateGroupsInSelection()\n    // + selectionController.calculatedSelectedForAllGroupNodes()\n    public calculateSelectedFromChildren(): void {\n        let atLeastOneSelected = false;\n        let atLeastOneDeSelected = false;\n        let atLeastOneMixed = false;\n\n        let newSelectedValue: boolean;\n        if (this.childrenAfterGroup) {\n            for (let i = 0; i < this.childrenAfterGroup.length; i++) {\n                const child = this.childrenAfterGroup[i];\n\n                // skip non-selectable nodes to prevent inconsistent selection values\n                if (!child.selectable) { continue; }\n\n                const childState = child.isSelected();\n                switch (childState) {\n                    case true:\n                        atLeastOneSelected = true;\n                        break;\n                    case false:\n                        atLeastOneDeSelected = true;\n                        break;\n                    default:\n                        atLeastOneMixed = true;\n                        break;\n                }\n            }\n        }\n\n        if (atLeastOneMixed) {\n            newSelectedValue = undefined;\n        } else if (atLeastOneSelected && !atLeastOneDeSelected) {\n            newSelectedValue = true;\n        } else if (!atLeastOneSelected && atLeastOneDeSelected) {\n            newSelectedValue = false;\n        } else {\n            newSelectedValue = undefined;\n        }\n        this.selectThisNode(newSelectedValue);\n    }\n\n    public setSelectedInitialValue(selected: boolean): void {\n        this.selected = selected;\n    }\n\n    public setSelected(newValue: boolean, clearSelection: boolean = false, suppressFinishActions: boolean = false) {\n        this.setSelectedParams({\n            newValue: newValue,\n            clearSelection: clearSelection,\n            suppressFinishActions: suppressFinishActions,\n            rangeSelect: false\n        });\n    }\n\n    public isRowPinned(): boolean {\n        return this.rowPinned === Constants.PINNED_TOP || this.rowPinned === Constants.PINNED_BOTTOM;\n    }\n\n    // to make calling code more readable, this is the same method as setSelected except it takes names parameters\n    public setSelectedParams(params: SetSelectedParams): number {\n\n        const groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n\n        const newValue = params.newValue === true;\n        const clearSelection = params.clearSelection === true;\n        const suppressFinishActions = params.suppressFinishActions === true;\n        const rangeSelect = params.rangeSelect === true;\n        // groupSelectsFiltered only makes sense when group selects children\n        const groupSelectsFiltered = groupSelectsChildren && (params.groupSelectsFiltered === true);\n\n        if (this.id === undefined) {\n            console.warn('ag-Grid: cannot select node until id for node is known');\n            return 0;\n        }\n\n        if (this.rowPinned) {\n            console.warn('ag-Grid: cannot select pinned rows');\n            return 0;\n        }\n\n        // if we are a footer, we don't do selection, just pass the info\n        // to the sibling (the parent of the group)\n        if (this.footer) {\n            const count = this.sibling.setSelectedParams(params);\n            return count;\n        }\n\n        if (rangeSelect) {\n            const newRowClicked = this.selectionController.getLastSelectedNode() !== this;\n            const allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();\n            if (newRowClicked && allowMultiSelect) {\n                return this.doRowRangeSelection();\n            }\n        }\n\n        let updatedCount = 0;\n\n        // when groupSelectsFiltered, then this node may end up intermediate despite\n        // trying to set it to true / false. this group will be calculated further on\n        // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it\n        // here, otherwise the updatedCount would include it.\n        const skipThisNode = groupSelectsFiltered && this.group;\n        if (!skipThisNode) {\n            const thisNodeWasSelected = this.selectThisNode(newValue);\n            if (thisNodeWasSelected) {\n                updatedCount++;\n            }\n        }\n\n        if (groupSelectsChildren && this.group) {\n            updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);\n        }\n\n        // clear other nodes if not doing multi select\n        if (!suppressFinishActions) {\n\n            const clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());\n            if (clearOtherNodes) {\n                updatedCount += this.selectionController.clearOtherNodes(this);\n            }\n\n            // only if we selected something, then update groups and fire events\n            if (updatedCount > 0) {\n\n                this.selectionController.updateGroupsFromChildrenSelections();\n\n                // this is the very end of the 'action node', so we are finished all the updates,\n                // include any parent / child changes that this method caused\n                const event: SelectionChangedEvent = {\n                    type: Events.EVENT_SELECTION_CHANGED,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                };\n                this.mainEventService.dispatchEvent(event);\n            }\n\n            // so if user next does shift-select, we know where to start the selection from\n            if (newValue) {\n                this.selectionController.setLastSelectedNode(this);\n            }\n        }\n\n        return updatedCount;\n    }\n\n    // selects all rows between this node and the last selected node (or the top if this is the first selection).\n    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n    // holding down 'shift'.\n    private doRowRangeSelection(): number {\n        let updatedCount = 0;\n\n        const groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        const lastSelectedNode = this.selectionController.getLastSelectedNode();\n\n        const nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);\n\n        nodesToSelect.forEach(rowNode => {\n            if (rowNode.group && groupsSelectChildren) {\n                return;\n            }\n\n            const nodeWasSelected = rowNode.selectThisNode(true);\n            if (nodeWasSelected) {\n                updatedCount++;\n            }\n        });\n\n        this.selectionController.updateGroupsFromChildrenSelections();\n\n        const event: SelectionChangedEvent = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.mainEventService.dispatchEvent(event);\n\n        return updatedCount;\n    }\n\n    public isParentOfNode(potentialParent: RowNode): boolean {\n        let parentNode = this.parent;\n        while (parentNode) {\n            if (parentNode === potentialParent) {\n                return true;\n            }\n            parentNode = parentNode.parent;\n        }\n        return false;\n    }\n\n    public selectThisNode(newValue: boolean): boolean {\n        if (!this.selectable || this.selected === newValue) { return false; }\n\n        this.selected = newValue;\n\n        if (this.eventService) {\n            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n        }\n\n        const event: RowSelectedEvent = this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED);\n        this.mainEventService.dispatchEvent(event);\n\n        return true;\n    }\n\n    private selectChildNodes(newValue: boolean, groupSelectsFiltered: boolean): number {\n        const children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;\n\n        let updatedCount = 0;\n        if (_.missing(children)) {\n            return;\n        }\n        for (let i = 0; i < children.length; i++) {\n            updatedCount += children[i].setSelectedParams({\n                newValue: newValue,\n                clearSelection: false,\n                suppressFinishActions: true,\n                groupSelectsFiltered\n            });\n        }\n        return updatedCount;\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        if (!this.eventService) {\n            this.eventService = new EventService();\n        }\n        this.eventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n\n    public onMouseEnter(): void {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));\n    }\n\n    public onMouseLeave(): void {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));\n    }\n\n    public getFirstChildOfFirstChild(rowGroupColumn: Column | null): RowNode {\n        let currentRowNode: RowNode = this;\n\n        // if we are hiding groups, then if we are the first child, of the first child,\n        // all the way up to the column we are interested in, then we show the group cell.\n\n        let isCandidate = true;\n        let foundFirstChildPath = false;\n        let nodeToSwapIn: RowNode;\n\n        while (isCandidate && !foundFirstChildPath) {\n\n            const parentRowNode = currentRowNode.parent;\n            const firstChild = _.exists(parentRowNode) && currentRowNode.firstChild;\n\n            if (firstChild) {\n                if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n                    foundFirstChildPath = true;\n                    nodeToSwapIn = parentRowNode;\n                }\n            } else {\n                isCandidate = false;\n            }\n\n            currentRowNode = parentRowNode;\n        }\n\n        return foundFirstChildPath ? nodeToSwapIn : null;\n    }\n\n    public isFullWidthCell(): boolean {\n        const isFullWidthCellFunc = this.gridOptionsWrapper.getIsFullWidthCellFunc();\n        return isFullWidthCellFunc ? isFullWidthCellFunc(this) : false;\n    }\n}"]}