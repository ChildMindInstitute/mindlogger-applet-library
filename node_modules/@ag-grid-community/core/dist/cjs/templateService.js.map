{"version":3,"sources":["../../src/ts/templateService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,6CAAyC;AACzC,6CAA8C;AAG9C;IAAA;QAIY,kBAAa,GAAO,EAAE,CAAC;QACvB,qBAAgB,GAAO,EAAE,CAAC;IA+DtC,CAAC;IA7DG,oEAAoE;IACpE,+CAA+C;IAC/C,qCAAW,GAAX,UAAY,GAAQ,EAAE,QAAa;QAE/B,IAAM,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAClD,IAAI,iBAAiB,EAAE;YACnB,OAAO,iBAAiB,CAAC;SAC5B;QAED,IAAI,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,YAAY,EAAE;YACf,+DAA+D;YAC/D,YAAY,GAAG,EAAE,CAAC;YAClB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;YAC1C,uCAAuC;YACvC,IAAM,MAAM,GAAG,IAAI,cAAc,EAAE,CAAC;YACpC,MAAM,CAAC,MAAM,GAAG;gBACZ,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACrC,CAAC,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACxB,MAAM,CAAC,IAAI,EAAE,CAAC;SACjB;QAED,oBAAoB;QACpB,IAAI,QAAQ,EAAE;YACV,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC/B;QAED,4DAA4D;QAC5D,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,0CAAgB,GAAhB,UAAiB,UAAe,EAAE,GAAQ;QAEtC,IAAI,UAAU,CAAC,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,QAAQ,KAAK,IAAI,EAAE;YAC3D,OAAO,CAAC,IAAI,CAAC,kCAAgC,UAAU,CAAC,MAAM,WAAM,GAAK,CAAC,CAAC;YAC3E,OAAO;SACV;QAED,kCAAkC;QAClC,2CAA2C;QAC3C,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,YAAY,CAAC;QAEzE,qDAAqD;QACrD,IAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC9B,mFAAmF;YACnF,kFAAkF;YAClF,qCAAqC;YACrC,QAAQ,EAAE,CAAC;SACd;QAED,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAM,MAAI,GAAG,IAAI,CAAC;YAClB,MAAM,CAAC,UAAU,CAAC;gBACd,MAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACzB,CAAC,EAAE,CAAC,CAAC,CAAC;SACT;IACL,CAAC;IAjEoB;QAApB,mBAAS,CAAC,QAAQ,CAAC;mDAAqB;IAFhC,eAAe;QAD3B,cAAI,CAAC,iBAAiB,CAAC;OACX,eAAe,CAoE3B;IAAD,sBAAC;CApED,AAoEC,IAAA;AApEY,0CAAe","file":"templateService.js","sourcesContent":["import { Bean } from \"./context/context\";\nimport { Autowired } from \"./context/context\";\n\n@Bean('templateService')\nexport class TemplateService {\n\n    @Autowired('$scope') private $scope: any;\n\n    private templateCache:any = {};\n    private waitingCallbacks:any = {};\n\n    // returns the template if it is loaded, or null if it is not loaded\n    // but will call the callback when it is loaded\n    getTemplate(url: any, callback: any) {\n\n        const templateFromCache = this.templateCache[url];\n        if (templateFromCache) {\n            return templateFromCache;\n        }\n\n        let callbackList = this.waitingCallbacks[url];\n        const that = this;\n        if (!callbackList) {\n            // first time this was called, so need a new list for callbacks\n            callbackList = [];\n            this.waitingCallbacks[url] = callbackList;\n            // and also need to do the http request\n            const client = new XMLHttpRequest();\n            client.onload = function() {\n                that.handleHttpResult(this, url);\n            };\n            client.open(\"GET\", url);\n            client.send();\n        }\n\n        // add this callback\n        if (callback) {\n            callbackList.push(callback);\n        }\n\n        // caller needs to wait for template to load, so return null\n        return null;\n    }\n\n    handleHttpResult(httpResult: any, url: any) {\n\n        if (httpResult.status !== 200 || httpResult.response === null) {\n            console.warn(`Unable to get template error ${httpResult.status} - ${url}`);\n            return;\n        }\n\n        // response success, so process it\n        // in IE9 the response is in - responseText\n        this.templateCache[url] = httpResult.response || httpResult.responseText;\n\n        // inform all listeners that this is now in the cache\n        const callbacks = this.waitingCallbacks[url];\n        for (let i = 0; i < callbacks.length; i++) {\n            const callback = callbacks[i];\n            // we could pass the callback the response, however we know the client of this code\n            // is the cell renderer, and it passes the 'cellRefresh' method in as the callback\n            // which doesn't take any parameters.\n            callback();\n        }\n\n        if (this.$scope) {\n            const that = this;\n            window.setTimeout(function() {\n                that.$scope.$apply();\n            }, 0);\n        }\n    }\n}\n"]}