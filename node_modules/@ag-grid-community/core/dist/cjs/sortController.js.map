{"version":3,"sources":["../../src/ts/sortController.ts"],"names":[],"mappings":"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","file":"sortController.js","sourcesContent":["import { Column } from \"./entities/column\";\nimport { Autowired, Bean } from \"./context/context\";\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { ColumnApi } from \"./columnController/columnApi\";\nimport { ColumnController } from \"./columnController/columnController\";\nimport { EventService } from \"./eventService\";\nimport { ColumnEventType, Events, SortChangedEvent } from \"./events\";\nimport { GridApi } from \"./gridApi\";\nimport {Constants} from \"./constants\";\n\n@Bean('sortController')\nexport class SortController {\n\n    private static DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    public progressSort(column: Column, multiSort: boolean, source: ColumnEventType = \"api\"): void {\n        const nextDirection = this.getNextSortDirection(column);\n        this.setSortForColumn(column, nextDirection, multiSort, source);\n    }\n\n    public setSortForColumn(column: Column, sort: string | null, multiSort: boolean, source: ColumnEventType = \"api\"): void {\n\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n        if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {\n            sort = null;\n        }\n\n        // update sort on current col\n        column.setSort(sort, source);\n\n        // sortedAt used for knowing order of cols when multi-col sort\n        if (column.getSort()) {\n            const sortedAt = Number(new Date().valueOf());\n            column.setSortedAt(sortedAt);\n        } else {\n            column.setSortedAt(null);\n        }\n\n        const doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();\n\n        // clear sort on all columns except this one, and update the icons\n        if (!doingMultiSort) {\n            this.clearSortBarThisColumn(column, source);\n        }\n\n        this.dispatchSortChangedEvents();\n    }\n\n    // gets called by API, so if data changes, use can call this, which will end up\n    // working out the sort order again of the rows.\n    public onSortChanged(): void {\n        this.dispatchSortChangedEvents();\n    }\n\n    private dispatchSortChangedEvents(): void {\n        const event: SortChangedEvent = {\n            type: Events.EVENT_SORT_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private clearSortBarThisColumn(columnToSkip: Column, source: ColumnEventType): void {\n        this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach((columnToClear: Column) => {\n            // Do not clear if either holding shift, or if column in question was clicked\n            if (!(columnToClear === columnToSkip)) {\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n                columnToClear.setSort(undefined, source);\n            }\n        });\n    }\n\n    private getNextSortDirection(column: Column): string | null {\n\n        let sortingOrder: (string | null)[] | null | undefined;\n        if (column.getColDef().sortingOrder) {\n            sortingOrder = column.getColDef().sortingOrder;\n        } else if (this.gridOptionsWrapper.getSortingOrder()) {\n            sortingOrder = this.gridOptionsWrapper.getSortingOrder();\n        } else {\n            sortingOrder = SortController.DEFAULT_SORTING_ORDER;\n        }\n\n        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n            console.warn(`ag-grid: sortingOrder must be an array with at least one element, currently it\\'s ${sortingOrder}`);\n            return null;\n        }\n\n        const currentIndex = sortingOrder.indexOf(column.getSort());\n        const notInArray = currentIndex < 0;\n        const lastItemInArray = currentIndex == sortingOrder.length - 1;\n        let result: string | null;\n        if (notInArray || lastItemInArray) {\n            result = sortingOrder[0];\n        } else {\n            result = sortingOrder[currentIndex + 1];\n        }\n\n        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n        if (SortController.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n            console.warn('ag-grid: invalid sort type ' + result);\n            return null;\n        }\n\n        return result;\n    }\n\n    // used by the public api, for saving the sort model\n    public getSortModel = () => {\n        return this.getColumnsWithSortingOrdered().map(column => ({\n            colId: column.getColId(),\n            sort: column.getSort()\n        }));\n    }\n\n    public setSortModel(sortModel: any, source: ColumnEventType = \"api\") {\n        // first up, clear any previous sort\n        const sortModelProvided = sortModel && sortModel.length > 0;\n\n        const allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n        allColumnsIncludingAuto.forEach((column: Column) => {\n            let sortForCol: any = null;\n            let sortedAt = -1;\n            if (sortModelProvided && column.getColDef().sortable) {\n                for (let j = 0; j < sortModel.length; j++) {\n                    const sortModelEntry = sortModel[j];\n                    if (typeof sortModelEntry.colId === 'string'\n                        && typeof column.getColId() === 'string'\n                        && this.compareColIds(sortModelEntry, column)) {\n                        sortForCol = sortModelEntry.sort;\n                        sortedAt = j;\n                    }\n                }\n            }\n\n            if (sortForCol) {\n                column.setSort(sortForCol, source);\n                column.setSortedAt(sortedAt);\n            } else {\n                column.setSort(null, source);\n                column.setSortedAt(null);\n            }\n        });\n\n        this.dispatchSortChangedEvents();\n    }\n\n    private compareColIds(sortModelEntry: any, column: Column) {\n        return sortModelEntry.colId === column.getColId();\n    }\n\n    public getColumnsWithSortingOrdered(): Column[] {\n        // pull out all the columns that have sorting set\n        const allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n        const columnsWithSorting = allColumnsIncludingAuto.filter(column => !!column.getSort());\n\n        // put the columns in order of which one got sorted first\n        columnsWithSorting.sort((a: any, b: any) => a.sortedAt - b.sortedAt);\n\n        return columnsWithSorting;\n    }\n\n    // used by row controller, when doing the sorting\n    public getSortForRowController(): any[] {\n        return this.getColumnsWithSortingOrdered().map(column => {\n            const isAscending = column.getSort() === Constants.SORT_ASC;\n\n            return {\n                inverter: isAscending ? 1 : -1,\n                column\n            };\n        });\n    }\n}"]}