{"version":3,"sources":["../../source/steps/getTimeToNextUpdateForUnit.test.js"],"names":["getTimeToNextUpdateForUnit","describe","it","expect","to","be","undefined","Date","now","should","equal","test","seconds","expected","addOneMs","round"],"mappings":"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","sourcesContent":["import getTimeToNextUpdateForUnit from './getTimeToNextUpdateForUnit'\r\n\r\ndescribe('getTimeToNextUpdateForUnit', () => {\r\n\tit('should return undefined for unknown units', () => {\r\n\t\texpect(getTimeToNextUpdateForUnit('now', 0, {})).to.be.undefined\r\n\t})\r\n\r\n\tit('should support Date argument', () => {\r\n\t\tgetTimeToNextUpdateForUnit('second', new Date(0), {\r\n\t\t\t// future: false,\r\n\t\t\tnow: 0\r\n\t\t}).should.equal(500)\r\n\t})\r\n\r\n\tit('should get time to next update for unit (future)', () => {\r\n\t\tconst test = (seconds, expected, addOneMs = true) => {\r\n\t\t\tgetTimeToNextUpdateForUnit('second', seconds * 1000, {\r\n\t\t\t\t// future: true,\r\n\t\t\t\tnow: 0\r\n\t\t\t}).should.equal(expected * 1000 + (addOneMs ? 1 : 0))\r\n\t\t}\r\n\r\n\t\ttest(9, 0.5)\r\n\t\ttest(9.1, 0.6)\r\n\t\ttest(9.4, 0.9)\r\n\t\ttest(9.5, 0)\r\n\t\ttest(9.9, 0.4)\r\n\t\ttest(10, 0.5)\r\n\r\n\t\ttest(1.1, 0.6)\r\n\t\ttest(1, 0.5)\r\n\t\ttest(0.9, 0.4)\r\n\t\ttest(0.5, 0)\r\n\t\ttest(0.4, 0.4)\r\n\t\ttest(0, 0.5, false)\r\n\t})\r\n\r\n\tit('should get time to next update for unit (past)', () => {\r\n\t\tconst test = (seconds, expected, addOneMs = true) => {\r\n\t\t\tgetTimeToNextUpdateForUnit('second', -1 * seconds * 1000, {\r\n\t\t\t\t// future: false,\r\n\t\t\t\tnow: 0\r\n\t\t\t}).should.equal(expected * 1000)\r\n\t\t}\r\n\r\n\t\ttest(10, 0.5)\r\n\t\ttest(9.9, 0.6)\r\n\t\ttest(9.5, 1)\r\n\t\ttest(9.4, 0.1)\r\n\t\ttest(9.1, 0.4)\r\n\t\ttest(9, 0.5)\r\n\r\n\t\ttest(0, 0.5, false)\r\n\t\ttest(0.5, 1, false)\r\n\t\ttest(0.9, 0.6, false)\r\n\t\ttest(1, 0.5, false)\r\n\t\ttest(1.1, 0.4, false)\r\n\t})\r\n\r\n\tit('should support \"floor\" rounding (future)', () => {\r\n\t\tconst test = (seconds, expected, addOneMs = true) => {\r\n\t\t\tgetTimeToNextUpdateForUnit('second', seconds * 1000, {\r\n\t\t\t\t// future: true,\r\n\t\t\t\tnow: 0,\r\n\t\t\t\tround: 'floor'\r\n\t\t\t}).should.equal(expected * 1000 + (addOneMs ? 1 : 0))\r\n\t\t}\r\n\r\n\t\ttest(9, 0)\r\n\t\ttest(9.1, 0.1)\r\n\t\ttest(9.4, 0.4)\r\n\t\ttest(9.5, 0.5)\r\n\t\ttest(9.9, 0.9)\r\n\t\ttest(10, 0)\r\n\r\n\t\ttest(1.1, 0.1)\r\n\t\ttest(1, 0)\r\n\t\ttest(0.9, 0.9)\r\n\t\ttest(0.5, 0.5)\r\n\t\ttest(0.1, 0.1)\r\n\t\ttest(0, 1, false)\r\n\t})\r\n\r\n\tit('should support \"floor\" rounding (past)', () => {\r\n\t\tconst test = (seconds, expected) => {\r\n\t\t\tgetTimeToNextUpdateForUnit('second', -1 * seconds * 1000, {\r\n\t\t\t\t// future: false,\r\n\t\t\t\tnow: 0,\r\n\t\t\t\tround: 'floor'\r\n\t\t\t}).should.equal(expected * 1000)\r\n\t\t}\r\n\r\n\t\ttest(10, 1)\r\n\t\ttest(9.9, 0.1)\r\n\t\ttest(9.5, 0.5)\r\n\t\ttest(9.4, 0.6)\r\n\t\ttest(9.1, 0.9)\r\n\t\ttest(9, 1)\r\n\r\n\t\ttest(0, 1)\r\n\t\ttest(0.5, 0.5)\r\n\t\ttest(0.9, 0.1)\r\n\t\ttest(1, 1)\r\n\t\ttest(1.1, 0.9)\r\n\t})\r\n})"],"file":"getTimeToNextUpdateForUnit.test.js"}