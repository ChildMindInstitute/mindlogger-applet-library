function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import renameLegacyProperties from '../steps/renameLegacyProperties'; // This function is only used for backwards compatibility
// with legacy code that uses the older versions of this library.

export default function (style_) {
  var style = _objectSpread({}, style_);

  if (style.steps) {
    style.gradation = style.steps.map(renameLegacyProperties);
    delete style.steps;
  }

  if (style.labels) {
    style.flavour = style.labels;
    delete style.labels;
  }

  return style;
}
//# sourceMappingURL=renameLegacyProperties.js.map