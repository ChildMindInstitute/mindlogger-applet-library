{"version":3,"sources":["../source/TimeAgo.js"],"names":["UNITS","TimeAgo","locales","polyfill","locale","concat","getDefaultLocale","getLocaleData","Intl","NumberFormat","numberFormat","IntlRelativeTimeFormat","RelativeTimeFormat","IntlPluralRules","PluralRules","RelativeTimeFormatPolyfill","relativeTimeFormatCache","Cache","pluralRulesCache","input","style","options","isStyle","undefined","defaultStyle","timestamp","getTimestamp","getLabels","flavour","labels","labelsType","now","Date","secondsPassed","future","nowLabel","getNowLabel","long","custom","date","time","elapsed","units","getTimeIntervalMeasurementUnits","round","gradation","steps","getNextStep","prevStep","step","nextStep","formattedDate","formatDateForStep","getTimeToNextUpdate","timeToNextUpdate","format","formatAs","unit","value","formatValue","Error","JSON","stringify","amount","Math","abs","granularity","valueForFormatting","sign","getFormatter","getFormattingRule","replace","formatNumber","formattingRules","pastOrFuture","quantifierRules","quantifier","getPluralRules","select","other","number","String","get","put","map","localeData","_labelsType","defaultLocale","setDefaultLocale","addDefaultLocale","defaultLocaleHasBeenSpecified","addLocale","addLabels","name","constructor","isMockedDate","getTime","object","allowedUnits","Object","keys","push","filter","indexOf","nowLabels","longLabels","past","second","current","OBJECT_CONSTRUCTOR","isObject","variable","isStyleObject","Array","isArray"],"mappings":"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","sourcesContent":["import RelativeTimeFormatPolyfill from 'relative-time-format'\r\n\r\nimport Cache from './cache'\r\nimport chooseLocale from './locale'\r\nimport getStep from './steps/getStep'\r\nimport getStepDenominator from './steps/getStepDenominator'\r\nimport getTimeToNextUpdate from './steps/getTimeToNextUpdate'\r\n\r\nimport {\r\n\taddLocaleData,\r\n\tgetLocaleData\r\n} from './LocaleDataStore'\r\n\r\nimport defaultStyle from './style/roundMinute'\r\nimport getStyleByName from './style/getStyleByName'\r\n\r\nimport { getRoundFunction } from './round'\r\n\r\n// Valid time units.\r\nconst UNITS = [\r\n\t'now',\r\n\t// The rest are the same as in `Intl.RelativeTimeFormat`.\r\n\t'second',\r\n\t'minute',\r\n\t'hour',\r\n\t'day',\r\n\t'week',\r\n\t'month',\r\n\t'quarter',\r\n\t'year'\r\n]\r\n\r\nexport default class TimeAgo {\r\n\t/**\r\n\t * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n\t * @param {boolean} [polyfill] — Pass `false` to use native `Intl.RelativeTimeFormat` and `Intl.PluralRules` instead of the polyfills.\r\n\t */\r\n\tconstructor(locales = [], { polyfill } = {}) {\r\n\t\t// Convert `locales` to an array.\r\n\t\tif (typeof locales === 'string') {\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\r\n\t\t// Choose the most appropriate locale\r\n\t\t// from the list of `locales` added by the user.\r\n\t\t// For example, new TimeAgo(\"en-US\") -> \"en\".\r\n\t\tthis.locale = chooseLocale(\r\n\t\t\tlocales.concat(TimeAgo.getDefaultLocale()),\r\n\t\t\tgetLocaleData\r\n\t\t)\r\n\r\n\t\tif (typeof Intl !== 'undefined') {\r\n\t\t\t// Use `Intl.NumberFormat` for formatting numbers (when available).\r\n\t\t\tif (Intl.NumberFormat) {\r\n\t\t\t\tthis.numberFormat = new Intl.NumberFormat(this.locale)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Some people have requested the ability to use native\r\n\t\t// `Intl.RelativeTimeFormat` and `Intl.PluralRules`\r\n\t\t// instead of the polyfills.\r\n\t\t// https://github.com/catamphetamine/javascript-time-ago/issues/21\r\n\t\tif (polyfill === false) {\r\n\t\t\tthis.IntlRelativeTimeFormat = Intl.RelativeTimeFormat\r\n\t\t\tthis.IntlPluralRules = Intl.PluralRules\r\n\t\t} else {\r\n\t\t\tthis.IntlRelativeTimeFormat = RelativeTimeFormatPolyfill\r\n\t\t\tthis.IntlPluralRules = RelativeTimeFormatPolyfill.PluralRules\r\n\t\t}\r\n\r\n\t\t// Cache `Intl.RelativeTimeFormat` instance.\r\n\t\tthis.relativeTimeFormatCache = new Cache()\r\n\r\n\t\t// Cache `Intl.PluralRules` instance.\r\n\t\tthis.pluralRulesCache = new Cache()\r\n\t}\r\n\r\n\t/**\r\n\t * Formats relative date/time.\r\n\t *\r\n\t * @param {number} [options.now] - Sets the current date timestamp.\r\n\t *\r\n\t * @param  {boolean} [options.future] — Tells how to format value `0`:\r\n\t *         as \"future\" (`true`) or \"past\" (`false`).\r\n\t *         Is `false` by default, but should have been `true` actually,\r\n\t *         in order to correspond to `Intl.RelativeTimeFormat`\r\n\t *         that uses `future` formatting for `0` unless `-0` is passed.\r\n\t *\r\n\t * @param {string} [options.round] — Rounding method. Overrides the style's one.\r\n\t *\r\n\t * @param {boolean} [options.getTimeToNextUpdate] — Pass `true` to return `[formattedDate, timeToNextUpdate]` instead of just `formattedDate`.\r\n\t *\r\n\t * @return {string} The formatted relative date/time. If no eligible `step` is found, then an empty string is returned.\r\n\t */\r\n\tformat(input, style, options) {\r\n\t\tif (!options) {\r\n\t\t\tif (style && !isStyle(style)) {\r\n\t\t\t\toptions = style\r\n\t\t\t\tstyle = undefined\r\n\t\t\t} else {\r\n\t\t\t\toptions = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!style) {\r\n\t\t\tstyle = defaultStyle\r\n\t\t}\r\n\r\n\t\tif (typeof style === 'string') {\r\n\t\t\tstyle = getStyleByName(style)\r\n\t\t}\r\n\r\n\t\tconst timestamp = getTimestamp(input)\r\n\r\n\t\t// Get locale messages for this type of labels.\r\n\t\t// \"flavour\" is a legacy name for \"labels\".\r\n\t\tconst { labels, labelsType } = this.getLabels(style.flavour || style.labels)\r\n\r\n\t\tlet now\r\n\t\t// Can pass a custom `now`, e.g. for testing purposes.\r\n\t\t//\r\n\t\t// Legacy way was passing `now` in `style`.\r\n\t\t// That way is deprecated.\r\n\t\tif (style.now !== undefined) {\r\n\t\t\tnow = style.now\r\n\t\t}\r\n\t\t// The new way is passing `now` option to `.format()`.\r\n\t\tif (now === undefined && options.now !== undefined) {\r\n\t\t\tnow = options.now\r\n\t\t}\r\n\t\tif (now === undefined) {\r\n\t\t\tnow = Date.now()\r\n\t\t}\r\n\r\n\t\t// how much time has passed (in seconds)\r\n\t\tconst secondsPassed = (now - timestamp) / 1000 // in seconds\r\n\r\n\t\tconst future = options.future || secondsPassed < 0\r\n\r\n\t\tconst nowLabel = getNowLabel(\r\n\t\t\tlabels,\r\n\t\t\tgetLocaleData(this.locale).now,\r\n\t\t\tgetLocaleData(this.locale).long,\r\n\t\t\tfuture\r\n\t\t)\r\n\r\n\t\t// `custom` – A function of `{ elapsed, time, date, now, locale }`.\r\n\t\t//\r\n\t\t// Looks like `custom` function is deprecated and will be removed\r\n\t\t// in the next major version.\r\n\t\t//\r\n\t\t// If this function returns a value, then the `.format()` call will return that value.\r\n\t\t// Otherwise the relative date/time is formatted as usual.\r\n\t\t// This feature is currently not used anywhere and is here\r\n\t\t// just for providing the ultimate customization point\r\n\t\t// in case anyone would ever need that. Prefer using\r\n\t\t// `steps[step].format(value, locale)` instead.\r\n\t\t//\r\n\t\tif (style.custom) {\r\n\t\t\tconst custom = style.custom({\r\n\t\t\t\tnow,\r\n\t\t\t\tdate: new Date(timestamp),\r\n\t\t\t\ttime: timestamp,\r\n\t\t\t\telapsed: secondsPassed,\r\n\t\t\t\tlocale: this.locale\r\n\t\t\t})\r\n\t\t\tif (custom !== undefined) {\r\n\t\t\t\t// Won't return `timeToNextUpdate` here\r\n\t\t\t\t// because `custom()` seems deprecated.\r\n\t\t\t\treturn custom\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Get the list of available time interval units.\r\n\t\tconst units = getTimeIntervalMeasurementUnits(\r\n\t\t\t// Controlling `style.steps` through `style.units` seems to be deprecated:\r\n\t\t\t// create a new custom `style` instead.\r\n\t\t\tstyle.units,\r\n\t\t\tlabels,\r\n\t\t\tnowLabel\r\n\t\t)\r\n\r\n\t\t// // If no available time unit is suitable, just output an empty string.\r\n\t\t// if (units.length === 0) {\r\n\t\t// \tconsole.error(`None of the \"${units.join(', ')}\" time units have been found in \"${labelsType}\" labels for \"${this.locale}\" locale.`)\r\n\t\t// \treturn ''\r\n\t\t// }\r\n\r\n\t\tconst round = options.round || style.round\r\n\r\n\t\t// Choose the appropriate time measurement unit\r\n\t\t// and get the corresponding rounded time amount.\r\n\t\tconst [prevStep, step, nextStep] = getStep(\r\n\t\t\t// \"gradation\" is a legacy name for \"steps\".\r\n\t\t\t// For historical reasons, \"approximate\" steps are used by default.\r\n\t\t\t// In the next major version, there'll be no default for `steps`.\r\n\t\t\tstyle.gradation || style.steps || defaultStyle.steps,\r\n\t\t\tsecondsPassed,\r\n\t\t\t{ now, units, round, future, getNextStep: true }\r\n\t\t)\r\n\r\n\t\tconst formattedDate = this.formatDateForStep(timestamp, step, secondsPassed, {\r\n\t\t\tlabels,\r\n\t\t\tlabelsType,\r\n\t\t\tnowLabel,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t}) || ''\r\n\r\n\t\tif (options.getTimeToNextUpdate) {\r\n\t\t\tconst timeToNextUpdate = getTimeToNextUpdate(timestamp, step, {\r\n\t\t\t\tnextStep,\r\n\t\t\t\tprevStep,\r\n\t\t\t\tnow,\r\n\t\t\t\tfuture,\r\n\t\t\t\tround\r\n\t\t\t})\r\n\t\t\treturn [formattedDate, timeToNextUpdate]\r\n\t\t}\r\n\r\n\t\treturn formattedDate\r\n\t}\r\n\r\n\tformatDateForStep(timestamp, step, secondsPassed, {\r\n\t\tlabels,\r\n\t\tlabelsType,\r\n\t\tnowLabel,\r\n\t\tnow,\r\n\t\tfuture,\r\n\t\tround\r\n\t}) {\r\n\t\t// If no step matches, then output an empty string.\r\n\t\tif (!step) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (step.format) {\r\n\t\t\treturn step.format(timestamp, this.locale, {\r\n\t\t\t\tformatAs: (unit, value) => {\r\n\t\t\t\t\t// Mimicks `Intl.RelativeTimeFormat.format()`.\r\n\t\t\t\t\treturn this.formatValue(value, unit, {\r\n\t\t\t\t\t\tlabels,\r\n\t\t\t\t\t\tfuture\r\n\t\t\t\t\t})\r\n\t\t\t\t},\r\n\t\t\t\tnow,\r\n\t\t\t\tfuture\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// \"unit\" is now called \"formatAs\".\r\n\t\tconst unit = step.unit || step.formatAs\r\n\r\n\t\tif (!unit) {\r\n\t\t\tthrow new Error(`[javascript-time-ago] Each step must define either \\`formatAs\\` or \\`format()\\`. Step: ${JSON.stringify(step)}`)\r\n\t\t}\r\n\r\n\t\t// `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\r\n\t\t// Therefore, threat \"now\" as a special case.\r\n\t\tif (unit === 'now') {\r\n\t\t\treturn nowLabel\r\n\t\t}\r\n\r\n\t\t// Amount in units.\r\n\t\tlet amount = Math.abs(secondsPassed) / getStepDenominator(step)\r\n\r\n\t\t// Apply granularity to the time amount\r\n\t\t// (and fallback to the previous step\r\n\t\t//  if the first level of granularity\r\n\t\t//  isn't met by this amount)\r\n\t\t//\r\n\t\t// `granularity` — (advanced) Time interval value \"granularity\".\r\n\t\t// For example, it could be set to `5` for minutes to allow only 5-minute increments\r\n\t\t// when formatting time intervals: `0 minutes`, `5 minutes`, `10 minutes`, etc.\r\n\t\t// Perhaps this feature will be removed because there seem to be no use cases\r\n\t\t// of it in the real world.\r\n\t\t//\r\n\t\tif (step.granularity) {\r\n\t\t\t// Recalculate the amount of seconds passed based on granularity\r\n\t\t\tamount = getRoundFunction(round)(amount / step.granularity) * step.granularity\r\n\t\t}\r\n\r\n\t\tlet valueForFormatting = -1 * Math.sign(secondsPassed) * getRoundFunction(round)(amount)\r\n\r\n\t\t// By default, this library formats a `0` in \"past\" mode,\r\n\t\t// unless `future: true` option is passed.\r\n\t\t// This is different to `relative-time-format`'s behavior\r\n\t\t// which formats a `0` in \"future\" mode by default, unless it's a `-0`.\r\n\t\t// So, convert `0` to `-0` if `future: true` option wasn't passed.\r\n\t\t// `=== 0` matches both `0` and `-0`.\r\n\t\tif (valueForFormatting === 0) {\r\n\t\t\tif (future) {\r\n\t\t\t\tvalueForFormatting = 0\r\n\t\t\t} else {\r\n\t\t\t\tvalueForFormatting = -0\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch (labelsType) {\r\n\t\t\tcase 'long':\r\n\t\t\tcase 'short':\r\n\t\t\tcase 'narrow':\r\n\t\t\t\t// Format the amount using `Intl.RelativeTimeFormat`.\r\n\t\t\t\treturn this.getFormatter(labelsType).format(valueForFormatting, unit)\r\n\t\t\tdefault:\r\n\t\t\t\t// Format the amount.\r\n\t\t\t\t// (mimicks `Intl.RelativeTimeFormat` behavior for other time label styles)\r\n\t\t\t\treturn this.formatValue(valueForFormatting, unit, {\r\n\t\t\t\t\tlabels,\r\n\t\t\t\t\tfuture\r\n\t\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n\t * @param  {number} value\r\n\t * @param  {string} unit\r\n\t * @param  {object} options.labels — Relative time labels.\r\n\t * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default, but should have been `true` actually.\r\n\t * @return {string}\r\n\t */\r\n\tformatValue(value, unit, { labels, future }) {\r\n\t\treturn this.getFormattingRule(labels, unit, value, { future })\r\n\t\t\t.replace('{0}', this.formatNumber(Math.abs(value)))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns formatting rule for `value` in `units` (either in past or in future).\r\n\t * @param {object} formattingRules — Relative time labels for different units.\r\n\t * @param {string} unit - Time interval measurement unit.\r\n\t * @param {number} value - Time interval value.\r\n\t * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default.\r\n\t * @return {string}\r\n\t * @example\r\n\t * // Returns \"{0} days ago\"\r\n\t * getFormattingRule(en.long, \"day\", -2, 'en')\r\n\t */\r\n\tgetFormattingRule(formattingRules, unit, value, { future }) {\r\n\t\t// Passing the language is required in order to\r\n\t\t// be able to correctly classify the `value` as a number.\r\n\t\tconst locale = this.locale\r\n\t\tformattingRules = formattingRules[unit]\r\n\t\t// Check for a special \"compacted\" rules case:\r\n\t\t// if formatting rules are the same for \"past\" and \"future\",\r\n\t\t// and also for all possible `value`s, then those rules are\r\n\t\t// stored as a single string.\r\n\t\tif (typeof formattingRules === 'string') {\r\n\t\t\treturn formattingRules\r\n\t\t}\r\n\t\t// Choose either \"past\" or \"future\" based on time `value` sign.\r\n\t\t// If \"past\" is same as \"future\" then they're stored as \"other\".\r\n\t\t// If there's only \"other\" then it's being collapsed.\r\n\t\tconst pastOrFuture = value === 0 ? (future ? 'future' : 'past') : (value < 0 ? 'past' : 'future')\r\n\t\tconst quantifierRules = formattingRules[pastOrFuture] || formattingRules\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof quantifierRules === 'string') {\r\n\t\t\treturn quantifierRules\r\n\t\t}\r\n\t\t// Quantify `value`.\r\n\t\tconst quantifier = this.getPluralRules().select(Math.abs(value))\r\n\t\t// \"other\" rule is supposed to always be present.\r\n\t\t// If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n\t\treturn quantifierRules[quantifier] || quantifierRules.other\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a number into a string.\r\n\t * Uses `Intl.NumberFormat` when available.\r\n\t * @param  {number} number\r\n\t * @return {string}\r\n\t */\r\n\tformatNumber(number) {\r\n\t\treturn this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `Intl.RelativeTimeFormat` for a given `labelsType`.\r\n\t * @param {string} labelsType\r\n\t * @return {object} `Intl.RelativeTimeFormat` instance\r\n\t */\r\n\tgetFormatter(labelsType) {\r\n\t\t// `Intl.RelativeTimeFormat` instance creation is (hypothetically) assumed\r\n\t\t// a lengthy operation so the instances are cached and reused.\r\n\t\treturn this.relativeTimeFormatCache.get(this.locale, labelsType) ||\r\n\t\t\tthis.relativeTimeFormatCache.put(this.locale, labelsType, new this.IntlRelativeTimeFormat(this.locale, { style: labelsType }))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `Intl.PluralRules` instance.\r\n\t * @return {object} `Intl.PluralRules` instance\r\n\t */\r\n\tgetPluralRules() {\r\n\t\t// `Intl.PluralRules` instance creation is (hypothetically) assumed\r\n\t\t// a lengthy operation so the instances are cached and reused.\r\n\t\treturn this.pluralRulesCache.get(this.locale) ||\r\n\t\t\tthis.pluralRulesCache.put(this.locale, new this.IntlPluralRules(this.locale))\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets localized labels for this type of labels.\r\n\t *\r\n\t * @param {(string|string[])} labelsType - Relative date/time labels type.\r\n\t *                                     If it's an array then all label types are tried\r\n\t *                                     until a suitable one is found.\r\n\t *\r\n\t * @returns {Object} Returns an object of shape { labelsType, labels }\r\n\t */\r\n\tgetLabels(labelsType = []) {\r\n\t\t// Convert `labels` to an array.\r\n\t\tif (typeof labelsType === 'string') {\r\n\t\t\tlabelsType = [labelsType]\r\n\t\t}\r\n\r\n\t\t// Supports legacy \"tiny\" and \"mini-time\" label styles.\r\n\t\tlabelsType = labelsType.map((labelsType) => {\r\n\t\t\tswitch (labelsType) {\r\n\t\t\t\tcase 'tiny':\r\n\t\t\t\tcase 'mini-time':\r\n\t\t\t\t\treturn 'mini'\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn labelsType\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t// \"long\" labels type is the default one.\r\n\t\t// (it's always present for all languages)\r\n\t\tlabelsType = labelsType.concat('long')\r\n\r\n\t\t// Find a suitable labels type.\r\n\t\tconst localeData = getLocaleData(this.locale)\r\n\t\tfor (const _labelsType of labelsType) {\r\n\t\t\tif (localeData[_labelsType]) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tlabelsType: _labelsType,\r\n\t\t\t\t\tlabels: localeData[_labelsType]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Default locale global variable.\r\n */\r\nlet defaultLocale = 'en'\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nTimeAgo.getDefaultLocale = () => defaultLocale\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nTimeAgo.setDefaultLocale = (locale) => defaultLocale = locale\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nTimeAgo.addDefaultLocale = function(localeData) {\r\n\tif (defaultLocaleHasBeenSpecified) {\r\n\t\tthrow new Error('[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.')\r\n\t}\r\n\tdefaultLocaleHasBeenSpecified = true\r\n\tTimeAgo.setDefaultLocale(localeData.locale)\r\n\tTimeAgo.addLocale(localeData)\r\n}\r\n\r\nlet defaultLocaleHasBeenSpecified\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nTimeAgo.addLocale = function(localeData) {\r\n\taddLocaleData(localeData)\r\n\tRelativeTimeFormatPolyfill.addLocale(localeData)\r\n}\r\n\r\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\r\nTimeAgo.locale = TimeAgo.addLocale\r\n\r\n/**\r\n * Adds custom labels to locale data.\r\n * @param {string} locale\r\n * @param {string} name\r\n * @param {object} labels\r\n */\r\nTimeAgo.addLabels = (locale, name, labels) => {\r\n\tlet localeData = getLocaleData(locale)\r\n\tif (!localeData) {\r\n\t\taddLocaleData({\r\n\t\t\tlocale\r\n\t\t})\r\n\t\tlocaleData = getLocaleData(locale)\r\n\t\t// throw new Error(`[javascript-time-ago] No data for locale \"${locale}\"`)\r\n\t}\r\n\tlocaleData[name] = labels\r\n}\r\n\r\n// Normalizes `.format()` `time` argument.\r\nfunction getTimestamp(input) {\r\n\tif (input.constructor === Date || isMockedDate(input)) {\r\n\t\treturn input.getTime()\r\n\t}\r\n\r\n\tif (typeof input === 'number') {\r\n\t\treturn input\r\n\t}\r\n\r\n\t// For some weird reason istanbul doesn't see this `throw` covered.\r\n\t/* istanbul ignore next */\r\n\tthrow new Error(`Unsupported relative time formatter input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// During testing via some testing libraries `Date`s aren't actually `Date`s.\r\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\r\nfunction isMockedDate(object) {\r\n\treturn typeof object === 'object' && typeof object.getTime === 'function'\r\n}\r\n\r\n// Get available time interval measurement units.\r\nfunction getTimeIntervalMeasurementUnits(allowedUnits, labels, nowLabel) {\r\n\t// Get all time interval measurement units that're available\r\n\t// in locale data for a given time labels style.\r\n\tlet units = Object.keys(labels)\r\n\r\n\t// `now` unit is handled separately and is shipped in its own `now.json` file.\r\n\t// `now.json` isn't present for all locales, so it could be substituted with\r\n\t// \".second.current\".\r\n\t// Add `now` unit if it's available in locale data.\r\n\tif (nowLabel) {\r\n\t\tunits.push('now')\r\n\t}\r\n\r\n\t// If only a specific set of available time measurement units can be used\r\n\t// then only those units are allowed (if they're present in locale data).\r\n\tif (allowedUnits) {\r\n\t\tunits = allowedUnits.filter(unit => unit === 'now' || units.indexOf(unit) >= 0)\r\n\t}\r\n\r\n\treturn units\r\n}\r\n\r\nfunction getNowLabel(labels, nowLabels, longLabels, future) {\r\n\tconst nowLabel = labels.now || (nowLabels && nowLabels.now)\r\n\t// Specific \"now\" message form extended locale data (if present).\r\n\tif (nowLabel) {\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof nowLabel === 'string') {\r\n\t\t\treturn nowLabel\r\n\t\t}\r\n\t\t// Not handling `value === 0` as `localeData.now.current` here\r\n\t\t// because it wouldn't make sense: \"now\" is a moment,\r\n\t\t// so one can't possibly differentiate between a\r\n\t\t// \"previous\" moment, a \"current\" moment and a \"next moment\".\r\n\t\t// It can only be differentiated between \"past\" and \"future\".\r\n\t\tif (future) {\r\n\t\t\treturn nowLabel.future\r\n\t\t} else {\r\n\t\t\treturn nowLabel.past\r\n\t\t}\r\n\t}\r\n\t// Use \".second.current\" as \"now\" message.\r\n\tif (longLabels && longLabels.second && longLabels.second.current) {\r\n\t\treturn longLabels.second.current\r\n\t}\r\n}\r\n\r\nconst OBJECT_CONSTRUCTOR = {}.constructor\r\nfunction isObject(object) {\r\n\treturn typeof object !== undefined && object !== null && object.constructor === OBJECT_CONSTRUCTOR\r\n}\r\n\r\nfunction isStyle(variable) {\r\n\treturn typeof variable === 'string' || isStyleObject(variable)\r\n}\r\n\r\nexport function isStyleObject(object) {\r\n\treturn isObject(object) && (\r\n\t\tArray.isArray(object.steps) ||\r\n\t\t// `gradation` property is deprecated: it has been renamed to `steps`.\r\n\t\tArray.isArray(object.gradation) ||\r\n\t\t// `flavour` property is deprecated: it has been renamed to `labels`.\r\n\t\tArray.isArray(object.flavour) ||\r\n\t\ttypeof object.flavour === 'string' ||\r\n\t\tArray.isArray(object.labels) ||\r\n\t\ttypeof object.labels === 'string' ||\r\n\t\t// `units` property is deprecated.\r\n\t\tArray.isArray(object.units) ||\r\n\t\t// `custom` property is deprecated.\r\n\t\ttypeof object.custom === 'function'\r\n\t)\r\n}"],"file":"TimeAgo.js"}