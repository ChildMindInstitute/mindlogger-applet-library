{"version":3,"sources":["../../source/style/twitter.js"],"names":["steps","formatAs","formatters","monthAndDay","minTime","timestamp","future","getMinTimeForUnit","format","value","locale","dayMonth","Intl","DateTimeFormat","month","day","yearMonthAndDay","maxFittingNow","Date","getFullYear","getTime","minFittingNow","dayMonthYear","year","push","labels"],"mappings":"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","sourcesContent":["import { day, getDate } from '../steps'\r\nimport { intlDateTimeFormatSupported } from '../locale'\r\n\r\n// For compatibility with the old versions of this library.\r\nimport renameLegacyProperties from './renameLegacyProperties'\r\n\r\n// Twitter-style relative date/time formatting.\r\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\r\n//\r\n// Seconds, minutes or hours are shown for shorter intervals,\r\n// and longer intervals are formatted using full date format.\r\n\r\nconst steps = [\r\n\t{\r\n\t\tformatAs: 'second'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'minute'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'hour'\r\n\t}\r\n]\r\n\r\n// A cache for `Intl.DateTimeFormat` formatters\r\n// for various locales (is a global variable).\r\nconst formatters = {}\r\n\r\n// Starting from day intervals, output month and day.\r\nconst monthAndDay = {\r\n\tminTime(timestamp, { future, getMinTimeForUnit }) {\r\n\t\t// Returns `23.5 * 60 * 60` when `round` is \"round\",\r\n\t\t// and `24 * 60 * 60` when `round` is \"floor\".\r\n\t\treturn getMinTimeForUnit('day')\r\n\t},\r\n\tformat(value, locale) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!formatters[locale]) {\r\n\t\t\tformatters[locale] = {}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!formatters[locale].dayMonth) {\r\n\t\t\t// \"Apr 11\" (MMMd)\r\n\t\t\tformatters[locale].dayMonth = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\tmonth: 'short',\r\n\t\t\t\tday: 'numeric'\r\n\t\t\t})\r\n\t\t}\r\n\t\t// Output month and day.\r\n\t\treturn formatters[locale].dayMonth.format(getDate(value))\r\n\t}\r\n}\r\n\r\n// If the `date` happened/happens outside of current year,\r\n// then output day, month and year.\r\n// The interval should be such that the `date` lies outside of the current year.\r\nconst yearMonthAndDay = {\r\n\tminTime(timestamp, { future }) {\r\n\t\tif (future) {\r\n\t\t\t// January 1, 00:00, of the `date`'s year is right after\r\n\t\t\t// the maximum `now` for formatting a future date:\r\n\t\t\t// When `now` is before that date, the `date` is formatted as \"day/month/year\" (this step),\r\n\t\t\t// When `now` is equal to or after that date, the `date` is formatted as \"day/month\" (another step).\r\n\t\t\t// After that, it's hours, minutes, seconds, and after that it's no longer `future`.\r\n\t\t\t// The date is right after the maximum `now` for formatting a future date,\r\n\t\t\t// so subtract 1 millisecond from it.\r\n\t\t\tconst maxFittingNow = new Date(new Date(timestamp).getFullYear(), 0).getTime() - 1\r\n\t\t\t// Return `minTime` (in seconds).\r\n\t\t\treturn (timestamp - maxFittingNow) / 1000\r\n\t\t} else {\r\n\t\t\t// January 1, 00:00, of the year following the `date`'s year\r\n\t\t\t// is the minimum `now` for formatting a past date:\r\n\t\t\t// When `now` is before that date, the `date` is formatted as \"day/month\" (another step),\r\n\t\t\t// When `now` is equal to or after that date, the `date` is formatted as \"day/month/year\" (this step).\r\n\t\t\t// After that, it's hours, minutes, seconds, and after that it's no longer `future`.\r\n\t\t\tconst minFittingNow = new Date(new Date(timestamp).getFullYear() + 1, 0).getTime()\r\n\t\t\t// Return `minTime` (in seconds).\r\n\t\t\treturn (minFittingNow - timestamp) / 1000\r\n\t\t}\r\n\t},\r\n\tformat(value, locale) {\r\n\t\t/* istanbul ignore if */\r\n\t\tif (!formatters[locale]) {\r\n\t\t\tformatters[locale] = {}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!formatters[locale].dayMonthYear) {\r\n\t\t\t// \"Apr 11, 2017\" (yMMMd)\r\n\t\t\tformatters[locale].dayMonthYear = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\tyear: 'numeric',\r\n\t\t\t\tmonth: 'short',\r\n\t\t\t\tday: 'numeric'\r\n\t\t\t})\r\n\t\t}\r\n\t\t// Output day, month and year.\r\n\t\treturn formatters[locale].dayMonthYear.format(getDate(value))\r\n\t}\r\n}\r\n\r\n// If `Intl.DateTimeFormat` is supported,\r\n// then longer time intervals will be formatted as dates.\r\n/* istanbul ignore else */\r\nif (intlDateTimeFormatSupported()) {\r\n\tsteps.push(monthAndDay, yearMonthAndDay)\r\n}\r\n// Otherwise, if `Intl.DateTimeFormat` is not supported,\r\n// which could be the case when using Internet Explorer,\r\n// then simply mimick \"round\" steps.\r\nelse {\r\n\tsteps.push(\r\n\t\t{\r\n\t\t\tformatAs: 'day'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'week'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'month'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'year'\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport default {\r\n\tsteps,\r\n\tlabels: [\r\n\t\t// \"mini\" labels are only defined for a few languages.\r\n\t\t'mini',\r\n\t\t// \"short-time\" labels are only defined for a few languages.\r\n\t\t'short-time',\r\n\t\t// \"narrow\" and \"short\" labels are defined for all languages.\r\n\t\t// \"narrow\" labels can sometimes be weird (like \"+5d.\"),\r\n\t\t// but \"short\" labels have the \" ago\" part, so \"narrow\" seem\r\n\t\t// more appropriate.\r\n\t\t// \"short\" labels would have been more appropriate if they\r\n\t\t// didn't have the \" ago\" part, hence the \"short-time\" above.\r\n\t\t'narrow',\r\n\t\t// Since \"narrow\" labels are always present, \"short\" element\r\n\t\t// of this array can be removed.\r\n\t\t'short'\r\n\t]\r\n}"],"file":"twitter.js"}