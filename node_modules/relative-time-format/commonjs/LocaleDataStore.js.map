{"version":3,"sources":["../source/LocaleDataStore.js"],"names":["defaultLocale","localesData","lowercaseLocaleLookup","getDefaultLocale","setDefaultLocale","locale","getLocaleData","addLocaleData","localeData","Error","toLowerCase","resolveLocale"],"mappings":";;;;;;;;;;AAAA;AACA;AACA,IAAIA,aAAa,GAAG,IAApB,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAG,EAApB,C,CAEA;AACA;;AACA,IAAMC,qBAAqB,GAAG,EAA9B;;AAEO,SAASC,gBAAT,GAA4B;AACjC,SAAOH,aAAP;AACD;;AAEM,SAASI,gBAAT,CAA0BC,MAA1B,EAAkC;AACvCL,EAAAA,aAAa,GAAGK,MAAhB;AACD;AAED;;;;;;AAIO,SAASC,aAAT,CAAuBD,MAAvB,EAA+B;AACrC,SAAOJ,WAAW,CAACI,MAAD,CAAlB;AACA;AAED;;;;;;;AAKO,SAASE,aAAT,CAAuBC,UAAvB,EAAmC;AACxC,MAAI,CAACA,UAAL,EAAiB;AACf,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD,GAHuC,CAIxC;AACA;;;AACAR,EAAAA,WAAW,CAACO,UAAU,CAACH,MAAZ,CAAX,GAAiCG,UAAjC;AACAN,EAAAA,qBAAqB,CAACM,UAAU,CAACH,MAAX,CAAkBK,WAAlB,EAAD,CAArB,GAAyDF,UAAU,CAACH,MAApE;AACD;AAED;;;;;;;;AAMO,SAASM,aAAT,CAAuBN,MAAvB,EAA+B;AACrC,MAAIJ,WAAW,CAACI,MAAD,CAAf,EAAyB;AACxB,WAAOA,MAAP;AACA;;AACD,MAAIH,qBAAqB,CAACG,MAAM,CAACK,WAAP,EAAD,CAAzB,EAAiD;AAChD,WAAOR,qBAAqB,CAACG,MAAM,CAACK,WAAP,EAAD,CAA5B;AACA;AACD","sourcesContent":["// Fallback locale.\r\n// (when not a single one of the supplied \"preferred\" locales is available)\r\nlet defaultLocale = 'en'\r\n\r\n// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\n// According to the spec BCP 47 language tags are case-insensitive.\r\n// https://tools.ietf.org/html/rfc5646\r\nconst lowercaseLocaleLookup = {}\r\n\r\nexport function getDefaultLocale() {\r\n  return defaultLocale\r\n}\r\n\r\nexport function setDefaultLocale(locale) {\r\n  defaultLocale = locale\r\n}\r\n\r\n/**\r\n * Gets locale data previously added by `addLocaleData()`.\r\n * @return  {object} [localeData]\r\n */\r\nexport function getLocaleData(locale) {\r\n\treturn localesData[locale]\r\n}\r\n\r\n/**\r\n * Adds locale data.\r\n * Is called by `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {object} localeData\r\n */\r\nexport function addLocaleData(localeData) {\r\n  if (!localeData) {\r\n    throw new Error('No locale data passed')\r\n  }\r\n  // This locale data is stored in a global variable\r\n  // and later used when calling `.format(time)`.\r\n  localesData[localeData.locale] = localeData\r\n  lowercaseLocaleLookup[localeData.locale.toLowerCase()] = localeData.locale\r\n}\r\n\r\n/**\r\n * Returns a locale for which locale data has been added\r\n * via `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n */\r\nexport function resolveLocale(locale) {\r\n\tif (localesData[locale]) {\r\n\t\treturn locale\r\n\t}\r\n\tif (lowercaseLocaleLookup[locale.toLowerCase()]) {\r\n\t\treturn lowercaseLocaleLookup[locale.toLowerCase()]\r\n\t}\r\n}"],"file":"LocaleDataStore.js"}