{"version":3,"sources":["../source/RelativeTimeFormat.js"],"names":["getDefaultLocale","setDefaultLocale","getLocaleData","addLocaleData","resolveLocale","PluralRules","UNITS","NUMERIC_VALUES","STYLE_VALUES","LOCALE_MATCHER_VALUES","RelativeTimeFormat","locales","options","numeric","style","localeMatcher","undefined","indexOf","RangeError","push","locale","supportedLocalesOf","Error","length","pluralRules","console","warn","Intl","NumberFormat","numberFormat","numberingSystem","resolvedOptions","parseFormatArgs","arguments","number","unit","getRule","replace","formatNumber","Math","abs","rule","valueIndex","type","value","parts","slice","concat","formatNumberToParts","map","part","unitMessages","message","current","pluralizedMessages","isNegative","quantifier","select","other","format","String","formatToParts","Array","isArray","TypeError","filter","addLocale","UNIT_ERROR","parseUnit","NUMBER_ERROR","parseNumber","Number","isFinite","isNegativeZero","Infinity","args"],"mappings":"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","sourcesContent":["import {\r\n  getDefaultLocale,\r\n  setDefaultLocale,\r\n  getLocaleData,\r\n  addLocaleData\r\n} from './LocaleDataStore'\r\n\r\nimport resolveLocale from './resolveLocale'\r\nimport PluralRules from './PluralRules'\r\n// Importing `PluralRule` polyfill from a separate package\r\n// results in a bundle that is larger by 1kB for some reason.\r\n// import PluralRules from 'intl-plural-rules-polyfill/cardinal'\r\n\r\n// Valid time units.\r\nexport const UNITS = [\r\n  \"second\",\r\n  \"minute\",\r\n  \"hour\",\r\n  \"day\",\r\n  \"week\",\r\n  \"month\",\r\n  \"quarter\",\r\n  \"year\"\r\n]\r\n\r\n// Valid values for the `numeric` option.\r\nconst NUMERIC_VALUES = [\r\n  \"auto\",\r\n  \"always\"\r\n]\r\n\r\n// Valid values for the `style` option.\r\nconst STYLE_VALUES = [\r\n  \"long\",\r\n  \"short\",\r\n  \"narrow\"\r\n]\r\n\r\n// Valid values for the `localeMatcher` option.\r\nconst LOCALE_MATCHER_VALUES = [\r\n  \"lookup\",\r\n  \"best fit\"\r\n]\r\n\r\n/**\r\n * Polyfill for `Intl.RelativeTimeFormat` proposal.\r\n * https://github.com/tc39/proposal-intl-relative-time\r\n * https://github.com/tc39/proposal-intl-relative-time/issues/55\r\n */\r\nexport default class RelativeTimeFormat {\r\n  numeric = \"always\"\r\n  style = \"long\"\r\n  localeMatcher = \"lookup\"\r\n\r\n  /**\r\n   * @param {(string|string[])} [locales] - Preferred locales (or locale).\r\n   * @param {Object} [options] - Formatting options.\r\n   * @param {string} [options.style=\"long\"] - One of: \"long\", \"short\", \"narrow\".\r\n   * @param {string} [options.numeric=\"always\"] - (Version >= 2) One of: \"always\", \"auto\".\r\n   * @param {string} [options.localeMatcher=\"lookup\"] - One of: \"lookup\", \"best fit\". Currently only \"lookup\" is supported.\r\n   */\r\n  constructor(locales = [], options = {}) {\r\n    const {\r\n      numeric,\r\n      style,\r\n      localeMatcher\r\n    } = options\r\n\r\n    // Set `numeric` option.\r\n    if (numeric !== undefined) {\r\n      if (NUMERIC_VALUES.indexOf(numeric) < 0) {\r\n        throw new RangeError(`Invalid \"numeric\" option: ${numeric}`)\r\n      }\r\n      this.numeric = numeric\r\n    }\r\n\r\n    // Set `style` option.\r\n    if (style !== undefined) {\r\n      if (STYLE_VALUES.indexOf(style) < 0) {\r\n        throw new RangeError(`Invalid \"style\" option: ${style}`)\r\n      }\r\n      this.style = style\r\n    }\r\n\r\n    // Set `localeMatcher` option.\r\n    if (localeMatcher !== undefined) {\r\n      if (LOCALE_MATCHER_VALUES.indexOf(localeMatcher) < 0) {\r\n        throw new RangeError(`Invalid \"localeMatcher\" option: ${localeMatcher}`)\r\n      }\r\n      this.localeMatcher = localeMatcher\r\n    }\r\n\r\n    // Set `locale`.\r\n    // Convert `locales` to an array.\r\n    if (typeof locales === 'string') {\r\n      locales = [locales]\r\n    }\r\n    // Add default locale.\r\n    locales.push(getDefaultLocale())\r\n    // Choose the most appropriate locale.\r\n    this.locale = RelativeTimeFormat.supportedLocalesOf(locales, {\r\n      localeMatcher: this.localeMatcher\r\n    })[0]\r\n    if (!this.locale) {\r\n      throw new Error(\"No supported locale was found\")\r\n    }\r\n\r\n    // Construct an `Intl.PluralRules` instance (polyfill).\r\n    if (PluralRules.supportedLocalesOf(this.locale).length > 0) {\r\n      this.pluralRules = new PluralRules(this.locale)\r\n    } else {\r\n      console.warn(`\"${this.locale}\" locale is not supported`)\r\n    }\r\n\r\n    // Use `Intl.NumberFormat` for formatting numbers (when available).\r\n    if (typeof Intl !== 'undefined' && Intl.NumberFormat) {\r\n      this.numberFormat = new Intl.NumberFormat(this.locale)\r\n      this.numberingSystem = this.numberFormat.resolvedOptions().numberingSystem\r\n    } else {\r\n      this.numberingSystem = 'latn'\r\n    }\r\n\r\n    this.locale = resolveLocale(this.locale, {\r\n      localeMatcher: this.localeMatcher\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Formats time `number` in `units` (either in past or in future).\r\n   * @param {number} number - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"2 days ago\"\r\n   * rtf.format(-2, \"day\")\r\n   * // Returns \"in 5 minutes\"\r\n   * rtf.format(5, \"minute\")\r\n   */\r\n  format() {\r\n    const [number, unit] = parseFormatArgs(arguments)\r\n    return this.getRule(number, unit).replace('{0}', this.formatNumber(Math.abs(number)))\r\n  }\r\n\r\n  /**\r\n   * Formats time `number` in `units` (either in past or in future).\r\n   * @param {number} number - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {Object[]} The parts (`{ type, value }`).\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Version 1.\r\n   * // Returns [\r\n   * //   { type: \"literal\", value: \"in \" },\r\n   * //   { type: \"day\", value: \"100\" },\r\n   * //   { type: \"literal\", value: \" days\" }\r\n   * // ]\r\n   * rtf.formatToParts(100, \"day\")\r\n   * //\r\n   * // Version 2.\r\n   * // Returns [\r\n   * //   { type: \"literal\", value: \"in \" },\r\n   * //   { type: \"integer\", value: \"100\", unit: \"day\" },\r\n   * //   { type: \"literal\", value: \" days\" }\r\n   * // ]\r\n   * rtf.formatToParts(100, \"day\")\r\n   */\r\n  formatToParts() {\r\n    const [number, unit] = parseFormatArgs(arguments)\r\n    const rule = this.getRule(number, unit)\r\n    const valueIndex = rule.indexOf(\"{0}\")\r\n    // \"yesterday\"/\"today\"/\"tomorrow\".\r\n    if (valueIndex < 0) {\r\n      return [{\r\n        type: \"literal\",\r\n        value: rule\r\n      }]\r\n    }\r\n    let parts = []\r\n    if (valueIndex > 0) {\r\n      parts.push({\r\n        type: \"literal\",\r\n        value: rule.slice(0, valueIndex)\r\n      })\r\n    }\r\n    parts = parts.concat(\r\n      this.formatNumberToParts(Math.abs(number))\r\n        .map(part => ({ ...part, unit }))\r\n    )\r\n    if (valueIndex + \"{0}\".length < rule.length - 1) {\r\n      parts.push({\r\n        type: \"literal\",\r\n        value: rule.slice(valueIndex + \"{0}\".length)\r\n      })\r\n    }\r\n    return parts\r\n  }\r\n\r\n  /**\r\n   * Returns formatting rule for `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"{0} days ago\"\r\n   * getRule(-2, \"day\")\r\n   */\r\n  getRule(value, unit) {\r\n    // Get locale-specific time interval formatting rules\r\n    // of a given `style` for the given value of measurement `unit`.\r\n    //\r\n    // E.g.:\r\n    //\r\n    // ```json\r\n    // {\r\n    //  \"past\": {\r\n    //    \"one\": \"a second ago\",\r\n    //    \"other\": \"{0} seconds ago\"\r\n    //  },\r\n    //  \"future\": {\r\n    //    \"one\": \"in a second\",\r\n    //    \"other\": \"in {0} seconds\"\r\n    //  }\r\n    // }\r\n    // ```\r\n    //\r\n    const unitMessages = getLocaleData(this.locale)[this.style][unit]\r\n    // Special case for \"yesterday\"/\"today\"/\"tomorrow\".\r\n    if (this.numeric === \"auto\") {\r\n      // \"yesterday\", \"the day before yesterday\", etc.\r\n      if (value === -2 || value === -1) {\r\n        const message = unitMessages[`previous${value === -1 ? '' : '-' + Math.abs(value)}`]\r\n        if (message) {\r\n          return message\r\n        }\r\n      }\r\n      // \"tomorrow\", \"the day after tomorrow\", etc.\r\n      else if (value === 1 || value === 2) {\r\n        const message = unitMessages[`next${value === 1 ? '' : '-' + Math.abs(value)}`]\r\n        if (message) {\r\n          return message\r\n        }\r\n      }\r\n      // \"today\"\r\n      else if (value === 0) {\r\n        if (unitMessages.current) {\r\n          return unitMessages.current\r\n        }\r\n      }\r\n    }\r\n    // Choose either \"past\" or \"future\" based on time `value` sign.\r\n    // If there's only \"other\" then it's being collapsed.\r\n    // (the resulting bundle size optimization technique)\r\n    const pluralizedMessages = unitMessages[isNegative(value) ? \"past\" : \"future\"]\r\n    // Bundle size optimization technique.\r\n    if (typeof pluralizedMessages === \"string\") {\r\n      return pluralizedMessages\r\n    }\r\n    // Quantify `value`.\r\n    // There seems to be no such locale in CLDR\r\n    // for which \"plural rules\" function is missing.\r\n    const quantifier = this.pluralRules && this.pluralRules.select(Math.abs(value)) || 'other'\r\n    // \"other\" rule is supposed to be always present.\r\n    // If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n    return pluralizedMessages[quantifier] || pluralizedMessages.other\r\n  }\r\n\r\n  /**\r\n   * Formats a number into a string.\r\n   * Uses `Intl.NumberFormat` when available.\r\n   * @param  {number} number\r\n   * @return {string}\r\n   */\r\n  formatNumber(number) {\r\n    return this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n  }\r\n\r\n  /**\r\n   * Formats a number into a list of parts.\r\n   * Uses `Intl.NumberFormat` when available.\r\n   * @param  {number} number\r\n   * @return {object[]}\r\n   */\r\n  formatNumberToParts(number) {\r\n    // `Intl.NumberFormat.formatToParts()` is not present, for example,\r\n    // in Node.js 8.x while `Intl.NumberFormat` itself is present.\r\n    return this.numberFormat && this.numberFormat.formatToParts ?\r\n      this.numberFormat.formatToParts(number) :\r\n      [{\r\n        type: \"integer\",\r\n        value: this.formatNumber(number)\r\n      }]\r\n  }\r\n\r\n  /**\r\n   * Returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\r\n   * @return {Object}\r\n   */\r\n  resolvedOptions() {\r\n    return {\r\n      locale: this.locale,\r\n      style: this.style,\r\n      numeric: this.numeric,\r\n      numberingSystem: this.numberingSystem\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns an array containing those of the provided locales\r\n * that are supported in collation without having to fall back\r\n * to the runtime's default locale.\r\n * @param {(string|string[])} locale - A string with a BCP 47 language tag, or an array of such strings. For the general form of the locales argument, see the Intl page.\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string[]} An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.\r\n * @example\r\n * var locales = ['ban', 'id-u-co-pinyin', 'es-PY']\r\n * var options = { localeMatcher: 'lookup' }\r\n * // Returns [\"id\", \"es-PY\"]\r\n * Intl.RelativeTimeFormat.supportedLocalesOf(locales, options)\r\n */\r\nRelativeTimeFormat.supportedLocalesOf = function(locales, options = {}) {\r\n  // Convert `locales` to an array.\r\n  if (typeof locales === 'string') {\r\n    locales = [locales]\r\n  } else if (!Array.isArray(locales)) {\r\n    throw new TypeError('Invalid \"locales\" argument')\r\n  }\r\n  return locales.filter(locale => resolveLocale(locale, options))\r\n}\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nRelativeTimeFormat.addLocale = addLocaleData\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nRelativeTimeFormat.setDefaultLocale = setDefaultLocale\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nRelativeTimeFormat.getDefaultLocale = getDefaultLocale\r\n\r\n/**\r\n * Export `Intl.PluralRules` just in case it's used somewhere else.\r\n */\r\nRelativeTimeFormat.PluralRules = PluralRules\r\n\r\n// The specification allows units to be in plural form.\r\n// Convert plural to singular.\r\n// Example: \"seconds\" -> \"second\".\r\nconst UNIT_ERROR = 'Invalid \"unit\" argument'\r\nfunction parseUnit(unit) {\r\n  if (typeof unit === 'symbol') {\r\n    throw new TypeError(UNIT_ERROR)\r\n  }\r\n  if (typeof unit !== 'string') {\r\n    throw new RangeError(`${UNIT_ERROR}: ${unit}`)\r\n  }\r\n  if (unit[unit.length - 1] === 's') {\r\n    unit = unit.slice(0, unit.length - 1)\r\n  }\r\n  if (UNITS.indexOf(unit) < 0) {\r\n    throw new RangeError(`${UNIT_ERROR}: ${unit}`)\r\n  }\r\n  return unit\r\n}\r\n\r\n// Converts `value` to a `Number`.\r\n// The specification allows value to be a non-number.\r\n// For example, \"-0\" is supposed to be treated as `-0`.\r\n// Also checks if `value` is a finite number.\r\nconst NUMBER_ERROR = 'Invalid \"number\" argument'\r\nfunction parseNumber(value) {\r\n  value = Number(value)\r\n  if (Number.isFinite) {\r\n    if (!Number.isFinite(value)) {\r\n      throw new RangeError(`${NUMBER_ERROR}: ${value}`)\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\n/**\r\n * Tells `0` from `-0`.\r\n * https://stackoverflow.com/questions/7223359/are-0-and-0-the-same\r\n * @param  {number} number\r\n * @return {Boolean}\r\n * @example\r\n * isNegativeZero(0); // false\r\n * isNegativeZero(-0); // true\r\n */\r\nfunction isNegativeZero(number) {\r\n  return 1 / number === -Infinity\r\n}\r\n\r\nfunction isNegative(number) {\r\n  return number < 0 || number === 0 && isNegativeZero(number)\r\n}\r\n\r\nfunction parseFormatArgs(args) {\r\n  if (args.length < 2) {\r\n    throw new TypeError(`\"unit\" argument is required`)\r\n  }\r\n  return [\r\n    parseNumber(args[0]),\r\n    parseUnit(args[1])\r\n  ]\r\n}"],"file":"RelativeTimeFormat.js"}