{"version":3,"sources":["../source/PluralRules.test.js"],"names":["PluralRules","describe","it","expect","to","throw","type","select","equal","supportedLocalesOf","deep"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAEAC,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AAClCC,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAM;AAC9CC,IAAAA,MAAM,CAAC;AAAA,aAAM,IAAIH,WAAJ,CAAgB,IAAhB,CAAN;AAAA,KAAD,CAAN,CAAoCI,EAApC,CAAuCC,KAAvC,CAA6C,oBAA7C;AACA,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAM;AAC3CC,IAAAA,MAAM,CAAC;AAAA,aAAM,IAAIH,WAAJ,CAAgB,KAAhB,CAAN;AAAA,KAAD,CAAN,CAAqCI,EAArC,CAAwCC,KAAxC,CAA8C,gBAA9C;AACA,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACzCC,IAAAA,MAAM,CAAC;AAAA,aAAM,IAAIH,WAAJ,CAAgB,IAAhB,EAAsB;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAtB,CAAN;AAAA,KAAD,CAAN,CAAyDF,EAAzD,CAA4DC,KAA5D,CAAkE,qCAAlE;AACA,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AACnCC,IAAAA,MAAM,CAAC,IAAIH,WAAJ,CAAgB,IAAhB,EAAsBO,MAAtB,CAA6B,CAA7B,CAAD,CAAN,CAAwCH,EAAxC,CAA2CI,KAA3C,CAAiD,OAAjD;AACAL,IAAAA,MAAM,CAAC,IAAIH,WAAJ,CAAgB,IAAhB,EAAsBO,MAAtB,CAA6B,CAA7B,CAAD,CAAN,CAAwCH,EAAxC,CAA2CI,KAA3C,CAAiD,KAAjD;AACA,GAHC,CAAF;AAKAN,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACxCC,IAAAA,MAAM,CAAC,IAAIH,WAAJ,CAAgB,aAAhB,EAA+BO,MAA/B,CAAsC,CAAtC,CAAD,CAAN,CAAiDH,EAAjD,CAAoDI,KAApD,CAA0D,OAA1D;AACAL,IAAAA,MAAM,CAAC,IAAIH,WAAJ,CAAgB,aAAhB,EAA+BO,MAA/B,CAAsC,CAAtC,CAAD,CAAN,CAAiDH,EAAjD,CAAoDI,KAApD,CAA0D,KAA1D;AACA,GAHC,CAAF;AAKAN,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAM;AAC9CC,IAAAA,MAAM,CAACH,WAAW,CAACS,kBAAZ,CAA+B,YAA/B,CAAD,CAAN,CAAqDL,EAArD,CAAwDM,IAAxD,CAA6DF,KAA7D,CAAmE,CAAC,YAAD,CAAnE;AACAL,IAAAA,MAAM,CAACH,WAAW,CAACS,kBAAZ,CAA+B,CAAC,YAAD,CAA/B,CAAD,CAAN,CAAuDL,EAAvD,CAA0DM,IAA1D,CAA+DF,KAA/D,CAAqE,CAAC,YAAD,CAArE;AACA,GAHC,CAAF;AAIA,CA3BO,CAAR","sourcesContent":["import PluralRules from './PluralRules'\r\n\r\ndescribe('Intl.PluralRules', () => {\r\n\tit('should validate \"locales\" argument', () => {\r\n\t\texpect(() => new PluralRules('xx')).to.throw('Unsupported locale')\r\n\t})\r\n\r\n\tit('should validate \"locale\" format', () => {\r\n\t\texpect(() => new PluralRules('-en')).to.throw('Invalid locale')\r\n\t})\r\n\r\n\tit('should validate \"type\" option', () => {\r\n\t\texpect(() => new PluralRules('en', { type: 'ordinal' })).to.throw('Only \"cardinal\" \"type\" is supported')\r\n\t})\r\n\r\n\tit('should quantify numbers', () => {\r\n\t\texpect(new PluralRules('en').select(0)).to.equal('other')\r\n\t\texpect(new PluralRules('en').select(1)).to.equal('one')\r\n\t})\r\n\r\n\tit('should use supported locales', () => {\r\n\t\texpect(new PluralRules('en-US-POSIX').select(0)).to.equal('other')\r\n\t\texpect(new PluralRules('en-US-POSIX').select(1)).to.equal('one')\r\n\t})\r\n\r\n\tit('should return supported locales of', () => {\r\n\t\texpect(PluralRules.supportedLocalesOf('ru-RU-Cyrl')).to.deep.equal(['ru-RU-Cyrl'])\r\n\t\texpect(PluralRules.supportedLocalesOf(['ru-RU-Cyrl'])).to.deep.equal(['ru-RU-Cyrl'])\r\n\t})\r\n})"],"file":"PluralRules.test.js"}